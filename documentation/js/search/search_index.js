var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessContorlService.html",[0,0.808,1,3.21]],["body/injectables/AccessContorlService.html",[0,1.073,1,4.262,2,1.596,3,0.113,4,0.103,5,0.082,6,6.347,7,3.322,8,0.348,9,1.256,10,2.659,11,5.801,12,6.803,13,1.43,14,6.263,15,3.891,16,5.748,17,5.801,18,1.683,19,0.777,20,5.748,21,5.057,22,3.695,23,4.15,24,3.571,25,5.057,26,4.602,27,6.263,28,5.057,29,6.263,30,4.602,31,3.203,32,6.263,33,1.323,34,5.057,35,1.64,36,0.01,37,1.264,38,0.676,39,1.264,40,1.274,41,4.941,42,5.057,43,5.057,44,1.598,45,2.347,46,4.15,47,5.733,48,4.15,49,4.15,50,4.15,51,1.75,52,2.21,53,2.504,54,4.15,55,1.462,56,2.775,57,0.201,58,0.555,59,1.696,60,1.75,61,1.75,62,5.057,63,5.057,64,0.113,65,0.153,66,3.651,67,3.651,68,3.651,69,3.651,70,2.16,71,1.725,72,4.602,73,1.345,74,3.651,75,3.651,76,5.057,77,3.651,78,3.651,79,3.651,80,5.057,81,3.651,82,2.775,83,0.006,84,0.006]],["title/entities/AnswerOption.html",[85,1.716,86,2.69]],["body/entities/AnswerOption.html",[3,0.111,4,0.101,5,0.081,8,0.342,9,1.239,18,1.666,19,0.71,36,0.01,38,0.728,40,1.25,41,2.827,57,0.228,64,0.193,65,0.241,83,0.006,84,0.006,85,2.798,86,4.386,87,2.12,88,2.827,89,2.406,90,5.226,91,4.992,92,4.76,93,1.128,94,1.898,95,4.198,96,4.072,97,4.896,98,4.072,99,3.019,100,4.206,101,5.226,102,5.943,103,4.072,104,4.072,105,3.409,106,1.067,107,3.357,108,4.055,109,4.84,110,3.938,111,3.357,112,1.52,113,3.584,114,3.019,115,3.538,116,4.275,117,4.206,118,4.206,119,3.584,120,3.692,121,1.898,122,3.208,123,1.583,124,3.26,125,2.827,126,3.26,127,3.26,128,3.26,129,2.827,130,3.208,131,2.827,132,3.26,133,3.019,134,3.26,135,2.529,136,3.26,137,2.827,138,3.26,139,3.938,140,3.26,141,3.019,142,3.26,143,3.019]],["title/controllers/AppController.html",[144,1.442,145,3.006]],["body/controllers/AppController.html",[0,1.248,3,0.142,4,0.129,5,0.103,8,0.437,10,2.167,13,1.663,18,1.329,19,0.523,36,0.01,44,1.261,57,0.282,58,0.696,64,0.183,65,0.273,71,1.261,83,0.008,84,0.008,94,1.4,106,1.364,123,1.167,144,2.227,145,5.128,146,2.29,147,3.859,148,2.513,149,6.455,150,5.205,151,2.526,152,1.707,153,2.607,154,1.229,155,1.834,156,1.943,157,3.408,158,4.004,159,1.598,160,1.687,161,5.105,162,1.837,163,4.371,164,3.408,165,1.663,166,2.513,167,2.195,168,1.943,169,3.233,170,1.687,171,1.539,172,5.353,173,4.167,174,2.001,175,4.167,176,2.267,177,3.233]],["title/modules/AppModule.html",[152,1.105,178,3.21]],["body/modules/AppModule.html",[3,0.114,4,0.103,5,0.083,13,1.036,19,0.419,35,1.036,36,0.01,37,0.798,38,0.377,39,0.798,44,1.009,45,2.355,57,0.3,58,0.557,64,0.114,65,0.154,83,0.006,84,0.006,152,1.686,176,1.814,177,4.809,178,6.654,179,2.355,180,1.814,181,1.941,182,1.941,183,1.814,184,1.941,185,3.664,186,3.664,187,5.374,188,5.374,189,5.374,190,5.374,191,5.374,192,5.374,193,5.069,194,5.374,195,5.374,196,5.374,197,5.374,198,5.069,199,2.685,200,1.875,201,1.875,202,4.165,203,2.685,204,4.165,205,5.762,206,7.129,207,4.165,208,4.165,209,5.762,210,3.088,211,3.088,212,2.891,213,4.165,214,4.165,215,4.165,216,3.334,217,2.891,218,4.165,219,4.165,220,4.165,221,4.165,222,4.165,223,4.165,224,4.165,225,1.941,226,4.165]],["title/interfaces/AssociativeArray.html",[61,1.826,227,2.254]],["body/interfaces/AssociativeArray.html",[3,0.139,4,0.126,5,0.101,19,0.511,36,0.01,51,2.777,53,2.868,55,2.32,57,0.255,61,2.143,64,0.211,65,0.188,71,2.05,83,0.007,84,0.007,93,1.07,105,3.179,112,1.897,165,1.638,227,3.802,228,3.157,229,4.069,230,4.471,231,3.486,232,5.082,233,5.271,234,5.082,235,5.793,236,5.082,237,1.791,238,3.328,239,5.847,240,6.426,241,4.471,242,4.069,243,4.471,244,3.328,245,4.069,246,3.896,247,5.793,248,4.471,249,4.069,250,4.471,251,4.471,252,4.471,253,3.157,254,4.471,255,3.157,256,5.793,257,5.793]],["title/classes/Auth.html",[65,0.16,258,2.69]],["body/classes/Auth.html",[3,0.187,4,0.17,5,0.136,36,0.009,64,0.187,65,0.253,83,0.009,84,0.009,258,4.914,259,1.844,260,6.033]],["title/controllers/AuthController.html",[144,1.442,261,3.21]],["body/controllers/AuthController.html",[3,0.115,4,0.105,5,0.084,8,0.355,13,1.447,19,0.782,35,1.871,36,0.01,37,1.442,38,0.649,39,1.442,44,1.884,57,0.263,58,0.565,64,0.115,65,0.156,70,2.199,83,0.007,84,0.007,93,1.039,94,2.091,144,1.407,146,1.447,148,2.039,153,2.116,154,0.998,162,1.051,165,1.934,174,1.624,258,2.624,261,4.314,262,3.716,263,2.378,264,5.818,265,4.697,266,5.818,267,5.856,268,5.119,269,3.716,270,4.601,271,5.818,272,4.224,273,4.224,274,4.874,275,5.818,276,2.809,277,4.224,278,4.224,279,4.224,280,4.224,281,4.224,282,4.224,283,4.359,284,4.224,285,4.714,286,5.818,287,5.818,288,4.224,289,5.765,290,4.224,291,4.244,292,5.818,293,5.818,294,4.224,295,2.389,296,3.764,297,2.389,298,4.359,299,3.716,300,1.902,301,3.716,302,2.116,303,3.132,304,4.224,305,4.224,306,3.132,307,4.224,308,4.224,309,5.818,310,4.224,311,4.224,312,4.224,313,4.224,314,4.224,315,4.224,316,4.224,317,4.224,318,4.224,319,4.224]],["title/guards/AuthGuard.html",[302,2.169,320,3.466]],["body/guards/AuthGuard.html",[0,1.059,3,0.111,4,0.101,5,0.081,8,0.342,10,2.116,13,1.411,18,1.448,19,0.656,22,3.765,31,1.614,33,1.305,35,1.624,36,0.01,37,1.252,38,0.639,39,1.252,44,1.375,57,0.281,58,0.544,59,1.664,60,1.717,64,0.155,65,0.15,71,1.582,73,1.838,83,0.006,84,0.006,93,0.758,94,1.095,106,1.067,123,1.272,151,2.288,162,1.013,165,1.756,167,2.753,168,2.437,170,2.116,171,1.502,212,2.827,225,1.898,302,2.842,321,1.966,322,3.26,323,2.753,324,7.06,325,5.673,326,4.072,327,6.528,328,3.993,329,5.848,330,4.072,331,5.673,332,5.673,333,5.652,334,4.072,335,3.26,336,3.357,337,5.673,338,5.652,339,4.072,340,4.541,341,2.12,342,2.739,343,1.898,344,1.566,345,3.582,346,3.26,347,3.26,348,2.643,349,2.827,350,4.072,351,4.072,352,1.898,353,4.072,354,4.991,355,3.582,356,5.673,357,4.072,358,4.072,359,4.072,360,3.863,361,5.673,362,1.582,363,3.152,364,5.226,365,5.226,366,3.582,367,1.898,368,4.072,369,3.582,370,4.072]],["title/modules/AuthModule.html",[152,1.105,187,3.006]],["body/modules/AuthModule.html",[3,0.131,4,0.119,5,0.096,33,1.108,36,0.01,57,0.301,58,0.644,64,0.131,65,0.178,83,0.007,84,0.007,106,1.261,123,1.08,146,2.177,151,2.618,152,1.816,176,3.099,179,1.968,180,2.097,181,2.244,182,2.244,183,2.097,184,3.315,187,6.105,193,5.291,199,2.962,200,2.168,201,2.168,203,2.962,210,3.57,261,5.275,298,5.676,299,4.236,371,4.236,372,4.236,373,4.236,374,4.815,375,5.608,376,5.608,377,4.815,378,4.815,379,5.088,380,4.815,381,3.153,382,2.849,383,2.723,384,1.968,385,3.342,386,4.815,387,4.815,388,3.153,389,4.815,390,4.815,391,4.815,392,4.815,393,3.57,394,4.236]],["title/injectables/AuthService.html",[0,0.808,298,2.835]],["body/injectables/AuthService.html",[0,0.607,2,0.757,3,0.054,4,0.049,5,0.039,8,0.165,10,1.731,13,0.808,18,0.83,19,0.729,22,1.87,31,0.78,33,1.564,35,1.771,36,0.01,37,1.413,38,0.644,39,1.365,44,1.726,55,1.145,57,0.249,58,0.263,59,0.804,60,0.83,64,0.054,65,0.073,71,2.013,82,1.57,83,0.004,84,0.004,89,0.638,93,1.092,106,0.515,112,0.734,123,1.082,151,1.972,155,0.693,156,0.734,157,1.288,158,2.614,159,0.604,160,1.563,162,1.2,163,4.124,164,3.159,165,1.972,166,3.502,167,2.567,168,2.272,169,2.996,170,2.351,171,1.721,200,0.886,231,1.416,239,1.575,263,1.328,265,1.288,267,2.86,268,2.86,269,2.86,270,3.403,274,2.854,276,2.938,283,1.288,285,2.458,289,4.512,291,2.854,298,2.129,300,0.886,301,1.731,323,3.319,336,2.854,338,2.602,349,2.257,352,3.568,362,1.294,363,3.072,367,2.68,369,1.731,381,1.288,384,0.804,395,1.731,396,3.251,397,3.251,398,3.251,399,2.86,400,3.251,401,2.257,402,4.824,403,3.251,404,3.251,405,1.731,406,2.728,407,4.512,408,3.985,409,1.968,410,2.41,411,3.251,412,1.968,413,3.188,414,3.251,415,1.968,416,3.117,417,1.968,418,3.251,419,1.968,420,3.251,421,1.731,422,1.968,423,3.251,424,1.968,425,3.251,426,1.968,427,3.168,428,1.968,429,3.251,430,1.968,431,1.968,432,3.862,433,3.251,434,1.968,435,3.251,436,1.968,437,3.251,438,1.968,439,3.159,440,1.459,441,1.164,442,2.602,443,1.968,444,1.459,445,2.081,446,3.251,447,3.251,448,5.06,449,3.251,450,4.154,451,4.824,452,3.251,453,1.968,454,1.288,455,1.607,456,3.993,457,1.924,458,3.251,459,3.993,460,3.349,461,3.251,462,2.257,463,3.251,464,3.251,465,3.251,466,3.576,467,3.251,468,1.968,469,1.968,470,1.968,471,1.968,472,1.968,473,4.154,474,3.251,475,3.251,476,1.731,477,1.968,478,1.288,479,1.968,480,1.968,481,1.366,482,1.731,483,3.251,484,1.968,485,1.968,486,1.968,487,1.968,488,1.066,489,1.164,490,1.968,491,1.731,492,1.459,493,2.72,494,2.41,495,3.251,496,1.968,497,1.968,498,1.968,499,1.968,500,1.968,501,1.968,502,1.968,503,1.968,504,1.968,505,3.251,506,1.968,507,1.968,508,1.366,509,1.968,510,1.968,511,1.968,512,1.968,513,1.968,514,1.731,515,1.968]],["title/injectables/AuthenticateMiddleware.html",[0,0.808,328,2.449]],["body/injectables/AuthenticateMiddleware.html",[0,1.116,2,1.69,3,0.12,4,0.109,5,0.087,8,0.369,10,1.938,13,1.487,18,1.526,19,0.601,22,1.979,33,1.811,35,1.487,36,0.01,37,1.146,38,0.541,39,1.146,44,1.065,55,2.107,57,0.255,58,0.588,61,2.522,64,0.12,65,0.162,71,1.647,73,2.202,83,0.007,84,0.007,93,0.799,106,1.152,151,2.609,152,1.122,162,1.69,166,3.281,167,2.866,168,2.537,171,1.564,225,2.049,283,2.879,289,4.433,323,2.866,328,3.382,340,5.839,342,3.683,343,3.399,344,2.299,349,3.052,352,2.049,360,4.021,362,1.647,364,5.44,365,5.44,381,2.879,388,3.916,407,5.835,445,2.202,454,1.742,455,1.464,478,4.45,516,3.519,517,4.433,518,4.396,519,4.396,520,4.787,521,4.125,522,5.839,523,4.396,524,4.787,525,5.261,526,3.867,527,5.978,528,3.867,529,3.867,530,3.519,531,3.867,532,3.867,533,3.867]],["title/entities/Category.html",[85,1.716,534,1.826]],["body/entities/Category.html",[3,0.117,4,0.106,5,0.085,8,0.36,9,1.284,18,1.094,19,0.831,36,0.01,37,1.286,38,0.79,40,2.058,51,2.478,52,2.259,57,0.264,64,0.117,65,0.248,83,0.007,84,0.007,85,1.698,87,2.231,89,2.173,93,1.089,94,2.222,95,3.792,97,4.474,105,2.837,106,1.123,107,3.477,111,3.477,112,1.599,120,2.423,122,3.792,123,1.618,130,4.673,216,3.43,237,1.51,362,1.424,534,2.478,535,3.77,536,4.972,537,4.972,538,4.166,539,2.921,540,4.972,541,5.369,542,3.177,543,6.706,544,4.285,545,2.974,546,4.285,547,4.972,548,5.169,549,4.285,550,4.285,551,4.285,552,3.43,553,4.285,554,4.285,555,2.974,556,4.285,557,4.482,558,3.77,559,4.285,560,4.079,561,2.949,562,2.859,563,2.662,564,3.177,565,3.177,566,4.285,567,3.359]],["title/controllers/CategoryController.html",[144,1.442,568,3.21]],["body/controllers/CategoryController.html",[3,0.09,4,0.082,5,0.065,8,0.276,13,1.21,19,0.719,31,1.303,35,1.779,36,0.01,37,1.487,38,0.747,39,1.371,40,1.777,44,1.733,51,2.881,56,2.349,57,0.276,58,0.44,59,1.344,60,1.387,64,0.09,65,0.121,70,1.712,82,2.796,83,0.005,84,0.005,89,2.462,93,1.113,94,1.99,106,0.861,144,1.095,146,1.126,148,1.588,153,1.647,154,0.777,162,0.818,165,1.779,170,1.577,174,1.264,263,2.366,295,2.751,296,3.275,297,1.86,300,1.481,302,1.647,321,1.588,344,1.264,362,1.179,534,1.387,538,3.975,539,2.975,568,3.607,569,2.893,570,2.533,571,2.879,572,2.637,573,3.275,574,4.865,575,2.893,576,4.596,577,4.117,578,3.787,579,2.283,580,3.288,581,2.633,582,2.637,583,2.437,584,3.022,585,3.288,586,3.288,587,3.288,588,3.288,589,2.879,590,3.895,591,3.288,592,3.288,593,2.438,594,3.895,595,3.288,596,1.86,597,3.288,598,3.288,599,2.043,600,5.274,601,3.288,602,3.288,603,3.288,604,3.288,605,3.288,606,3.288,607,2.043,608,1.86,609,4.02,610,4.02,611,2.438,612,2.153,613,5.63,614,3.792,615,2.438,616,3.186,617,1.712,618,3.607,619,2.283,620,4.041,621,3.377,622,4.02,623,2.153,624,3.597,625,5.791,626,3.288,627,3.426,628,3.426,629,2.283,630,4.865,631,3.377,632,3.377,633,3.288,634,2.191,635,3.288,636,3.288,637,3.288,638,2.633,639,3.288,640,3.288,641,2.438,642,3.288,643,3.288,644,2.153,645,2.153,646,3.288,647,3.288,648,3.288,649,3.288]],["title/modules/CategoryModule.html",[152,1.105,188,3.006]],["body/modules/CategoryModule.html",[3,0.151,4,0.137,5,0.11,36,0.01,57,0.293,58,0.74,64,0.151,65,0.204,83,0.008,84,0.008,106,1.449,146,2.381,151,2.717,152,1.94,176,3.31,179,2.261,180,2.41,181,2.578,182,2.578,183,2.41,184,3.542,188,6.027,199,3.239,200,2.491,201,2.491,203,2.578,383,3.129,384,2.261,534,2.333,568,5.635,614,5.788,615,4.102,650,4.867,651,4.867,652,4.867,653,5.532,654,4.867,655,4.867,656,5.532]],["title/injectables/CategoryService.html",[0,0.808,614,2.835]],["body/injectables/CategoryService.html",[0,0.662,2,0.841,3,0.06,4,0.054,5,0.043,8,0.184,10,1.448,13,0.881,18,0.905,19,0.667,35,1.649,36,0.01,37,1.381,38,0.6,39,1.271,40,0.671,44,1.543,51,2.168,57,0.24,58,0.292,64,0.06,65,0.081,71,1.983,83,0.004,84,0.004,89,2.282,93,1.074,106,0.573,112,0.816,123,0.795,151,2.064,155,0.77,156,0.816,157,1.432,158,2.785,159,0.671,160,1.666,162,0.881,163,4.718,164,4.17,165,1.967,166,3.746,167,2.97,168,2.558,170,2.514,171,1.848,231,2.46,263,1.826,300,0.985,323,3.41,336,2.097,352,3.479,362,1.746,363,3.605,367,2.818,384,0.894,406,2.907,441,1.294,445,2.829,454,2.238,455,1.712,456,2.46,457,1.294,494,3.81,508,3.568,534,3.387,538,2.202,539,1.947,570,1.845,571,2.097,572,1.921,573,2.527,575,3.118,576,3.508,577,3.451,590,3.578,593,2.628,596,2.004,599,1.358,600,4.604,614,2.321,616,2.321,617,1.138,655,1.924,657,1.924,658,4.469,659,6.047,660,2.837,661,2.187,662,2.187,663,2.837,664,3.544,665,2.187,666,3.118,667,2.187,668,3.075,669,2.187,670,3.118,671,2.187,672,2.187,673,2.187,674,2.187,675,1.432,676,1.751,677,1.621,678,2.187,679,2.187,680,2.187,681,2.187,682,2.187,683,2.187,684,3.544,685,2.187,686,4.522,687,2.187,688,1.518,689,5.22,690,1.924,691,3.932,692,2.187,693,3.544,694,4.841,695,4.522,696,2.187,697,3.544,698,5.139,699,3.544,700,2.187,701,2.187,702,2.187,703,2.187,704,3.544,705,2.187,706,2.187,707,2.187]],["title/interfaces/Config.html",[61,1.826,382,2.562]],["body/interfaces/Config.html",[3,0.134,4,0.122,5,0.098,8,0.413,9,1.407,33,1.482,36,0.01,38,0.768,55,2.687,61,2.073,64,0.134,71,1.191,83,0.007,84,0.007,93,1.168,148,3.823,228,3.053,242,3.934,258,4.001,265,5.185,382,4.513,388,5.321,488,3.491,578,4.513,708,3.934,709,6.966,710,6.629,711,5.157,712,5.157,713,5.157,714,3.353,715,5.157,716,4.323,717,4.323,718,4.323,719,4.323,720,4.323,721,4.323,722,4.323,723,4.323,724,4.323,725,4.323,726,4.323,727,4.323,728,4.323,729,4.323,730,5.667,731,4.323]],["title/entities/Course.html",[85,1.716,732,2.018]],["body/entities/Course.html",[3,0.084,4,0.076,5,0.061,8,0.257,9,1.008,18,0.782,19,0.839,33,1.603,36,0.01,38,0.779,40,1.704,51,2.938,52,2.86,57,0.26,64,0.084,65,0.205,82,1.479,83,0.005,84,0.005,85,1.214,87,1.595,89,1.799,92,2.731,93,1.09,94,2.243,95,3.14,97,4.504,99,3.421,105,2.228,106,0.803,107,2.731,108,3.449,109,3.421,110,3.203,111,2.731,112,1.144,113,3.49,114,2.271,115,3.349,120,1.733,121,2.587,122,4.514,123,1.486,129,3.854,130,3.939,131,3.854,237,1.079,362,2.021,440,2.271,488,2.501,492,3.421,534,3.21,539,2.418,542,2.271,545,2.127,547,4.581,552,3.694,555,2.127,560,3.203,561,2.847,562,2.865,563,1.903,567,3.489,732,2.15,733,2.695,734,4.884,735,4.444,736,4.884,737,4.985,738,4.116,739,4.116,740,4.116,741,4.116,742,4.34,743,3.14,744,2.453,745,4.615,746,3.064,747,3.064,748,3.064,749,3.022,750,3.064,751,3.064,752,3.064,753,3.064,754,3.064,755,4.615,756,3.064,757,3.064,758,3.064,759,3.064,760,3.064,761,4.615,762,3.064,763,4.615,764,4.615,765,4.615,766,3.064,767,3.064,768,4.444,769,2.695,770,4.06,771,4.06,772,4.06,773,3.064,774,3.064,775,3.064,776,3.064,777,3.064,778,2.695,779,3.064,780,3.064,781,2.695,782,2.695,783,3.694,784,3.064,785,3.064]],["title/controllers/CoursesController.html",[144,1.442,786,3.21]],["body/controllers/CoursesController.html",[3,0.075,4,0.068,5,0.055,8,0.23,13,1.055,19,0.699,31,1.088,33,1.815,35,1.73,36,0.01,37,1.493,38,0.759,39,1.334,40,2.048,44,1.686,51,2.462,52,1.055,53,1.196,55,2.599,56,2.818,57,0.264,58,0.367,59,1.122,60,1.158,64,0.075,65,0.101,70,1.429,73,1.375,83,0.005,84,0.005,89,1.375,93,1.041,94,1.932,106,0.719,123,0.952,144,0.914,146,0.94,148,1.325,153,1.375,154,0.648,162,0.683,165,1.73,170,1.375,174,1.055,227,3.039,246,3.07,253,3.92,255,4.464,263,2.12,295,2.4,296,2.934,297,1.552,300,1.236,302,1.375,321,1.325,344,1.055,348,3.511,362,1.415,488,2.3,521,2.4,539,2.906,570,2.701,571,2.511,572,2.3,573,2.934,577,3.895,578,3.454,579,4.052,581,3.397,582,3.164,583,2.924,584,3.626,589,3.948,596,1.552,607,1.705,608,1.552,609,3.601,610,3.601,612,2.779,617,1.429,618,3.846,619,1.906,620,3.948,621,4.052,622,3.601,623,1.798,624,3.223,627,3.734,628,3.734,629,4.632,631,2.946,632,2.946,634,1.911,644,1.798,645,1.798,660,3.397,732,1.279,742,4.369,786,3.146,787,2.415,788,2.198,789,3.733,790,2.745,791,2.745,792,2.745,793,4.244,794,2.745,795,2.415,796,4.321,797,2.415,798,2.745,799,2.745,800,2.415,801,2.745,802,2.198,803,3.146,804,3.146,805,2.745,806,2.415,807,4.244,808,2.745,809,2.745,810,2.415,811,3.733,812,2.745,813,2.745,814,2.745,815,2.745,816,5.12,817,2.745,818,2.745,819,2.745,820,2.035,821,2.035,822,3.846,823,3.397,824,2.415,825,3.397,826,2.745,827,2.745,828,4.673,829,2.745,830,2.745,831,2.946,832,2.946,833,2.946,834,2.779,835,2.946,836,2.946,837,2.946,838,2.035,839,2.035,840,2.035,841,2.035,842,2.745,843,2.745,844,2.745,845,2.745,846,2.745,847,2.745,848,2.745,849,2.745,850,2.745,851,2.745,852,2.745,853,2.745,854,2.745]],["title/modules/CoursesModule.html",[152,1.105,189,3.006]],["body/modules/CoursesModule.html",[3,0.148,4,0.135,5,0.108,33,1.25,36,0.01,57,0.296,58,0.726,64,0.148,65,0.201,83,0.008,84,0.008,146,2.353,152,1.923,176,3.282,179,2.219,180,2.366,181,2.531,182,2.531,183,2.366,184,3.512,189,6.007,198,5.464,199,3.201,200,2.446,201,2.446,203,3.201,383,3.071,384,2.219,534,2.897,732,2.531,786,5.587,823,5.774,824,4.778,855,4.778,856,4.778,857,5.431,858,4.778,859,5.431,860,5.431,861,4.778,862,4.027,863,5.431]],["title/injectables/CoursesService.html",[0,0.808,823,2.835]],["body/injectables/CoursesService.html",[0,0.591,2,0.733,3,0.052,4,0.047,5,0.038,8,0.16,10,1.835,13,0.787,18,0.808,19,0.655,33,1.381,35,1.621,36,0.01,37,1.25,38,0.59,39,1.25,44,1.522,51,1.713,57,0.251,58,0.255,64,0.052,65,0.07,71,1.959,83,0.004,84,0.004,89,2.036,93,1.037,106,0.499,112,0.711,121,1.475,123,1.547,151,1.945,155,0.672,156,0.711,158,2.564,159,0.585,160,1.533,162,1.176,165,1.945,166,3.744,167,3.206,168,0.711,170,2.513,171,1.784,227,2.462,231,3.311,244,1.248,263,1.66,300,0.858,321,0.92,323,3.39,336,1.874,348,3.133,352,3.501,362,1.629,363,2.734,367,2.796,384,0.779,406,3.393,441,1.128,445,3.006,454,2.378,455,2.349,456,5.074,457,3.55,493,2.66,534,1.995,539,2.466,570,1.648,571,1.874,572,1.716,573,2.968,577,3.069,583,2.837,590,2.535,596,1.791,599,1.184,608,1.078,617,0.992,660,2.535,663,3.251,666,2.786,668,2.897,670,2.786,675,1.248,676,1.526,688,1.323,689,2.347,694,1.526,695,1.677,732,3.839,734,5.279,738,2.347,739,2.347,741,1.413,742,4.269,743,1.791,788,6.397,789,2.786,795,1.677,796,3.727,806,2.786,810,2.786,816,4.36,823,2.073,825,2.535,861,1.677,862,1.413,864,1.677,865,4.73,866,1.906,867,3.55,868,4.061,869,2.675,870,1.906,871,2.535,872,1.906,873,3.166,874,1.906,875,1.906,876,1.906,877,1.526,878,1.906,879,1.906,880,1.906,881,1.906,882,1.413,883,1.906,884,1.323,885,1.526,886,1.906,887,1.906,888,1.906,889,5.249,890,1.906,891,5.662,892,3.166,893,4.161,894,4.061,895,1.906,896,1.906,897,1.906,898,1.906,899,1.906,900,1.906,901,1.906,902,1.906,903,1.906,904,1.906,905,1.906,906,2.819,907,4.982,908,3.573,909,3.787,910,3.573,911,1.906,912,3.166,913,4.73,914,3.166,915,3.166,916,1.906,917,3.166,918,1.906,919,2.347,920,1.906,921,1.906,922,1.413,923,1.906,924,1.906]],["title/classes/CreateAuthDto.html",[65,0.16,270,2.562]],["body/classes/CreateAuthDto.html",[3,0.126,4,0.115,5,0.092,8,0.388,9,1.352,19,0.622,36,0.01,38,0.56,55,2.181,57,0.261,64,0.169,65,0.287,83,0.007,84,0.007,93,1.091,94,1.664,154,1.093,155,1.63,156,1.727,159,1.42,160,1.5,171,1.838,237,1.63,259,1.244,270,3.663,274,3.663,276,4.002,285,3.663,291,3.663,362,1.5,413,2.318,416,2.508,427,3.877,439,3.03,561,3.334,562,3.166,925,4.842,926,3.212,927,4.955,928,4.589,929,4.627,930,3.845,931,4.589,932,4.627,933,3.554,934,4.297,935,4.087,936,4.589,937,3.597,938,5.171,939,3.431,940,3.431,941,3.431,942,2.617,943,3.431,944,3.431,945,3.431]],["title/classes/CreateCategoryDto.html",[65,0.16,576,2.69]],["body/classes/CreateCategoryDto.html",[3,0.127,4,0.115,5,0.092,8,0.389,9,1.354,19,0.702,36,0.01,37,1.565,38,0.703,39,1.188,40,2.661,57,0.261,64,0.169,65,0.258,82,3.371,83,0.007,84,0.007,93,1.069,94,1.877,154,1.095,155,1.634,156,1.731,159,1.423,160,1.502,171,1.839,237,1.634,238,4.059,259,1.247,534,3.498,538,4.63,561,2.853,562,2.954,576,3.85,634,3.144,668,2.238,933,3.247,935,4.089,937,3.144,946,5.967,947,3.036,948,4.572,949,6.198,950,4.962,951,4.636,952,3.505,953,5.453,954,3.359,955,3.712,956,4.079,957,4.636,958,4.636,959,3.359,960,5.453,961,5.453,962,2.622,963,5.453]],["title/classes/CreateCourseDto.html",[65,0.16,796,2.69]],["body/classes/CreateCourseDto.html",[3,0.099,4,0.09,5,0.072,8,0.306,9,1.145,19,0.786,36,0.01,37,1.288,38,0.76,40,2.65,51,2.21,57,0.235,64,0.143,65,0.227,82,3.774,83,0.006,84,0.006,89,1.698,93,1.15,94,2.102,121,2.861,154,0.86,155,1.283,156,1.359,159,1.118,160,1.18,169,3.255,171,1.832,237,1.283,259,0.979,362,1.628,534,2.832,561,3.029,562,3.026,634,1.64,668,1.758,732,3.71,735,5.697,738,4.552,739,4.552,741,5.276,743,2.964,783,4.196,796,3.255,828,5.377,933,3.468,935,4.048,937,3.52,948,5.118,952,2.964,954,2.84,955,2.915,956,3.203,959,3.64,962,2.059,964,6.373,965,2.7,966,5.402,967,7.117,968,3.641,969,3.641,970,3.641,971,5.241,972,3.641,973,3.641,974,3.641,975,4.196,976,3.641,977,3.641,978,3.203,979,3.203,980,3.203,981,3.203,982,3.203,983,4.611,984,3.203,985,3.203]],["title/classes/CreateLessonDto.html",[65,0.16,986,2.69]],["body/classes/CreateLessonDto.html",[3,0.112,4,0.102,5,0.13,8,0.345,9,1.247,19,0.795,33,0.945,36,0.01,38,0.783,39,1.589,40,2.513,51,2.766,52,2.194,57,0.229,64,0.156,65,0.242,83,0.006,84,0.006,93,1.129,94,2.126,113,3.422,115,2.226,121,3.684,154,0.97,171,0.945,237,1.447,259,1.104,362,1.383,561,2.332,562,2.599,582,3.093,589,3.377,634,2.57,668,1.983,743,4.359,933,3.511,937,3.353,948,4.877,952,4.008,954,3.841,959,4.177,962,3.227,986,3.545,987,6.454,988,3.045,989,5.673,990,5.25,991,5.769,992,5.02,993,5.707,994,4.107,995,4.107,996,4.107,997,4.107,998,4.107,999,4.107,1000,4.107,1001,4.107,1002,5.02,1003,5.02,1004,4.107,1005,4.107,1006,5.521,1007,4.107,1008,4.107,1009,4.107,1010,3.613,1011,3.613,1012,3.045,1013,3.288,1014,3.613,1015,3.613,1016,2.851]],["title/classes/CreateQuizDto.html",[65,0.16,1017,2.835]],["body/classes/CreateQuizDto.html",[3,0.13,4,0.118,5,0.095,8,0.4,9,1.379,19,0.712,36,0.01,38,0.743,39,1.21,40,2.638,51,2.01,56,3.048,57,0.221,64,0.13,65,0.176,82,2.301,83,0.007,84,0.007,91,3.736,92,4.937,93,1.099,94,1.904,116,4.134,119,4.029,121,3.83,123,1.069,125,4.914,133,5.587,135,3.922,137,4.383,139,3.309,141,3.534,143,3.534,154,1.126,259,1.282,362,1.716,578,2.82,782,4.193,933,3.283,937,3.188,948,4.636,1013,5.054,1017,4.134,1018,6.63,1019,3.816,1020,4.766,1021,4.766,1022,4.766,1023,3.816,1024,4.766,1025,6.897,1026,4.766,1027,4.766]],["title/classes/CreateUserCategoryDto.html",[65,0.16,1028,2.835]],["body/classes/CreateUserCategoryDto.html",[3,0.155,4,0.14,5,0.113,8,0.476,9,1.541,19,0.569,33,1.623,36,0.01,38,0.512,57,0.281,64,0.155,65,0.261,82,2.735,83,0.008,84,0.008,93,0.943,94,1.523,123,1.582,154,1.338,155,1.996,156,2.114,159,1.739,160,1.836,171,1.85,237,1.996,259,1.523,561,3.139,562,2.795,933,3.073,935,4.027,947,3.709,950,5.647,1028,4.619,1029,4.382,1030,6.206,1031,6.758,1032,5.664,1033,5.664,1034,7.054,1035,5.664,1036,7.682]],["title/classes/CreateUserDto.html",[65,0.16,1037,2.449]],["body/classes/CreateUserDto.html",[3,0.091,4,0.082,5,0.066,8,0.279,9,1.072,19,0.722,22,3.09,31,2.31,33,1.821,36,0.01,37,1.315,38,0.672,40,2.56,52,1.279,53,1.448,55,1.728,57,0.251,59,1.359,60,1.402,64,0.159,65,0.238,82,3.106,83,0.006,84,0.006,93,1.097,94,1.931,123,1.443,154,0.785,155,1.172,156,1.241,159,1.021,160,1.078,171,1.944,237,1.172,259,0.894,276,3.313,362,1.189,401,3.405,413,3.437,416,3.719,427,3.572,459,3.405,460,3.405,462,3.405,481,3.405,489,2.903,561,2.934,562,2.943,634,2.209,930,3.047,933,3.447,935,4.146,937,3.504,948,4.702,950,4.666,952,1.881,954,1.802,959,2.659,962,1.881,1016,3.405,1037,2.774,1038,5.506,1039,2.308,1040,3.325,1041,3.927,1042,3.927,1043,3.325,1044,3.927,1045,4.316,1046,3.325,1047,3.325,1048,3.927,1049,3.325,1050,3.325,1051,3.325,1052,3.325,1053,3.927,1054,3.325,1055,3.325,1056,3.325,1057,3.325,1058,3.927,1059,3.325,1060,2.662,1061,2.465,1062,2.662,1063,2.662,1064,1.606,1065,2.308,1066,2.308,1067,3.927,1068,2.662,1069,2.662,1070,2.662,1071,2.662,1072,2.662,1073,2.662,1074,2.662,1075,2.662,1076,2.662,1077,2.465,1078,2.662,1079,2.662,1080,2.662,1081,1.968,1082,1.402,1083,2.465,1084,2.178,1085,2.465,1086,2.662,1087,2.662,1088,2.662,1089,3.637,1090,2.662,1091,2.465,1092,2.662,1093,3.637,1094,2.662,1095,2.178]],["title/classes/CustomExceptionFilter.html",[65,0.16,1096,2.69]],["body/classes/CustomExceptionFilter.html",[0,1.076,3,0.114,4,0.103,5,0.083,8,0.35,10,1.35,13,1.433,15,2.168,18,1.063,19,0.579,24,4.428,35,1.433,36,0.01,37,1.105,38,0.521,39,1.105,44,1.009,45,2.355,55,2.03,57,0.262,58,0.557,64,0.195,65,0.263,71,1.96,73,1.35,83,0.006,84,0.006,93,0.953,123,0.934,151,2.509,154,0.984,162,1.433,165,1.036,167,2.786,168,2.466,170,2.31,171,1.52,174,1.601,225,2.685,231,2.51,259,1.12,341,2.168,342,3.614,343,3.322,344,1.601,362,1.009,363,2.782,454,2.825,455,1.919,539,2.51,567,2.886,714,3.439,1064,2.011,1082,1.756,1096,3.579,1097,2.891,1098,4.104,1099,3.664,1100,4.165,1101,3.579,1102,4.428,1103,4.165,1104,3.773,1105,3.773,1106,2.464,1107,2.464,1108,4,1109,4.104,1110,3.088,1111,2.727,1112,3.088,1113,3.088,1114,3.259,1115,4,1116,2.891,1117,3.773,1118,3.088,1119,2.891,1120,3.088,1121,3.088,1122,2.891,1123,3.088,1124,3.088,1125,3.088,1126,3.088,1127,3.088,1128,3.088,1129,3.088,1130,3.088,1131,3.088,1132,3.088,1133,3.088,1134,2.464,1135,2.587,1136,2.587,1137,3.088,1138,2.587,1139,2.727,1140,2.891,1141,3.088,1142,2.891,1143,3.088,1144,3.088,1145,2.587,1146,3.088,1147,3.088]],["title/classes/CustomResponseInterceptor.html",[65,0.16,1148,3.466]],["body/classes/CustomResponseInterceptor.html",[3,0.13,4,0.118,5,0.094,8,0.399,13,1.566,19,0.477,35,1.181,36,0.01,37,0.91,38,0.429,39,0.91,44,1.15,57,0.263,58,0.842,64,0.13,65,0.175,71,1.897,72,3.801,73,1.538,83,0.007,84,0.007,123,1.065,165,1.566,167,2.655,168,3.065,170,2.041,171,1.449,225,2.934,259,1.277,333,6.024,335,5.041,336,3.726,342,2.292,343,2.212,345,6.216,346,3.801,354,4.176,355,4.176,363,2.292,455,2.608,508,3.295,514,5.539,521,3.996,567,3.154,611,4.668,1108,4.371,1114,3.561,1116,4.371,1138,2.949,1145,2.949,1148,5.041,1149,4.176,1150,7.065,1151,7.065,1152,4.747,1153,7.524,1154,4.747,1155,6.296,1156,4.747,1157,4.747,1158,4.747,1159,4.747,1160,4.747,1161,4.747,1162,6.296,1163,6.296,1164,4.747,1165,4.176,1166,4.747,1167,4.747,1168,4.747,1169,4.747,1170,4.747,1171,4.747]],["title/modules/DbModule.html",[152,1.105,1172,3.006]],["body/modules/DbModule.html",[3,0.129,4,0.117,5,0.094,10,2.035,13,1.176,19,0.475,36,0.01,38,0.568,44,1.146,57,0.274,58,0.632,64,0.129,65,0.175,71,1.709,83,0.007,84,0.007,87,3.269,106,1.239,123,1.06,152,1.603,162,1.176,171,1.445,174,1.818,179,1.932,203,3.286,276,3.032,323,2.648,352,2.203,382,4.172,383,2.674,384,1.932,427,3.269,445,2.369,454,1.874,455,2.349,457,2.798,583,2.369,710,5.027,714,3.269,1106,3.716,1172,4.359,1173,4.728,1174,7.051,1175,4.728,1176,7.051,1177,7.418,1178,3.785,1179,3.506,1180,4.728,1181,4.728,1182,4.728,1183,4.728,1184,4.728,1185,4.728,1186,4.728,1187,6.28,1188,5.525,1189,5.525,1190,6.28,1191,6.28,1192,6.28,1193,6.28,1194,7.051,1195,6.28,1196,5.525,1197,6.28,1198,6.28,1199,6.28,1200,4.728,1201,6.28,1202,4.728,1203,5.525,1204,4.728,1205,4.728,1206,4.728,1207,4.728]],["title/modules/DefaultModule.html",[152,1.105,177,2.69]],["body/modules/DefaultModule.html",[0,1.218,3,0.137,4,0.124,5,0.099,10,2.113,18,1.278,36,0.01,57,0.279,58,0.669,64,0.178,65,0.268,71,1.214,83,0.007,84,0.007,106,1.312,123,1.123,144,2.172,145,5.034,146,2.234,147,3.713,149,5.221,151,2.733,152,1.851,153,2.508,154,1.183,155,1.764,156,1.869,157,3.279,158,3.93,159,1.537,160,1.623,161,5.523,162,1.804,163,4.291,164,3.279,165,1.622,166,2.418,167,2.112,168,1.869,169,3.11,170,1.623,171,1.501,172,5.221,173,4.009,174,1.925,175,4.009,176,3.159,177,5.238,179,2.046,180,2.181,181,2.333,182,2.333,183,2.181,184,2.333,199,3.039,200,2.255,201,2.255,1208,4.405,1209,4.405]],["title/injectables/DefaultService.html",[0,0.808,161,2.835]],["body/injectables/DefaultService.html",[0,1.228,2,1.95,3,0.138,4,0.126,5,0.101,8,0.426,10,2.131,13,1.635,18,1.678,19,0.661,35,1.261,36,0.01,37,0.972,38,0.459,39,0.972,44,1.229,57,0.28,58,0.678,64,0.18,65,0.27,71,1.229,83,0.007,84,0.007,106,1.329,123,1.137,144,2.19,145,4.564,146,1.737,147,3.76,149,6.403,151,2.703,152,1.678,153,2.541,154,1.198,155,1.787,156,1.893,157,3.321,158,4.521,159,1.557,160,1.644,161,5.238,162,1.815,163,4.317,164,3.321,165,1.635,166,2.449,167,2.139,168,1.893,169,3.15,170,1.644,171,1.513,172,5.264,173,4.06,174,1.95,175,4.06,176,2.209,177,3.15,1099,4.462,1210,5.072,1211,5.072]],["title/entities/Enroll.html",[85,1.716,737,2.835]],["body/entities/Enroll.html",[3,0.12,4,0.109,5,0.087,8,0.368,9,1.305,19,0.809,33,1.852,36,0.01,38,0.778,51,2.519,52,2.931,57,0.275,64,0.12,65,0.221,83,0.007,84,0.007,85,1.739,87,2.284,89,2.2,93,0.798,94,2.164,95,3.839,97,4.511,105,2.883,106,1.149,108,4.217,112,1.638,120,2.481,122,3.377,123,1.634,130,4.448,440,3.253,492,4.428,536,5.034,537,5.034,539,2.957,540,5.034,563,2.726,567,3.94,732,3.913,737,3.911,749,4.446,1212,3.86,1213,5.973,1214,5.254,1215,5.254,1216,4.388,1217,7.288,1218,4.388,1219,4.388,1220,4.388,1221,4.388,1222,4.388,1223,4.388,1224,4.388,1225,4.388,1226,4.388,1227,3.86,1228,3.86,1229,3.513,1230,4.388,1231,3.86,1232,3.86]],["title/controllers/EnrollsController.html",[144,1.442,1233,3.21]],["body/controllers/EnrollsController.html",[3,0.112,4,0.102,5,0.081,8,0.344,13,1.418,19,0.748,31,1.625,33,1.971,35,1.851,36,0.01,37,1.427,38,0.673,39,1.427,44,1.804,57,0.269,58,0.548,59,1.676,60,1.729,64,0.112,65,0.151,70,2.134,83,0.006,84,0.006,93,1.094,94,2.072,144,1.366,146,1.404,148,1.98,153,2.054,154,0.968,162,1.02,165,1.851,174,1.576,295,2.319,297,2.319,302,2.054,321,1.98,348,4.033,579,4.548,607,2.547,620,4.558,627,4.404,628,4.404,629,3.957,820,3.04,1233,4.226,1234,3.607,1235,3.607,1236,5.7,1237,5.7,1238,5.7,1239,5.7,1240,5.014,1241,4.1,1242,6.067,1243,4.1,1244,4.1,1245,4.1,1246,5.7,1247,4.1,1248,4.1,1249,4.1,1250,4.1,1251,4.1,1252,4.1,1253,4.1,1254,4.1,1255,4.1,1256,4.1,1257,4.1,1258,4.291,1259,3.607,1260,4.1,1261,4.1,1262,7.081,1263,4.1,1264,4.1,1265,4.1,1266,4.1,1267,4.1,1268,4.1,1269,4.1,1270,4.1,1271,4.1,1272,5.764,1273,4.1,1274,4.1,1275,4.1,1276,4.1,1277,4.1,1278,4.1,1279,4.1]],["title/modules/EnrollsModule.html",[152,1.105,190,3.006]],["body/modules/EnrollsModule.html",[3,0.151,4,0.138,5,0.11,33,1.602,36,0.01,57,0.298,58,0.741,64,0.151,65,0.205,83,0.008,84,0.008,146,2.384,152,1.942,176,3.314,179,2.266,180,2.415,181,2.584,182,2.584,183,2.415,184,3.545,190,5.909,199,3.244,200,2.497,201,2.497,203,2.584,383,3.136,384,2.266,385,3.849,732,3.244,737,3.631,1233,5.641,1258,5.79,1259,4.878,1280,4.878,1281,4.878,1282,4.878,1283,5.545,1284,5.545,1285,4.878,1286,4.111,1287,5.545]],["title/injectables/EnrollsService.html",[0,0.808,1258,2.835]],["body/injectables/EnrollsService.html",[0,0.769,2,1.016,3,0.072,4,0.066,5,0.052,8,0.222,9,0.9,10,2.009,18,1.051,19,0.66,33,1.678,35,0.657,36,0.01,37,0.506,38,0.239,39,0.506,52,2.384,53,2.7,57,0.261,58,0.353,64,0.072,65,0.098,71,1.985,83,0.005,84,0.005,89,2.564,93,0.677,106,0.692,112,0.986,151,2.223,155,0.931,156,0.986,158,3.099,159,0.811,160,1.853,162,1.024,165,1.968,166,3.82,170,2.564,171,1.897,231,2.491,321,1.275,323,2.614,348,3.061,352,3.687,363,3.599,384,1.079,385,1.834,406,4.216,410,3.753,441,1.563,444,1.958,445,3.105,454,2.457,455,2.483,457,3.668,466,4.596,492,3.753,493,1.73,539,1.794,583,3.105,732,3.644,737,4.973,871,4.053,885,2.115,906,2.859,909,2.115,919,1.958,1213,6.034,1235,6.242,1240,4.454,1242,5.26,1258,2.697,1285,2.324,1286,1.958,1288,2.324,1289,5.063,1290,5.063,1291,5.063,1292,5.063,1293,2.641,1294,2.641,1295,4.119,1296,2.641,1297,2.641,1298,2.641,1299,2.641,1300,2.641,1301,2.641,1302,5.718,1303,4.119,1304,4.119,1305,2.641,1306,5.718,1307,2.641,1308,2.641,1309,2.641,1310,2.641,1311,5.063,1312,5.063,1313,4.119,1314,2.641,1315,2.324,1316,4.119,1317,2.641,1318,2.641,1319,4.119,1320,2.115,1321,2.641,1322,2.641]],["title/injectables/FileRequestFilter.html",[0,0.808,1323,3.466]],["body/injectables/FileRequestFilter.html",[0,1.305,2,2.147,3,0.152,4,0.138,5,0.152,8,0.469,10,1.81,13,1.739,18,1.425,19,0.703,35,1.739,36,0.01,37,1.34,38,0.632,39,1.34,44,1.353,53,3.045,57,0.195,58,0.747,64,0.152,65,0.206,71,1.353,83,0.008,84,0.008,93,1.02,162,1.389,165,1.389,225,2.602,296,3.158,1106,3.304,1229,6.11,1323,5.597,1324,6.715,1325,4.14,1326,6.991,1327,5.584,1328,5.584,1329,6.991,1330,6.991,1331,7.999,1332,5.584,1333,6.991,1334,5.584,1335,5.584,1336,5.584,1337,5.584,1338,6.991,1339,5.584]],["title/classes/FilesDTO.html",[65,0.16,668,2.091]],["body/classes/FilesDTO.html",[3,0.136,4,0.124,5,0.129,8,0.42,9,1.423,19,0.655,33,1.15,36,0.01,38,0.738,40,2.356,51,2.746,52,1.921,57,0.253,64,0.178,65,0.268,83,0.007,84,0.007,93,1.091,113,3.144,115,2.708,121,3.376,154,1.18,171,1.15,237,1.761,259,1.344,362,1.211,561,2.661,562,2.871,582,2.708,589,2.957,634,3.457,668,3.144,743,4.502,933,3.672,937,3.585,952,3.683,954,3.529,959,4.424,962,3.683,986,3.104,987,5.8,988,3.705,989,6.145,990,4,991,4.396,992,4.396,1002,4.396,1003,4.396,1006,5.371,1010,4.396,1011,4.396,1012,3.705,1013,4,1014,4.396,1015,4.396,1016,3.469,1340,4.997,1341,4.997]],["title/classes/FilesDto.html",[65,0.16,668,2.091]],["body/classes/FilesDto.html",[3,0.141,4,0.128,5,0.103,8,0.433,9,1.453,19,0.519,36,0.01,37,1.41,38,0.601,40,2.527,57,0.272,64,0.182,65,0.272,83,0.007,84,0.007,93,0.984,154,1.218,155,1.818,156,1.926,159,1.584,160,1.672,171,1.895,237,1.818,238,3.379,259,1.387,534,3.391,538,4.827,561,3.006,562,3.079,576,3.205,634,3.313,668,3.21,933,3.385,935,4.196,937,3.313,946,5.323,947,3.379,952,2.918,953,4.539,954,2.796,959,3.604,960,5.85,961,5.85,962,2.918,963,5.85,1342,5.16]],["title/classes/FilesDto-1.html",[56,1.744,65,0.133,668,1.744]],["body/classes/FilesDto-1.html",[3,0.123,4,0.112,5,0.09,8,0.379,9,1.33,19,0.454,36,0.01,37,1.167,38,0.667,40,2.564,51,2.567,57,0.258,64,0.166,65,0.254,83,0.007,84,0.007,89,1.462,93,1.117,121,2.103,154,1.066,155,1.59,156,1.685,159,1.385,160,1.462,169,2.803,171,1.922,237,1.59,259,1.213,362,1.475,534,2.567,561,3.241,562,3.212,634,2.741,668,2.939,732,3.778,735,4.873,738,3.346,739,3.346,741,4.513,743,2.552,783,3.613,796,2.803,828,5.902,933,3.638,935,4.229,937,3.712,952,2.552,954,2.446,959,3.996,962,2.552,964,4.873,965,3.346,966,3.97,975,3.613,978,3.97,979,3.97,980,3.97,981,3.97,982,3.97,983,5.355,984,3.97,985,3.97,1343,4.513]],["title/classes/ForgetPasswordDto.html",[65,0.16,274,2.562]],["body/classes/ForgetPasswordDto.html",[3,0.13,4,0.118,5,0.094,8,0.399,9,1.376,19,0.477,36,0.01,38,0.429,55,2.489,57,0.263,64,0.172,65,0.289,83,0.007,84,0.007,93,1.076,94,1.277,154,1.121,155,1.673,156,1.772,159,1.457,160,1.538,171,1.852,237,1.673,259,1.277,270,2.809,274,4.18,276,3.78,285,3.726,291,3.726,362,1.526,413,3.154,416,3.413,427,3.917,439,3.109,561,3.355,562,3.189,925,4.371,926,3.295,927,3.801,928,3.52,930,2.949,931,3.52,933,3.576,934,4.371,935,4.113,936,4.668,937,3.624,938,5.238,939,3.52,940,3.52,941,3.52,942,2.685,943,3.52,944,3.52,945,3.52,1344,4.747]],["title/injectables/GoogleStrategy.html",[0,0.808,375,3.006]],["body/injectables/GoogleStrategy.html",[0,1.241,2,1.984,3,0.141,4,0.128,5,0.103,8,0.433,13,1.654,18,1.878,19,0.668,33,1.53,35,1.283,36,0.01,37,1.275,38,0.467,39,0.989,44,1.25,57,0.272,58,0.69,64,0.141,65,0.191,71,1.611,83,0.007,84,0.007,93,1.101,210,3.825,265,4.818,303,3.825,323,3.103,375,4.616,379,4.131,382,3.053,413,3.331,711,4.131,712,4.131,713,4.131,1082,2.804,1084,5.266,1085,3.825,1105,3.379,1345,4.539,1346,5.85,1347,6.472,1348,5.16,1349,5.16,1350,7.357,1351,7.357,1352,7.77,1353,5.16,1354,6.649,1355,4.539,1356,4.131,1357,4.539,1358,4.539,1359,5.16,1360,5.16,1361,5.16,1362,5.16,1363,5.16,1364,5.16,1365,5.16,1366,5.16,1367,5.16,1368,5.16,1369,5.16,1370,5.16]],["title/classes/HttpExceptionFilter.html",[65,0.16,1371,3.21]],["body/classes/HttpExceptionFilter.html",[3,0.096,4,0.088,5,0.07,8,0.297,9,1.12,10,2.377,13,1.275,15,2.669,18,0.902,19,0.707,35,1.647,36,0.01,37,1.27,38,0.636,39,1.27,44,1.463,45,2.9,52,1.358,53,1.539,57,0.257,58,0.472,61,1.49,64,0.096,65,0.189,71,1.915,73,1.662,83,0.006,84,0.006,160,1.145,165,1.647,168,2.253,170,2.146,171,0.813,225,2.39,237,1.245,259,0.95,329,5.859,341,1.839,343,2.39,344,1.358,360,2.09,367,1.646,454,2.392,455,1.708,521,1.998,582,1.915,714,3.142,831,2.452,832,2.452,833,2.452,834,2.314,835,2.452,836,2.452,837,2.452,942,2.9,1098,3.749,1101,3.185,1102,4.114,1104,2.314,1107,2.09,1134,2.09,1135,2.195,1136,2.195,1138,2.195,1139,2.314,1325,2.619,1371,3.802,1372,5.872,1373,5.128,1374,3.953,1375,3.108,1376,3.533,1377,3.533,1378,4.511,1379,5.571,1380,3.533,1381,5.31,1382,4.91,1383,3.533,1384,2.452,1385,4.19,1386,3.533,1387,3.953,1388,3.56,1389,3.572,1390,2.828,1391,2.828,1392,2.619,1393,3.108,1394,3.108,1395,2.452,1396,3.108,1397,3.108,1398,3.108,1399,3.108,1400,3.108,1401,3.108,1402,3.108,1403,4.19,1404,3.108,1405,3.108,1406,3.108,1407,3.108,1408,3.108,1409,3.108,1410,4.511,1411,3.108,1412,3.108,1413,3.108,1414,3.108,1415,3.108,1416,3.108,1417,3.108,1418,3.108,1419,3.108,1420,3.108,1421,3.108,1422,5.31,1423,3.108,1424,3.108,1425,2.619,1426,2.619,1427,2.619,1428,2.619,1429,5.31,1430,2.619,1431,2.619,1432,2.619,1433,3.108,1434,2.619,1435,3.108,1436,3.108,1437,3.108]],["title/modules/I18nConfigModule.html",[152,1.105,191,3.006]],["body/modules/I18nConfigModule.html",[3,0.155,4,0.14,5,0.113,36,0.01,57,0.281,58,0.757,64,0.155,65,0.209,73,2.286,83,0.008,84,0.008,123,1.27,135,3.518,152,1.8,159,1.739,160,2.286,163,4.174,179,2.315,191,4.897,203,2.639,393,4.199,517,4.199,1106,3.352,1114,4.344,1177,7.073,1178,4.534,1188,4.983,1196,4.983,1438,5.664,1439,5.664,1440,7.054,1441,7.054,1442,5.664,1443,7.054,1444,5.664,1445,5.664,1446,5.664,1447,5.664,1448,4.983,1449,4.983,1450,5.664,1451,5.664,1452,5.664,1453,5.664,1454,5.664,1455,4.534,1456,5.664,1457,5.664]],["title/classes/IRequest.html",[65,0.16,1117,2.835]],["body/classes/IRequest.html",[0,1.121,3,0.121,4,0.11,5,0.088,10,1.433,15,2.301,24,4.541,36,0.01,55,2.115,57,0.267,58,0.591,64,0.2,65,0.27,71,1.988,73,1.433,83,0.007,84,0.007,93,0.977,123,0.991,151,2.209,154,1.044,162,1.493,165,1.099,167,2.874,168,2.544,170,2.369,171,1.568,174,1.7,225,2.06,231,2.614,259,1.189,341,2.301,342,3.69,343,3.407,344,1.7,362,1.071,363,2.898,454,2.378,455,1.999,539,2.614,567,3.007,714,2.301,1064,2.134,1082,2.531,1096,2.746,1097,3.069,1098,3.728,1101,2.746,1102,3.728,1104,2.895,1105,3.931,1106,2.616,1107,2.616,1108,4.167,1109,4.233,1110,3.277,1111,2.895,1112,3.277,1113,3.277,1114,3.394,1115,4.167,1116,3.069,1117,4.463,1118,4.45,1119,3.069,1120,3.277,1121,3.277,1122,3.069,1123,3.277,1124,3.277,1125,3.277,1126,3.277,1127,3.277,1128,3.277,1129,3.277,1130,3.277,1131,3.277,1132,3.277,1133,3.277,1134,2.616,1135,2.746,1136,2.746,1137,3.277,1138,2.746,1139,2.895,1140,3.069,1141,3.277,1142,3.069,1143,3.277,1144,3.277,1145,2.746,1146,3.277,1147,3.277]],["title/classes/IResponseData.html",[65,0.16,1111,2.835]],["body/classes/IResponseData.html",[0,1.013,3,0.104,4,0.095,5,0.076,8,0.321,9,1.186,10,1.239,15,1.99,19,0.81,24,4.679,36,0.01,38,0.716,39,1.316,52,2.788,53,3.159,55,2.419,57,0.254,58,0.511,64,0.187,65,0.254,71,1.919,73,1.239,83,0.006,84,0.006,93,1.058,123,1.217,151,2.044,154,0.903,162,1.35,165,0.951,167,3.058,168,2.707,170,2.511,171,1.669,174,1.47,225,1.781,231,2.991,259,1.028,341,1.99,342,3.501,343,3.2,344,1.47,362,0.926,363,3.046,454,2.15,455,1.808,539,2.364,567,3.44,714,1.99,1064,1.846,1082,1.612,1096,2.375,1097,2.654,1098,3.371,1101,2.375,1102,3.371,1104,2.503,1105,3.553,1106,2.262,1107,2.262,1108,3.767,1109,3.919,1110,2.834,1111,3.553,1112,4.023,1113,4.023,1114,3.883,1115,4.766,1116,3.767,1117,3.553,1118,2.834,1119,2.654,1120,2.834,1121,2.834,1122,2.654,1123,2.834,1124,2.834,1125,2.834,1126,2.834,1127,2.834,1128,2.834,1129,2.834,1130,2.834,1131,2.834,1132,2.834,1133,2.834,1134,2.262,1135,2.375,1136,2.375,1137,2.834,1138,2.375,1139,2.503,1140,2.654,1141,2.834,1142,2.654,1143,2.834,1144,2.834,1145,2.375,1146,2.834,1147,2.834,1458,3.823,1459,3.823,1460,3.823,1461,3.823,1462,3.823,1463,3.823,1464,3.823,1465,3.823,1466,3.823]],["title/classes/ImagePicDto.html",[65,0.16,1095,2.835]],["body/classes/ImagePicDto.html",[3,0.107,4,0.097,5,0.078,8,0.33,9,1.209,19,0.395,22,2.492,31,2.193,33,1.865,36,0.01,37,1.061,38,0.501,40,2.488,55,1.385,57,0.266,59,1.606,60,1.658,64,0.175,65,0.257,83,0.006,84,0.006,93,1.066,123,1.241,154,0.928,155,1.385,156,1.467,159,1.206,160,1.274,171,1.945,237,1.385,259,1.057,276,2.672,362,0.953,401,3.841,413,2.772,416,2.999,427,2.881,459,2.728,460,2.728,462,2.728,481,2.728,489,4.113,561,3.106,562,3.095,634,2.884,930,2.441,933,3.578,935,4.263,937,3.65,952,2.223,954,2.13,959,2.999,962,2.223,1016,2.728,1037,2.223,1038,4.103,1039,2.728,1041,3.147,1042,3.147,1044,3.147,1048,3.147,1053,3.147,1058,3.147,1060,3.147,1061,2.914,1062,3.147,1063,3.147,1064,1.898,1065,2.728,1066,2.728,1067,4.43,1068,3.147,1069,3.147,1070,3.147,1071,3.147,1072,3.147,1073,3.147,1074,3.147,1075,3.147,1076,3.147,1077,2.914,1078,3.147,1079,3.147,1080,3.147,1081,2.326,1082,1.658,1083,2.914,1084,2.574,1085,2.914,1086,3.147,1087,3.147,1088,3.147,1089,4.103,1090,3.147,1091,2.914,1092,3.147,1093,4.103,1094,3.147,1095,3.624,1467,3.93]],["title/interfaces/IsAuthorizedParams.html",[47,3.21,61,1.826]],["body/interfaces/IsAuthorizedParams.html",[0,1.216,1,3.705,3,0.136,4,0.124,5,0.099,6,4,7,4,8,0.42,9,1.423,10,2.348,11,4.396,12,6.753,14,4.396,15,2.601,17,4.396,18,1.275,21,4.396,22,3.838,24,3.104,25,4.396,26,4,27,6.374,28,4.396,29,5.729,30,4,31,3.042,32,5.729,33,1.15,34,4.396,36,0.01,38,0.589,41,4.521,42,4.396,43,4.396,47,5.371,56,2.413,57,0.228,58,0.668,59,2.042,60,2.107,61,2.107,62,7.004,63,7.004,64,0.136,65,0.185,66,4.396,67,4.396,68,4.396,69,4.396,70,2.601,71,1.86,72,5.213,73,1.619,74,4.396,75,4.396,76,5.729,77,4.396,78,4.396,79,4.396,80,5.729,81,4.396,82,3.144,83,0.007,84,0.007,228,3.104]],["title/injectables/JwtStrategy.html",[0,0.808,376,3.006]],["body/injectables/JwtStrategy.html",[0,1.319,2,2.183,3,0.155,4,0.141,5,0.113,8,0.477,13,1.757,18,1.963,19,0.71,22,2.557,35,1.412,36,0.01,37,1.088,38,0.514,39,1.088,44,1.376,57,0.269,58,0.759,64,0.155,65,0.21,83,0.008,84,0.008,89,1.84,165,1.412,303,4.209,323,3.243,362,1.376,367,2.646,376,4.904,379,4.545,388,5.036,432,4.545,1082,2.979,1346,6.215,1347,6.215,1355,4.995,1356,4.545,1358,4.995,1468,4.995,1469,6.766,1470,5.678,1471,7.064,1472,5.678,1473,5.678,1474,5.678,1475,5.678,1476,5.678,1477,5.678,1478,5.678,1479,5.678]],["title/injectables/LanguageMiddleware.html",[0,0.808,211,3.21]],["body/injectables/LanguageMiddleware.html",[0,1.298,2,2.127,3,0.151,4,0.137,5,0.11,8,0.464,13,1.729,18,1.412,19,0.699,35,1.729,36,0.01,37,1.333,38,0.629,39,1.333,44,1.341,45,3.129,57,0.266,58,0.74,64,0.151,65,0.204,71,1.341,83,0.008,84,0.008,93,0.74,158,4.544,159,1.698,160,1.793,162,1.376,163,4.113,174,2.127,211,5.153,225,2.578,283,3.623,342,3.849,343,3.715,344,2.127,478,4.977,517,5.153,520,5.564,521,4.509,522,6.382,524,5.564,1480,4.867,1481,5.532,1482,5.532,1483,5.532,1484,5.532,1485,5.532]],["title/entities/Lesson.html",[85,1.716,113,2.091]],["body/entities/Lesson.html",[3,0.089,4,0.081,5,0.065,8,0.273,9,1.054,19,0.835,36,0.01,38,0.791,39,1.509,40,1.766,51,2.035,52,1.855,55,1.7,57,0.249,64,0.132,65,0.213,83,0.005,84,0.005,85,1.912,87,1.693,89,1.864,92,2.855,93,1.081,94,2.234,95,3.254,97,4.726,105,2.33,106,0.852,107,2.855,108,2.998,110,3.35,111,2.855,112,1.214,113,2.778,115,3.685,119,3.801,120,1.839,121,2.681,122,4.732,123,1.863,129,3.994,130,4.028,131,3.994,237,1.146,362,1.835,539,2.506,542,2.411,545,2.258,547,4.719,555,2.258,560,3.35,562,1.912,563,2.02,567,3.568,582,2.615,732,3.668,736,5.062,742,4.452,743,3.254,744,2.604,749,4.168,768,4.606,769,2.861,770,4.245,771,4.245,772,4.245,781,2.861,990,4.606,1006,5.041,1214,2.861,1215,4.245,1227,2.861,1231,2.861,1232,2.861,1486,2.604,1487,5.062,1488,5.062,1489,4.826,1490,3.252,1491,3.252,1492,3.252,1493,3.252,1494,3.252,1495,3.252,1496,3.252,1497,4.826,1498,3.252,1499,3.252,1500,3.252,1501,3.252,1502,3.252,1503,3.252,1504,3.252,1505,3.252,1506,3.252,1507,4.245,1508,4.245,1509,4.245]],["title/controllers/LessonsController.html",[144,1.442,1510,3.21]],["body/controllers/LessonsController.html",[3,0.075,4,0.068,5,0.054,8,0.23,13,1.054,19,0.67,31,1.085,33,0.63,35,1.658,36,0.01,37,1.528,38,0.754,39,1.278,40,2.262,44,1.616,52,1.053,53,1.193,55,2.809,56,2.815,57,0.263,58,0.366,59,1.119,60,1.155,64,0.075,65,0.101,70,1.426,71,1.027,73,1.373,83,0.005,84,0.005,89,1.889,93,1.121,94,1.869,106,0.717,144,0.912,146,0.938,148,1.322,153,1.372,154,0.647,162,0.681,165,1.658,170,1.373,174,1.053,227,3.618,246,4.456,253,4.318,255,5.001,263,1.731,295,2.396,296,2.396,297,1.549,300,1.233,302,1.372,306,2.031,321,1.322,344,1.053,348,1.276,362,1.74,488,2.296,570,2.205,571,2.507,572,2.296,573,2.396,577,3.892,578,3.45,579,3.596,581,2.193,582,2.296,583,2.122,584,2.631,589,4.249,596,1.549,599,1.701,607,1.701,608,1.549,609,3.596,610,3.596,612,3.392,613,2.409,617,1.426,618,3.141,619,1.901,620,3.45,621,4.376,622,3.596,623,1.793,624,3.218,627,3.065,628,3.065,629,3.596,631,2.941,632,2.941,634,2.625,641,2.031,644,2.774,645,1.793,740,2.031,742,3.818,743,3.297,797,2.409,802,3.391,803,4.322,804,4.322,811,2.409,821,2.031,822,3.841,838,2.031,839,2.031,840,2.031,841,2.031,986,4.318,989,4.667,1242,4.322,1272,2.409,1392,3.141,1510,3.141,1511,2.409,1512,5.18,1513,2.409,1514,2.739,1515,2.739,1516,2.409,1517,2.739,1518,2.739,1519,2.409,1520,6.318,1521,4.236,1522,2.739,1523,3.727,1524,2.739,1525,2.739,1526,2.739,1527,2.739,1528,4.985,1529,2.739,1530,2.739,1531,2.739,1532,3.392,1533,2.409,1534,3.391,1535,2.739,1536,2.739,1537,4.236,1538,2.739,1539,2.739,1540,5.83,1541,3.391,1542,2.739,1543,2.739,1544,4.236,1545,2.739,1546,2.739,1547,2.739,1548,2.193,1549,2.739,1550,2.739]],["title/modules/LessonsModule.html",[152,1.105,192,3.006]],["body/modules/LessonsModule.html",[3,0.155,4,0.141,5,0.113,36,0.01,57,0.299,58,0.761,64,0.155,65,0.21,83,0.008,84,0.008,113,2.748,119,3.416,146,2.423,152,1.965,176,3.353,179,2.326,180,2.479,181,2.652,182,2.652,183,2.479,184,2.652,192,5.861,199,3.297,200,2.563,201,2.563,203,2.652,383,3.219,384,2.326,732,3.297,1012,4.22,1286,4.22,1510,5.708,1532,5.529,1533,5.007,1551,5.007,1552,5.007,1553,5.691,1554,5.691,1555,5.007,1556,5.691]],["title/injectables/LessonsService.html",[0,0.808,1532,2.835]],["body/injectables/LessonsService.html",[0,0.671,2,0.855,3,0.061,4,0.055,5,0.044,8,0.187,10,1.975,13,0.893,18,0.917,19,0.645,30,1.78,35,1.595,36,0.01,37,1.229,38,0.58,39,1.229,44,1.477,56,1.734,57,0.248,58,0.297,64,0.061,65,0.082,71,1.906,83,0.004,84,0.004,89,1.846,93,1.117,106,0.583,112,0.83,113,3.862,119,1.074,123,0.499,151,2.078,162,0.893,165,1.892,166,3.76,168,2.907,169,3.539,170,1.846,171,1.792,227,3.338,231,2.261,244,1.456,246,3.949,263,1.468,300,1.001,323,3.346,352,3.299,367,2.655,384,0.909,406,4.003,441,1.316,445,3.052,454,2.415,455,2.458,457,3.605,493,3.399,494,3.848,508,4.23,539,1.565,570,1.87,571,2.126,572,1.947,573,2.556,577,3.302,583,3.052,584,1.381,596,2.032,599,2.232,617,1.157,668,3.096,675,1.456,688,1.544,732,3.11,740,4.948,742,4.199,743,2.032,869,2.935,871,3.619,877,4.155,882,1.649,884,1.544,885,1.78,906,3.138,909,1.78,919,1.649,922,1.649,986,3.785,1012,1.649,1242,4.518,1286,1.649,1315,1.956,1320,1.78,1487,3.16,1488,3.976,1513,3.16,1516,3.16,1519,3.16,1520,5.012,1523,3.976,1528,4.633,1532,2.353,1534,2.876,1555,1.956,1557,1.956,1558,3.592,1559,2.223,1560,4.52,1561,6.412,1562,3.976,1563,2.223,1564,3.16,1565,6.093,1566,2.223,1567,2.223,1568,2.223,1569,3.592,1570,2.223,1571,2.223,1572,2.223,1573,1.956,1574,1.956,1575,2.223,1576,2.223,1577,2.223,1578,2.223,1579,2.223,1580,2.223,1581,2.223,1582,3.592,1583,3.592,1584,2.223,1585,3.592,1586,2.223,1587,7.377,1588,3.592,1589,4.52,1590,4.52,1591,3.592,1592,2.223,1593,3.592,1594,3.592,1595,3.592,1596,3.592,1597,2.223,1598,2.223,1599,2.223,1600,3.16,1601,3.592,1602,3.592,1603,3.592,1604,3.592,1605,3.592,1606,2.223,1607,2.223,1608,2.223,1609,2.223]],["title/classes/Logger.html",[65,0.16,1179,3.21]],["body/classes/Logger.html",[3,0.209,4,0.11,5,0.12,8,0.373,9,1.316,15,2.314,19,0.447,36,0.01,52,1.709,53,1.936,57,0.239,64,0.121,65,0.164,73,2.559,83,0.007,84,0.007,123,1.888,259,1.195,362,1.46,455,2.007,954,4.513,1179,5.678,1610,3.911,1611,6.013,1612,6.025,1613,7.896,1614,7.896,1615,8.215,1616,6.835,1617,7.327,1618,6.446,1619,7.327,1620,6.025,1621,7.327,1622,7.327,1623,7.327,1624,7.327,1625,7.327,1626,6.025,1627,6.025,1628,7.327,1629,7.327,1630,6.025,1631,6.025,1632,6.025,1633,6.025,1634,6.025,1635,6.025,1636,6.025,1637,6.025,1638,6.025,1639,6.025,1640,6.025,1641,6.025,1642,6.025,1643,6.025,1644,6.025,1645,4.445,1646,6.013,1647,3.911,1648,3.911,1649,4.445,1650,3.559]],["title/modules/MailModule.html",[152,1.105,193,2.835]],["body/modules/MailModule.html",[3,0.141,4,0.129,5,0.103,33,1.193,36,0.01,57,0.288,58,0.693,64,0.141,65,0.191,73,2.389,83,0.007,84,0.007,123,1.162,135,3.219,152,1.882,159,2.047,176,3.211,179,2.118,180,2.257,181,2.415,182,2.415,183,2.257,184,3.435,193,5.49,199,3.107,200,2.334,201,2.334,203,2.415,258,3.219,362,1.256,382,3.066,408,5.737,714,2.698,715,4.149,1114,2.931,1651,4.559,1652,4.559,1653,4.559,1654,5.182,1655,5.182,1656,5.182,1657,4.149,1658,6.668,1659,5.182,1660,4.559,1661,5.182,1662,5.182,1663,5.182,1664,5.182,1665,5.182,1666,5.182,1667,5.182,1668,5.182,1669,5.182,1670,4.559,1671,4.559,1672,5.182,1673,5.182,1674,5.182,1675,5.182,1676,5.182,1677,5.182]],["title/injectables/MailService.html",[0,0.808,408,2.835]],["body/injectables/MailService.html",[0,1.3,2,2.132,3,0.151,4,0.138,5,0.11,8,0.466,13,1.731,18,1.415,19,0.7,35,1.731,36,0.01,37,1.608,38,0.63,39,1.334,44,1.344,57,0.243,58,0.741,64,0.151,65,0.205,83,0.008,84,0.008,93,1.161,159,1.702,162,1.379,174,2.132,276,3.361,323,3.209,335,4.439,352,2.584,408,4.558,413,3.487,439,5.225,1657,4.439,1670,4.878,1678,4.878,1679,6.961,1680,5.545,1681,8.388,1682,5.545,1683,6.961,1684,5.545,1685,5.545,1686,4.878,1687,6.961]],["title/classes/OTPDto.html",[65,0.16,291,2.562]],["body/classes/OTPDto.html",[3,0.129,4,0.117,5,0.094,8,0.395,9,1.368,19,0.473,36,0.01,38,0.426,55,2.48,57,0.262,64,0.171,65,0.289,83,0.007,84,0.007,93,1.044,94,1.266,154,1.112,155,1.659,156,1.758,159,1.446,160,1.526,171,1.886,237,1.659,259,1.266,270,2.787,274,3.706,276,3.77,285,3.706,291,4.164,362,1.818,413,2.359,416,2.553,427,3.26,439,4.608,561,3.349,562,3.182,925,4.348,926,3.269,928,3.492,930,2.926,931,3.492,933,3.569,934,4.348,935,4.105,936,4.644,937,3.616,938,5.217,939,3.492,940,4.644,941,4.644,942,3.542,943,3.492,944,4.644,945,3.492,1688,4.71,1689,4.71]],["title/injectables/PaginateHelper.html",[0,0.808,869,2.449]],["body/injectables/PaginateHelper.html",[0,1.073,2,1.596,3,0.113,4,0.103,5,0.082,8,0.348,9,1.256,10,2.569,13,1.43,18,1.059,19,0.813,35,1.77,36,0.01,37,1.365,38,0.699,39,1.365,44,1.812,45,3.251,52,2.21,53,2.504,55,2.927,56,3.184,57,0.27,58,0.555,64,0.113,65,0.153,71,1.006,73,1.345,83,0.006,84,0.006,112,2.146,159,1.274,162,1.032,165,1.64,233,5.699,238,2.718,253,4.803,255,4.803,283,3.764,323,2.781,336,3.401,341,2.16,342,3.609,344,1.596,445,2.079,454,1.645,455,1.383,488,3.574,612,2.718,869,3.251,1105,3.764,1106,2.456,1119,2.881,1122,2.881,1562,3.651,1690,3.651,1691,7.118,1692,7.118,1693,5.057,1694,5.748,1695,5.748,1696,4.15,1697,5.748,1698,4.15,1699,4.15,1700,5.748,1701,4.15,1702,5.748,1703,4.15,1704,5.748,1705,4.15,1706,4.15,1707,5.057,1708,4.15,1709,4.15,1710,4.15,1711,4.15,1712,7.118,1713,4.15,1714,7.118,1715,4.15,1716,4.15,1717,4.15,1718,4.15]],["title/controllers/ProfileController.html",[144,1.442,1719,3.006]],["body/controllers/ProfileController.html",[3,0.09,4,0.082,5,0.066,8,0.277,13,1.214,19,0.584,22,2.887,31,1.309,33,1.818,35,1.214,36,0.01,37,1.373,38,0.648,39,0.936,40,1.782,44,1.407,45,1.867,55,2.045,56,2.356,57,0.276,58,0.441,59,2.372,60,1.393,64,0.133,65,0.18,70,1.719,73,1.881,83,0.005,84,0.005,89,2.078,93,0.857,94,1.724,106,0.865,115,1.79,123,0.74,144,1.1,146,1.131,148,1.594,153,1.654,154,0.78,162,1.214,165,1.892,170,1.07,174,1.876,227,2.54,246,1.954,253,3.031,255,3.983,295,2.76,296,3.283,297,1.867,300,1.487,302,1.654,306,2.448,321,1.594,344,1.27,348,3.453,360,1.954,362,1.183,455,1.1,488,1.79,489,1.954,521,2.76,538,2.051,570,1.719,573,2.76,577,3.475,578,2.888,589,3.435,594,2.644,607,2.051,608,1.867,609,3.388,610,3.388,612,3.196,617,1.719,619,2.292,620,4.501,621,4.451,622,3.388,623,2.162,624,3.031,627,4.384,628,4.048,631,2.292,632,2.292,634,1.487,638,2.644,641,2.448,644,2.162,645,2.162,803,2.448,804,2.448,820,2.448,821,2.448,822,4.304,831,3.388,832,3.388,833,3.388,834,3.196,835,3.388,836,3.388,837,3.388,838,2.448,839,2.448,840,2.448,841,2.448,867,4.048,1037,3.283,1081,3.794,1084,3.196,1548,2.644,1719,3.388,1720,2.644,1721,5.641,1722,4.293,1723,4.293,1724,3.302,1725,5.107,1726,3.302,1727,3.302,1728,3.302,1729,3.302,1730,3.302,1731,3.302,1732,4.852,1733,3.302,1734,3.302,1735,3.302,1736,3.302,1737,2.644,1738,3.618,1739,5.107,1740,2.905,1741,2.905,1742,2.292,1743,2.905,1744,2.905,1745,2.905,1746,2.905,1747,2.905,1748,2.905,1749,2.905,1750,2.905,1751,2.905,1752,2.905,1753,2.905,1754,2.905,1755,4.293,1756,4.293,1757,2.905,1758,2.905,1759,2.905,1760,2.905,1761,2.905,1762,2.905,1763,2.905,1764,2.905,1765,2.905]],["title/classes/ProfileDto.html",[65,0.16,1081,2.562]],["body/classes/ProfileDto.html",[3,0.099,4,0.09,5,0.072,8,0.304,9,1.141,19,0.616,22,2.352,31,2.07,33,1.858,36,0.01,37,1.001,38,0.643,39,1.001,40,2.535,55,1.277,57,0.259,59,1.481,60,1.529,64,0.167,65,0.248,82,2.957,83,0.006,84,0.006,93,1.093,94,1.647,123,1.171,154,0.856,155,1.277,156,1.353,159,1.113,160,1.175,171,1.918,237,1.277,259,0.975,276,2.522,362,0.878,401,3.626,413,2.617,416,2.831,427,2.719,459,2.516,460,2.516,462,2.516,481,2.516,489,3.965,561,3.024,562,3.022,634,2.758,930,2.252,933,3.516,935,4.208,937,3.581,948,4.01,952,2.954,954,2.831,955,2.902,959,2.831,962,2.05,1016,2.516,1037,2.05,1038,4.969,1039,2.516,1041,2.902,1042,2.902,1044,2.902,1045,4.595,1048,2.902,1053,2.902,1058,2.902,1060,2.902,1061,2.687,1062,2.902,1063,2.902,1064,1.75,1065,2.516,1066,2.516,1067,4.182,1068,2.902,1069,2.902,1070,2.902,1071,2.902,1072,2.902,1073,2.902,1074,2.902,1075,2.902,1076,2.902,1077,2.687,1078,2.902,1079,2.902,1080,2.902,1081,3.091,1082,2.203,1083,3.873,1084,3.421,1085,3.873,1086,2.902,1087,4.182,1088,4.182,1089,5.267,1090,2.902,1091,3.873,1092,4.182,1093,5.267,1094,2.902,1095,2.374,1766,3.625,1767,3.625,1768,3.625]],["title/controllers/PrometheusController.html",[144,1.442,1769,3.21]],["body/controllers/PrometheusController.html",[3,0.158,4,0.144,5,0.115,8,0.487,13,1.781,19,0.583,35,1.443,36,0.01,37,1.112,38,0.648,39,1.112,44,1.406,57,0.272,58,0.776,64,0.158,65,0.214,71,1.406,83,0.008,84,0.008,94,1.56,144,1.933,146,1.988,148,2.802,162,1.443,174,2.231,323,3.275,343,3.779,344,2.231,352,2.704,478,5.085,1769,5.308,1770,5.105,1771,7.16,1772,6.299,1773,5.802,1774,5.802,1775,5.085,1776,5.105,1777,5.802,1778,5.802,1779,5.802,1780,5.802,1781,5.802,1782,5.802]],["title/modules/PrometheusModule.html",[152,1.105,194,3.006]],["body/modules/PrometheusModule.html",[3,0.157,4,0.143,5,0.114,36,0.01,57,0.283,58,0.77,64,0.157,65,0.213,83,0.008,84,0.008,123,1.598,146,2.442,152,1.976,176,3.372,179,2.354,180,2.509,181,2.684,182,2.684,183,2.509,184,2.684,194,5.958,199,3.322,200,2.594,201,2.594,203,2.684,393,4.271,1769,5.739,1775,5.545,1776,5.068,1783,5.068,1784,5.068,1785,5.76,1786,5.76,1787,5.76,1788,5.068,1789,4.611,1790,5.76,1791,5.76,1792,5.76]],["title/injectables/PrometheusService.html",[0,0.808,1775,2.835]],["body/injectables/PrometheusService.html",[0,1.331,2,2.215,3,0.157,4,0.143,5,0.114,8,0.484,9,1.557,10,2.508,13,1.773,18,1.976,19,0.778,36,0.01,38,0.521,44,1.396,57,0.249,58,0.77,64,0.157,65,0.213,73,1.867,83,0.008,84,0.008,159,1.768,162,1.925,165,1.433,336,4.218,1772,7.115,1775,4.668,1789,4.611,1793,5.068,1794,8.088,1795,7.128,1796,5.76,1797,7.74,1798,6.271,1799,5.068,1800,7.128,1801,5.76,1802,5.068,1803,5.76,1804,5.76]],["title/classes/QueryFailedFilter.html",[65,0.16,1805,3.466]],["body/classes/QueryFailedFilter.html",[3,0.14,4,0.127,5,0.102,8,0.43,9,1.447,13,1.647,15,3.447,18,1.308,19,0.737,35,1.647,36,0.01,37,1.269,38,0.663,39,1.269,44,1.242,45,2.899,57,0.281,58,0.685,64,0.14,65,0.189,71,1.777,83,0.007,84,0.007,112,1.914,168,1.914,171,1.18,225,3.085,259,1.378,329,6.349,341,2.669,343,3.085,344,1.971,454,2.906,455,1.708,539,2.884,714,3.818,1098,4.556,1101,4.113,1102,4.815,1104,3.357,1107,3.033,1134,3.033,1135,3.184,1136,3.184,1140,3.559,1142,3.559,1375,4.51,1390,4.104,1391,4.104,1395,3.559,1805,5.301,1806,6.819,1807,4.51,1808,5.126,1809,5.126,1810,5.126,1811,5.126,1812,5.126,1813,5.126,1814,5.126,1815,5.126,1816,5.126,1817,5.126]],["title/entities/Question.html",[85,1.716,91,2.562]],["body/entities/Question.html",[3,0.105,4,0.095,5,0.076,8,0.323,9,1.191,18,1.616,19,0.759,36,0.01,38,0.755,39,1.045,40,1.181,41,3.784,57,0.221,64,0.188,65,0.234,83,0.006,84,0.006,85,2.729,86,4.278,87,2.003,88,2.671,89,2.356,90,3.08,91,4.773,92,4.692,93,1.117,94,2.03,95,4.111,97,4.773,99,2.853,100,2.853,101,5.068,102,6.043,105,3.325,106,1.008,107,3.226,108,3.933,109,4.694,110,3.784,111,3.226,112,1.436,113,3.51,114,2.853,115,3.94,116,4.76,117,4.042,118,4.042,119,3.894,120,3.58,121,1.793,122,3.58,123,1.693,124,3.08,125,2.671,126,3.08,127,3.08,128,3.08,129,2.671,130,3.083,131,2.671,132,4.364,133,4.042,134,4.364,135,3.933,136,4.364,137,4.395,138,3.08,139,3.784,140,3.08,141,2.853,142,3.08,143,2.853,749,3.57,1818,3.848,1819,3.848,1820,3.385,1821,3.848,1822,3.848,1823,3.848,1824,3.848]],["title/entities/Quiz.html",[85,1.716,119,2.091]],["body/entities/Quiz.html",[3,0.104,4,0.095,5,0.076,8,0.321,9,1.186,18,1.61,19,0.779,36,0.01,38,0.747,39,1.04,40,1.936,41,2.654,57,0.221,64,0.187,65,0.233,83,0.006,84,0.006,85,2.721,86,3.919,87,1.99,88,2.654,89,2.35,90,3.06,91,4.832,92,4.584,93,1.115,94,2.083,95,4.101,97,4.765,100,2.834,101,4.344,102,5.805,105,3.315,106,1.002,107,3.733,108,3.919,109,4.677,110,3.767,111,3.733,112,1.427,113,3.889,114,2.834,115,3.419,116,4.131,117,4.023,118,4.023,119,3.637,120,3.568,121,2.94,122,3.568,123,1.689,124,4.344,125,4.379,126,4.344,127,3.06,128,3.06,129,4.379,130,3.883,131,4.379,132,3.06,133,2.834,134,3.06,135,2.375,136,3.06,137,2.654,138,3.06,139,3.767,140,3.06,141,2.834,142,3.06,143,2.834,744,3.06,749,2.503,1820,3.363,1825,3.823,1826,3.823,1827,3.823,1828,3.823,1829,3.823,1830,3.823,1831,3.823]],["title/controllers/QuizController.html",[144,1.442,1832,3.21]],["body/controllers/QuizController.html",[3,0.14,4,0.127,5,0.102,8,0.43,13,1.647,19,0.515,31,2.031,35,1.275,36,0.01,37,0.983,38,0.663,39,0.983,40,1.573,44,1.242,57,0.296,58,0.685,59,2.095,60,2.162,64,0.14,65,0.189,70,2.669,83,0.007,84,0.007,93,0.98,94,1.78,119,2.475,144,1.708,146,1.756,148,2.475,153,2.568,154,1.211,162,1.275,165,1.275,174,1.971,295,2.899,296,3.744,297,2.899,300,2.308,302,2.568,321,2.475,579,3.559,582,3.589,583,3.317,584,4.113,607,3.184,608,2.899,617,2.669,618,4.909,620,3.918,627,3.033,628,3.033,629,3.559,1017,5.55,1832,4.909,1833,4.51,1834,6.452,1835,4.51,1836,6.819,1837,5.126,1838,5.126,1839,4.803,1840,4.51,1841,5.301,1842,3.559,1843,5.126,1844,5.126,1845,5.126,1846,5.126,1847,5.126]],["title/modules/QuizModule.html",[152,1.105,195,3.006]],["body/modules/QuizModule.html",[3,0.156,4,0.142,5,0.114,36,0.01,57,0.296,58,0.765,64,0.156,65,0.211,83,0.008,84,0.008,86,4.408,91,4.199,113,3.426,119,2.761,146,2.431,152,1.969,176,3.361,179,2.337,180,2.491,181,2.665,182,2.665,183,2.491,184,2.665,195,5.868,199,3.307,200,2.575,201,2.575,203,2.665,383,3.234,384,2.337,1023,4.578,1832,5.72,1839,5.535,1840,5.031,1848,5.031,1849,5.031,1850,5.719,1851,5.719,1852,5.031,1853,5.719]],["title/injectables/QuizService.html",[0,0.808,1839,2.835]],["body/injectables/QuizService.html",[0,1.065,2,1.579,3,0.112,4,0.102,5,0.082,8,0.345,10,2.498,13,1.419,18,1.457,19,0.574,26,3.288,35,1.419,36,0.01,37,1.094,38,0.593,39,1.094,40,1.261,44,0.995,57,0.282,58,0.549,64,0.112,65,0.152,71,1.868,83,0.006,84,0.006,86,2.551,89,1.331,91,2.43,92,3.377,93,0.877,100,3.045,106,1.076,112,1.533,113,3.722,116,2.69,119,3.595,121,1.914,125,3.961,135,2.551,137,2.851,151,2.562,162,1.021,165,1.419,166,3.166,168,2.448,170,1.331,171,1.509,300,1.849,323,2.766,352,3.056,367,1.914,384,1.678,406,4.844,441,2.43,445,2.057,454,1.628,455,1.901,493,2.69,494,3.045,508,2.851,583,2.057,584,2.551,617,2.138,688,2.851,1017,4.877,1023,3.288,1025,3.613,1564,5.769,1573,3.613,1574,3.613,1600,3.613,1834,5.02,1835,5.02,1836,6.234,1839,3.737,1841,4.569,1842,2.851,1852,3.613,1854,3.613,1855,4.107,1856,6.558,1857,6.558,1858,4.107,1859,5.707,1860,4.107,1861,4.107,1862,4.107,1863,4.107,1864,4.107,1865,5.707,1866,5.707,1867,4.107,1868,4.107,1869,4.107,1870,4.107,1871,4.107,1872,5.707,1873,4.107,1874,5.707,1875,4.107]],["title/interfaces/Request.html",[61,1.826,342,2.091]],["body/interfaces/Request.html",[0,1.163,3,0.128,4,0.116,5,0.093,8,0.392,9,1.361,10,2.019,18,1.193,22,2.104,33,1.972,36,0.01,38,0.423,39,1.194,55,2.195,57,0.262,58,0.625,61,2.628,64,0.128,65,0.173,71,1.699,73,2.272,83,0.007,84,0.007,93,0.833,106,1.224,151,2.272,152,1.193,162,1.743,166,3.384,167,2.956,168,2.617,171,1.613,225,2.177,228,2.902,289,4.619,323,1.971,328,2.643,340,5.986,342,3.61,343,2.903,344,2.396,349,3.244,352,2.177,360,4.148,362,1.699,364,5.612,365,5.612,381,3.06,388,4.08,407,5.197,445,2.341,454,1.852,455,1.557,478,3.06,516,3.741,520,3.741,521,3.524,522,4.988,524,4.988,525,5.481,526,4.111,527,6.167,528,4.111,529,4.111,530,3.741,531,4.111,532,4.111,533,4.111]],["title/classes/ResetPasswordDto.html",[65,0.16,285,2.562]],["body/classes/ResetPasswordDto.html",[3,0.127,4,0.115,5,0.092,8,0.39,9,1.356,19,0.624,36,0.01,38,0.561,55,2.187,57,0.261,64,0.169,65,0.287,83,0.007,84,0.007,93,1.092,94,1.669,154,1.097,155,1.637,156,1.734,159,1.426,160,1.505,171,1.84,237,1.637,259,1.249,270,2.749,274,3.672,276,4.057,285,4.135,291,3.672,362,1.504,413,2.327,416,2.518,427,3.231,439,3.042,561,3.337,562,3.169,925,4.851,926,3.225,927,4.968,928,4.601,930,2.885,931,3.444,933,3.557,934,4.308,935,4.091,936,4.601,937,3.601,938,5.182,939,3.444,940,3.444,941,3.444,942,2.627,943,3.444,944,3.444,945,5.182,1876,4.645,1877,4.645]],["title/classes/ResponseDto.html",[65,0.16,1109,2.69]],["body/classes/ResponseDto.html",[3,0.118,4,0.107,5,0.086,8,0.364,9,1.293,19,0.833,24,4.189,36,0.01,38,0.749,39,1.502,51,2.497,57,0.254,58,0.579,64,0.118,65,0.249,83,0.007,84,0.007,93,1.12,94,2.227,123,1.831,154,1.023,162,1.472,167,2.844,168,2.517,170,2.186,171,1.552,231,2.938,237,1.526,259,1.165,362,1.899,561,2.756,562,2.672,563,2.691,567,3.378,582,3.208,589,4.9,933,3.649,934,4.682,959,3.929,1107,3.991,1109,3.677,1114,3.814,1115,4.682,1541,4.739,1878,3.811,1879,8.165,1880,4.332,1881,4.332,1882,4.332,1883,4.332,1884,4.332,1885,5.92,1886,4.332,1887,4.332,1888,4.332,1889,4.332,1890,4.332,1891,4.332,1892,4.332,1893,4.332,1894,4.332,1895,5.92]],["title/injectables/ResponseService.html",[0,0.808,151,1.403]],["body/injectables/ResponseService.html",[0,1.078,2,1.607,3,0.114,4,0.104,5,0.083,8,0.351,10,1.354,13,1.437,15,3.446,18,1.067,19,0.581,24,4.435,35,1.437,36,0.01,37,1.107,38,0.522,39,1.107,44,1.013,55,2.035,57,0.262,58,0.559,64,0.195,65,0.264,71,1.962,73,1.354,83,0.006,84,0.006,93,0.955,123,0.937,151,2.314,154,0.987,162,1.437,165,1.039,167,2.791,168,2.471,170,2.314,171,1.523,174,1.607,225,1.948,231,2.516,341,2.176,342,3.909,343,3.611,344,1.607,362,1.013,363,2.789,454,2.289,455,1.924,539,2.516,567,2.893,714,2.176,1064,2.018,1082,1.763,1096,2.596,1097,2.901,1098,3.588,1101,2.596,1102,3.588,1104,2.737,1105,3.782,1106,2.473,1107,2.473,1108,4.01,1109,4.435,1110,3.099,1111,2.737,1112,3.099,1113,3.099,1114,3.267,1115,4.01,1116,2.901,1117,4.676,1118,3.099,1119,2.901,1120,3.099,1121,3.099,1122,2.901,1123,4.282,1124,3.099,1125,3.099,1126,3.099,1127,3.099,1128,3.099,1129,3.099,1130,3.099,1131,3.099,1132,3.099,1133,3.099,1134,2.473,1135,2.596,1136,2.596,1137,3.099,1138,2.596,1139,2.737,1140,2.901,1141,4.282,1142,2.901,1143,3.099,1144,3.099,1145,2.596,1146,3.099,1147,3.099,1896,4.179,1897,4.179,1898,4.179]],["title/modules/SharedModule.html",[152,1.105,196,3.006]],["body/modules/SharedModule.html",[3,0.136,4,0.123,5,0.099,36,0.01,57,0.29,58,0.664,64,0.136,65,0.183,83,0.007,84,0.007,106,1.301,146,1.701,151,2.822,152,1.844,176,3.146,179,2.029,180,2.163,181,2.314,182,2.314,183,2.163,184,3.366,196,6.128,199,3.022,200,2.236,201,2.236,203,3.022,210,3.682,212,3.447,328,4.924,341,2.585,393,4.808,869,4.924,884,3.447,1096,3.084,1172,5.656,1899,4.369,1900,4.369,1901,4.369,1902,4.369,1903,4.966,1904,6.486,1905,6.486,1906,4.966,1907,4.966,1908,4.966,1909,4.966,1910,4.966]],["title/classes/UpdateCategoryDto.html",[65,0.16,600,3.006]],["body/classes/UpdateCategoryDto.html",[3,0.179,4,0.163,5,0.13,36,0.01,57,0.27,64,0.179,65,0.242,83,0.009,84,0.009,154,1.548,259,1.763,263,2.679,576,4.072,600,5.349,616,4.293,947,4.293,1064,3.165,1082,3.25,1911,5.767,1912,7.706]],["title/classes/UpdateCourseDto.html",[65,0.16,816,3.006]],["body/classes/UpdateCourseDto.html",[3,0.179,4,0.163,5,0.13,36,0.01,57,0.27,64,0.179,65,0.242,83,0.009,84,0.009,154,1.548,259,1.763,263,2.679,796,4.072,816,5.349,825,5.248,965,4.86,1064,3.165,1082,3.25,1913,5.767,1914,7.706]],["title/classes/UpdateLessonDto.html",[65,0.16,1528,3.006]],["body/classes/UpdateLessonDto.html",[3,0.179,4,0.163,5,0.13,36,0.01,57,0.27,64,0.179,65,0.242,83,0.009,84,0.009,154,1.548,259,1.763,263,2.679,986,4.072,988,4.86,1064,3.165,1082,3.25,1528,5.349,1534,5.248,1915,5.767,1916,7.706]],["title/classes/UpdateQuizDto.html",[65,0.16,1842,3.006]],["body/classes/UpdateQuizDto.html",[3,0.179,4,0.163,5,0.13,36,0.01,57,0.27,64,0.179,65,0.242,83,0.009,84,0.009,154,1.548,259,1.763,263,2.679,1017,4.293,1019,5.248,1064,3.165,1082,3.25,1841,5.248,1842,5.349,1917,5.767,1918,7.706]],["title/classes/UpdateUserCategoryDto.html",[65,0.16,1919,3.466]],["body/classes/UpdateUserCategoryDto.html",[3,0.178,4,0.161,5,0.129,33,1.765,36,0.01,57,0.268,64,0.178,65,0.24,83,0.009,84,0.009,154,1.535,259,1.748,263,2.657,616,4.257,947,4.257,1028,4.257,1029,4.038,1064,3.139,1082,3.234,1919,6.139,1920,5.719,1921,7.668]],["title/classes/UpdateUserDto.html",[65,0.16,1732,2.835]],["body/classes/UpdateUserDto.html",[3,0.178,4,0.162,5,0.13,36,0.01,57,0.269,64,0.178,65,0.242,83,0.009,84,0.009,259,1.758,263,2.671,1037,3.697,1039,4.538,1064,3.156,1065,4.538,1066,4.538,1082,3.245,1083,5.704,1732,5.038,1738,4.847,1922,5.751]],["title/entities/User.html",[33,0.996,85,1.716]],["body/entities/User.html",[3,0.091,4,0.082,5,0.066,8,0.279,9,1.071,18,0.848,19,0.844,22,2.622,31,2.717,33,1.128,36,0.01,37,1.117,38,0.784,51,2.067,52,2.472,57,0.251,59,1.357,60,1.4,64,0.091,65,0.215,82,1.603,83,0.006,84,0.006,85,1.316,87,1.729,89,1.887,93,1.146,94,2.257,95,3.294,97,4.804,105,2.366,106,0.87,107,2.9,111,2.9,112,1.24,115,3.485,120,1.878,122,4.679,123,1.821,130,4.198,216,2.658,237,1.17,276,2.812,362,1.917,401,3.402,413,3.435,416,3.156,427,3.032,481,2.305,489,3.446,536,4.318,537,4.318,539,2.537,540,4.318,541,4.662,545,2.305,547,5.648,548,5.657,552,2.658,555,2.305,557,3.994,558,2.921,560,3.402,561,3.113,562,2.941,563,2.063,564,2.462,565,2.462,567,3.595,749,2.175,768,5.49,1061,2.462,1077,2.462,1089,4.318,1093,4.318,1541,4.662,1923,2.921,1924,5.824,1925,3.321,1926,3.321,1927,3.321,1928,3.321,1929,3.321,1930,3.321,1931,3.321,1932,3.321,1933,3.321,1934,3.321,1935,3.321,1936,3.321,1937,3.321,1938,3.321,1939,3.321,1940,3.321,1941,3.321,1942,3.321,1943,3.321,1944,3.321,1945,3.321,1946,3.321]],["title/entities/UserCategory.html",[85,1.716,557,2.69]],["body/entities/UserCategory.html",[3,0.126,4,0.115,5,0.092,8,0.388,9,1.351,18,1.179,19,0.803,33,1.931,36,0.01,38,0.759,57,0.26,64,0.126,65,0.171,83,0.007,84,0.007,85,1.83,87,2.404,89,2.258,93,0.826,94,2.147,95,3.941,99,4.583,105,2.985,106,1.21,107,3.658,108,4.329,111,3.658,112,1.724,120,2.612,122,4.515,123,1.386,130,4.515,362,1.803,440,3.424,534,3.539,536,5.166,537,5.166,540,5.166,542,3.424,545,3.206,555,3.206,557,3.84,560,4.291,564,6.045,567,4,778,4.063,1029,5.065,1947,4.063,1948,6.182,1949,4.618,1950,4.618,1951,4.618,1952,4.618,1953,4.618,1954,6.182,1955,4.618,1956,4.618]],["title/controllers/UserCategoryController.html",[144,1.442,1957,3.21]],["body/controllers/UserCategoryController.html",[3,0.124,4,0.113,5,0.091,8,0.382,13,1.524,19,0.696,31,1.805,33,1.963,35,1.721,36,0.01,37,1.327,38,0.626,39,1.327,44,1.677,57,0.284,58,0.609,59,1.862,60,1.921,64,0.124,65,0.168,70,2.372,71,1.104,83,0.007,84,0.007,89,2.243,93,0.925,94,1.99,144,1.518,146,1.561,148,2.2,153,2.282,154,1.076,162,1.133,165,1.721,174,1.752,217,5.138,263,2.828,295,3.914,296,3.464,297,2.577,300,2.052,302,2.282,321,2.2,348,3.85,432,3.647,534,2.919,570,3.189,572,3.32,596,2.577,608,2.577,615,3.378,616,2.984,620,3.625,627,2.696,628,2.696,644,4.012,645,2.984,1028,5.41,1029,4.597,1957,4.542,1958,4.008,1959,4.556,1960,4.556,1961,4.556,1962,4.556,1963,4.556,1964,4.532,1965,4.556,1966,4.556,1967,4.556,1968,4.556,1969,4.556,1970,4.556,1971,4.008,1972,4.556,1973,4.556]],["title/modules/UserCategoryModule.html",[152,1.105,197,3.006]],["body/modules/UserCategoryModule.html",[3,0.141,4,0.129,5,0.103,33,1.791,36,0.01,57,0.3,58,0.693,64,0.141,65,0.191,83,0.007,84,0.007,106,1.358,146,2.284,151,2.671,152,1.882,176,3.211,179,2.118,180,2.257,181,2.415,182,2.415,183,2.257,184,3.435,197,6.047,199,3.107,200,2.334,201,2.334,203,2.415,212,3.597,217,3.597,328,4.662,383,2.931,384,2.118,385,3.597,534,2.812,557,3.219,565,3.842,615,3.842,654,4.559,862,3.842,1029,3.219,1957,5.466,1964,5.737,1974,4.559,1975,4.559,1976,4.559,1977,5.182,1978,4.559,1979,5.182]],["title/injectables/UserCategoryService.html",[0,0.808,1964,2.835]],["body/injectables/UserCategoryService.html",[0,0.873,2,1.198,3,0.085,4,0.077,5,0.062,8,0.262,10,2.164,13,1.162,18,1.193,19,0.626,33,1.864,35,1.55,36,0.01,37,1.195,38,0.658,39,1.195,44,1.359,57,0.277,58,0.417,64,0.085,65,0.115,71,1.853,83,0.005,84,0.005,89,2.356,93,0.625,106,0.816,112,1.163,123,1.258,151,2.356,155,1.098,156,1.163,158,3.377,159,0.956,160,2.019,162,1.55,165,1.808,166,3.51,167,3.066,168,1.163,170,2.356,171,1.673,217,4.635,231,3.167,263,2.547,300,1.403,321,1.504,323,3.225,348,2.178,349,2.163,352,3.388,362,1.51,363,2.257,367,2.614,384,1.273,385,2.163,406,4.405,410,4.158,441,1.844,444,2.31,445,2.809,454,2.222,456,4.866,457,3.319,466,2.31,534,3.336,541,5.345,557,4.516,565,2.31,570,2.92,572,3.04,578,3.687,583,2.809,584,1.936,608,1.762,616,2.04,663,4.49,676,2.494,686,2.741,688,2.163,689,5.198,691,4.112,694,2.494,862,2.31,906,2.163,907,4.934,908,2.741,910,4.112,922,2.31,1028,3.061,1029,4.147,1031,4.112,1964,3.061,1971,6.167,1978,2.741,1980,2.741,1981,3.116,1982,3.116,1983,4.674,1984,3.116,1985,3.116,1986,3.116,1987,3.116,1988,3.116,1989,3.116,1990,3.116,1991,3.116,1992,3.116,1993,3.116,1994,4.674,1995,3.116]],["title/controllers/UserController.html",[144,1.442,1742,3.006]],["body/controllers/UserController.html",[3,0.08,4,0.073,5,0.058,8,0.246,13,1.11,19,0.689,22,3.305,31,1.162,33,1.639,35,1.703,36,0.01,37,1.47,38,0.694,39,1.313,40,2.102,44,1.66,52,1.127,53,1.277,55,2.649,56,2.609,57,0.268,58,0.392,59,2.799,60,1.236,64,0.122,65,0.165,70,1.526,73,1.751,83,0.005,84,0.005,89,2.378,93,1.057,94,1.915,106,0.768,115,2.419,123,1.001,144,0.977,146,1.004,148,1.415,153,1.468,154,0.692,162,1.11,165,1.825,170,0.95,174,1.716,227,3.145,246,3.198,253,4.038,255,4.559,263,1.824,295,3.056,296,3.056,297,1.658,300,1.32,302,1.468,306,2.173,321,1.415,344,1.127,348,2.518,360,1.735,362,1.464,455,0.977,488,2.419,489,1.735,521,2.524,538,1.821,570,2.813,571,2.641,572,2.419,573,3.056,577,2.419,589,4.052,593,2.173,594,2.347,596,1.658,599,1.821,607,1.821,608,1.658,609,3.098,610,3.098,612,2.923,617,1.526,619,2.035,620,4.343,621,4.194,622,3.098,623,1.92,624,2.772,627,4.213,628,3.847,631,2.035,632,2.035,634,1.32,638,2.347,641,2.173,644,1.92,645,1.92,800,2.579,802,2.347,803,3.309,804,3.309,820,2.173,821,2.173,822,4.007,831,3.098,832,3.098,833,3.098,834,2.923,835,3.098,836,3.098,837,3.098,838,2.173,839,2.173,840,2.173,841,2.173,867,3.847,1037,3.873,1081,2.641,1084,1.92,1548,2.347,1719,2.035,1720,2.347,1721,2.579,1725,3.926,1732,4.924,1737,2.347,1738,3.309,1739,4.754,1740,2.579,1741,2.579,1742,3.098,1743,2.579,1744,2.579,1745,2.579,1746,2.579,1747,2.579,1748,3.926,1749,2.579,1750,2.579,1751,2.579,1752,2.579,1753,2.579,1754,2.579,1755,3.926,1756,3.926,1757,2.579,1758,2.579,1759,2.579,1760,2.579,1761,2.579,1762,2.579,1763,2.579,1764,2.579,1765,2.579,1996,2.347,1997,3.926,1998,2.579,1999,2.931,2000,2.931,2001,2.931,2002,2.931,2003,2.931,2004,2.931,2005,2.931,2006,2.931,2007,2.931,2008,2.579,2009,2.931,2010,2.931,2011,2.931]],["title/modules/UserModule.html",[152,1.105,198,2.835]],["body/modules/UserModule.html",[3,0.139,4,0.126,5,0.101,33,1.172,36,0.01,57,0.299,58,0.681,64,0.139,65,0.188,83,0.007,84,0.007,106,1.334,146,2.259,151,2.659,152,1.866,176,3.185,179,2.081,180,2.219,181,2.374,182,2.374,183,2.219,184,3.407,198,5.751,199,3.073,200,2.294,201,2.294,203,2.374,212,3.536,328,4.64,381,3.335,383,2.88,384,2.081,394,4.481,407,4.889,867,5.171,869,4.64,884,3.536,1719,5.075,1737,4.078,1742,5.075,2012,4.481,2013,4.481,2014,4.481,2015,5.093,2016,5.093,2017,4.481]],["title/injectables/UserService.html",[0,0.808,867,2.562]],["body/injectables/UserService.html",[0,0.581,2,0.717,3,0.051,4,0.046,5,0.037,8,0.157,10,1.513,13,0.774,18,0.794,19,0.718,22,2.523,31,1.85,33,1.918,35,1.777,36,0.01,37,1.433,38,0.646,39,1.369,44,1.698,57,0.25,58,0.249,59,0.762,60,0.787,64,0.051,65,0.069,71,1.916,83,0.003,84,0.003,89,2.22,93,1.083,106,0.489,112,0.696,123,1.396,151,1.926,155,0.657,156,0.696,157,1.222,158,2.53,159,0.573,160,1.513,162,0.995,163,3.315,164,2.037,165,2.003,166,3.759,170,2.523,171,1.792,227,2.43,231,2.588,244,1.222,245,1.493,246,1.84,263,1.271,276,1.502,300,0.84,321,0.901,323,3.515,336,2.762,338,2.49,348,2.769,352,3.657,363,3.508,367,3.013,384,0.762,399,2.736,405,1.641,406,2.64,410,2.306,413,2.004,416,1.686,421,2.736,427,2.43,441,1.104,442,2.49,444,1.383,445,3.119,448,2.736,454,2.467,455,2.154,456,2.159,457,1.104,459,1.295,460,1.295,466,3.46,476,2.736,482,1.641,488,1.011,489,1.104,491,1.641,493,3.397,570,1.619,571,1.84,572,1.686,573,1.759,583,2.977,593,2.306,596,1.759,599,1.932,617,0.971,675,1.222,690,1.641,867,1.84,869,2.64,877,1.493,884,1.295,893,2.736,906,2.777,919,4.154,922,2.306,1037,3.361,1081,2.762,1095,3.056,1392,1.383,1722,2.736,1723,2.736,1732,4.369,1738,2.306,1996,5.341,1997,2.736,1998,2.736,2008,2.736,2017,1.641,2018,1.641,2019,3.11,2020,4,2021,1.866,2022,1.866,2023,3.11,2024,1.866,2025,3.11,2026,1.866,2027,1.866,2028,1.866,2029,3.11,2030,1.866,2031,4.667,2032,1.866,2033,1.866,2034,3.11,2035,4,2036,1.866,2037,1.866,2038,3.11,2039,1.866,2040,3.11,2041,1.866,2042,1.493,2043,3.11,2044,1.866,2045,3.11,2046,1.866,2047,3.11,2048,3.11,2049,3.11,2050,1.866,2051,1.866,2052,1.866,2053,1.866,2054,1.866,2055,1.866,2056,1.866,2057,1.866,2058,1.866,2059,1.866,2060,1.866,2061,1.866,2062,1.866,2063,1.866,2064,1.866,2065,1.866,2066,1.866,2067,1.866,2068,1.866,2069,6.226,2070,5.602,2071,4,2072,1.866,2073,4.667,2074,1.641,2075,1.641,2076,1.866,2077,1.866,2078,1.866,2079,1.641,2080,3.11,2081,1.866,2082,1.866,2083,1.866,2084,1.866,2085,1.866,2086,3.11,2087,1.866]],["title/classes/ValidationException.html",[65,0.16,2088,3.21]],["body/classes/ValidationException.html",[3,0.138,4,0.125,5,0.1,8,0.423,9,1.431,15,3.409,18,1.286,19,0.658,35,1.253,36,0.01,37,0.966,38,0.592,39,0.966,57,0.176,58,0.674,61,2.125,64,0.179,65,0.186,71,1.763,73,2.122,83,0.007,84,0.007,93,0.875,165,1.809,231,2.195,259,1.355,367,2.348,455,1.679,677,3.736,942,2.85,1082,2.762,1145,4.068,1374,3.3,1379,5.346,1382,5.393,1384,3.498,1385,3.498,1387,5.53,1388,3.498,1389,4.997,1395,3.498,1403,3.498,1425,3.736,1426,3.736,1427,3.736,1428,3.736,1430,3.736,1431,3.736,1432,3.736,1434,4.855,2088,4.855,2089,3.498,2090,5.039,2091,5.039,2092,5.039,2093,3.736,2094,4.034,2095,4.433,2096,6.4,2097,4.433,2098,4.433,2099,4.433]],["title/interfaces/ValidationResponse.html",[61,1.826,1389,2.562]],["body/interfaces/ValidationResponse.html",[3,0.11,4,0.1,5,0.08,8,0.34,9,1.234,10,1.83,36,0.01,38,0.366,57,0.268,58,0.541,61,1.706,64,0.11,65,0.209,71,1.977,73,1.311,83,0.006,84,0.006,160,1.311,165,1.751,168,2.428,170,2.551,171,0.931,225,1.885,228,2.512,237,1.425,329,4.822,341,2.105,343,2.631,344,1.555,360,2.393,367,1.885,454,1.603,455,1.881,521,2.287,582,3.525,714,2.105,831,2.807,832,2.807,833,2.807,834,2.648,835,2.807,836,2.807,837,2.807,942,3.193,1098,3.507,1101,2.512,1102,3.507,1107,2.393,1134,2.393,1135,2.512,1136,2.512,1138,2.512,1139,2.648,1325,2.998,1371,2.998,1372,3.238,1374,2.648,1378,3.558,1379,5.325,1381,4.967,1382,4.186,1385,2.807,1387,3.697,1388,2.807,1389,3.849,1390,3.238,1391,3.238,1392,2.998,1393,3.558,1394,3.558,1395,2.807,1396,3.558,1397,3.558,1398,3.558,1399,3.558,1400,3.558,1401,3.558,1402,3.558,1403,4.515,1404,3.558,1405,3.558,1406,3.558,1407,3.558,1408,3.558,1409,3.558,1410,4.967,1411,3.558,1412,3.558,1413,3.558,1414,3.558,1415,3.558,1416,3.558,1417,3.558,1418,3.558,1419,3.558,1420,3.558,1421,3.558,1422,5.722,1423,3.558,1424,3.558,1425,2.998,1426,2.998,1427,2.998,1428,2.998,1429,5.722,1430,2.998,1431,2.998,1432,2.998,1433,3.558,1434,2.998,1435,3.558,1436,3.558,1437,3.558]],["title/interfaces/ValidationResponse-1.html",[56,1.744,61,1.523,1389,2.137]],["body/interfaces/ValidationResponse-1.html",[3,0.143,4,0.13,5,0.104,19,0.527,36,0.01,57,0.183,58,0.7,61,2.21,64,0.183,65,0.194,71,1.796,73,2.176,83,0.008,84,0.008,93,0.991,165,1.843,228,3.255,230,4.609,231,2.925,367,2.442,455,1.745,677,3.885,942,2.963,1082,2.21,1145,4.171,1374,3.431,1379,5.425,1382,4.978,1384,3.637,1385,3.637,1387,5.291,1388,3.637,1389,4.974,1395,3.637,1403,3.637,1425,3.885,1426,3.885,1427,3.885,1428,3.885,1430,3.885,1431,3.885,1432,3.885,1434,4.978,2088,3.885,2089,3.637,2093,3.885,2094,4.194,2095,4.609,2096,6.519,2097,4.609,2098,4.609,2099,4.609,2100,5.239]],["title/coverage.html",[2101,4.738]],["body/coverage.html",[0,1.517,1,1.796,5,0.048,6,3.081,7,3.081,31,0.96,33,1.369,36,0.01,38,0.493,47,1.796,61,2.799,65,0.317,73,0.785,83,0.004,84,0.004,85,2.811,86,1.505,88,3.323,91,1.434,105,1.17,113,1.17,119,1.17,144,2.472,145,1.682,147,2.853,151,0.785,155,0.854,161,1.587,183,1.055,211,1.796,217,2.672,227,1.261,229,4.365,238,1.587,244,1.587,249,3.832,258,1.505,260,2.132,261,1.796,262,2.132,270,1.434,274,1.434,285,1.434,291,1.434,298,1.587,302,1.214,320,1.94,322,3.081,328,1.37,342,1.17,347,1.94,348,1.129,375,1.682,376,1.682,382,2.277,395,2.132,408,1.587,516,3.832,534,1.022,535,2.132,557,1.505,564,1.796,568,1.796,569,2.132,576,1.505,600,1.682,614,1.587,624,1.505,657,2.132,668,2.311,675,1.587,677,2.853,708,3.081,732,1.129,733,2.132,737,1.587,786,1.796,787,2.132,796,1.505,816,1.682,823,1.587,864,2.132,867,1.434,869,1.37,882,1.796,925,3.785,926,3.785,942,5.136,946,3.081,947,3.895,964,3.081,965,3.549,986,1.505,987,3.081,988,3.549,1017,1.587,1018,2.132,1019,3.081,1028,1.587,1029,3.695,1030,2.132,1037,1.37,1038,3.549,1039,3.785,1081,1.434,1095,1.587,1096,1.505,1097,3.785,1109,1.505,1111,1.587,1117,1.587,1148,1.94,1149,2.132,1179,1.796,1212,2.132,1233,1.796,1234,2.132,1258,1.587,1288,2.132,1323,1.94,1324,2.132,1325,3.549,1345,2.132,1371,1.796,1372,3.081,1374,1.587,1389,2.277,1455,3.081,1468,2.132,1480,2.132,1486,1.94,1510,1.796,1511,2.132,1528,1.682,1532,1.587,1557,2.132,1610,2.132,1678,2.132,1690,2.132,1719,1.682,1720,3.081,1732,1.587,1742,1.682,1769,1.796,1770,2.132,1775,1.587,1793,2.132,1805,1.94,1806,2.132,1807,2.132,1832,1.796,1833,2.132,1839,1.587,1842,1.682,1854,2.132,1878,2.132,1911,2.132,1913,2.132,1915,2.132,1917,2.132,1919,1.94,1920,2.132,1922,2.132,1923,2.132,1947,2.132,1957,1.796,1958,2.132,1964,1.587,1980,2.132,2018,2.132,2042,1.94,2088,1.796,2089,3.785,2093,1.796,2101,1.94,2102,2.132,2103,2.423,2104,2.423,2105,4.787,2106,7.851,2107,8.709,2108,2.132,2109,1.94,2110,4.787,2111,2.132,2112,2.132,2113,2.132,2114,2.132,2115,3.386,2116,7.662,2117,7.851,2118,6.887,2119,2.132,2120,2.132,2121,6.331,2122,3.848,2123,4.787,2124,4.787,2125,4.787,2126,2.423,2127,2.423,2128,5.57,2129,2.132,2130,2.132,2131,2.423,2132,2.423]],["title/dependencies.html",[180,2.269,2133,3.177]],["body/dependencies.html",[5,0.102,36,0.01,58,0.684,65,0.244,83,0.007,84,0.007,105,2.47,112,2.468,154,1.208,159,2.249,160,1.658,180,2.228,237,1.802,265,3.35,303,3.793,341,2.663,344,1.967,346,4.095,381,3.35,384,2.09,442,4.095,563,3.177,623,3.35,1065,3.551,1066,3.551,1178,4.095,1189,4.5,1228,4.5,1229,4.095,1356,5.865,1357,4.5,1469,4.5,1646,6.446,1647,4.5,1648,4.5,1650,4.095,1657,4.095,1707,4.5,1788,4.5,1789,4.095,1798,4.5,1799,4.5,2134,5.115,2135,7.326,2136,5.115,2137,5.115,2138,5.115,2139,5.115,2140,5.115,2141,5.115,2142,5.115,2143,5.115,2144,5.115,2145,5.115,2146,5.115,2147,5.115,2148,5.115,2149,5.115,2150,5.115,2151,5.115,2152,5.115,2153,5.115,2154,5.115,2155,5.115,2156,5.115,2157,5.115,2158,5.115,2159,5.115,2160,5.115,2161,5.115,2162,5.115,2163,5.115,2164,5.115,2165,5.115,2166,5.115,2167,5.115,2168,5.115,2169,5.115,2170,5.115,2171,5.115,2172,5.115,2173,5.115,2174,5.115,2175,5.115]],["title/miscellaneous/enumerations.html",[2176,2.137,2177,4.583]],["body/miscellaneous/enumerations.html",[8,0.497,33,1.668,36,0.01,53,3.898,59,2.962,83,0.008,84,0.008,88,4.108,92,4.288,116,4.746,117,5.373,118,5.373,119,3.499,1006,5.373,1320,5.802,1486,4.738,1507,6.376,1508,6.376,1509,6.376,2176,3.502,2177,5.207,2178,5.918,2179,5.918,2180,5.918,2181,5.918,2182,7.247,2183,7.247,2184,7.247]],["title/miscellaneous/functions.html",[2176,2.137,2185,4.583]],["body/miscellaneous/functions.html",[8,0.549,35,1.626,36,0.009,37,1.253,39,1.253,44,1.584,52,2.513,53,2.847,73,2.118,83,0.009,84,0.009,183,3.561,1374,5.038,1384,4.538,1385,5.34,1387,4.281,1388,4.538,1389,3.868,2089,4.538,2120,5.751,2176,3.868,2185,5.751,2186,6.537,2187,5.751]],["title/index.html",[8,0.303,2188,3.177,2189,3.177]],["body/index.html",[4,0.139,36,0.01,40,1.726,83,0.008,84,0.008,406,3.18,834,3.683,937,3.448,1449,4.948,1650,6.13,1660,4.948,1693,7.406,1802,4.948,2101,4.502,2190,5.624,2191,5.624,2192,5.624,2193,8.539,2194,5.624,2195,5.624,2196,5.624,2197,7.022,2198,5.624,2199,5.624,2200,5.624,2201,5.624,2202,7.022,2203,7.022,2204,5.624,2205,5.624,2206,5.624,2207,6.178,2208,7.022,2209,5.624,2210,5.624,2211,5.624,2212,5.624,2213,5.624,2214,4.948,2215,5.624,2216,5.624,2217,5.624,2218,5.624,2219,5.624,2220,5.624,2221,5.624,2222,5.624,2223,5.624,2224,4.948,2225,5.624,2226,5.624,2227,5.624,2228,5.624,2229,5.624,2230,5.624,2231,4.17]],["title/license.html",[2188,3.177,2189,3.177,2231,2.678]],["body/license.html",[36,0.008,83,0.008,84,0.008,139,3.84,201,2.491,344,2.127,517,5.153,577,2.998,1091,6.437,1203,4.867,1686,4.867,2102,4.867,2207,4.867,2231,4.102,2232,7.6,2233,5.532,2234,5.532,2235,5.532,2236,6.95,2237,5.532,2238,5.532,2239,5.532,2240,5.532,2241,5.532,2242,5.532,2243,6.95,2244,5.532,2245,5.532,2246,7.6,2247,5.532,2248,6.95,2249,5.532,2250,5.532,2251,5.532,2252,5.532,2253,5.532,2254,5.532,2255,5.532,2256,5.532,2257,5.532,2258,6.95,2259,5.532,2260,5.532,2261,5.532,2262,5.532,2263,5.532,2264,5.532,2265,6.95,2266,6.95,2267,5.532,2268,5.532,2269,5.532,2270,5.532,2271,5.532,2272,5.532,2273,5.532,2274,5.532,2275,5.532,2276,5.532,2277,5.532,2278,5.532,2279,5.532,2280,5.532,2281,5.532,2282,5.532,2283,5.532,2284,5.532,2285,5.532,2286,5.532,2287,5.532,2288,5.532,2289,5.532,2290,5.532,2291,5.532,2292,5.532,2293,5.532,2294,5.532]],["title/modules.html",[179,2.418]],["body/modules.html",[36,0.008,83,0.008,84,0.008,177,3.596,178,4.292,179,2.365,187,4.018,188,4.018,189,4.018,190,4.018,191,4.018,192,4.018,193,3.791,194,4.018,195,4.018,196,4.018,197,4.018,198,3.791,1172,4.018,2214,7.852,2295,8.925,2296,8.925,2297,8.979,2298,7.149,2299,7.149]],["title/overview.html",[2300,5.206]],["body/overview.html",[2,1.344,36,0.01,56,1.688,83,0.006,84,0.006,87,1.82,146,1.198,151,2.658,152,0.892,161,3.929,176,1.523,177,4.686,178,6.539,179,1.429,180,1.523,181,1.629,182,1.629,183,1.523,184,1.629,185,3.076,186,3.076,187,5.796,188,5.366,189,5.366,190,5.074,191,4.165,192,4.861,193,4.94,194,4.861,195,4.861,196,5.796,197,5.558,198,5.423,199,2.372,200,1.575,201,1.575,228,2.172,259,0.94,298,4.94,320,2.799,328,4.457,371,3.076,372,3.076,373,3.076,375,4.165,376,4.165,408,4.94,462,2.427,614,4.94,650,3.076,651,3.076,652,3.076,823,4.94,855,3.076,856,3.076,858,3.076,867,4.464,869,4.372,1172,4.165,1208,3.076,1209,3.076,1258,4.94,1280,3.076,1281,3.076,1282,3.076,1532,3.929,1551,3.076,1552,3.076,1651,3.076,1652,3.076,1653,3.076,1775,3.929,1783,3.076,1784,3.076,1839,3.929,1848,3.076,1849,3.076,1899,3.076,1900,3.076,1901,3.076,1902,3.076,1964,4.94,1974,3.076,1975,3.076,1976,3.076,2012,3.076,2013,3.076,2014,3.076,2300,3.076,2301,3.497,2302,3.497,2303,3.497,2304,3.497,2305,3.497]],["title/properties.html",[9,1.138,2133,3.177]],["body/properties.html",[9,1.494,36,0.01,40,2.099,83,0.009,84,0.009,611,5.07,2224,6.016,2231,5.07,2306,6.838,2307,6.838]],["title/classes/swaggerConfig.html",[65,0.16,2109,3.466]],["body/classes/swaggerConfig.html",[3,0.14,4,0.127,5,0.102,8,0.429,9,1.445,15,4.032,19,0.779,36,0.01,38,0.701,40,2.249,52,2.978,53,3.374,64,0.14,65,0.189,83,0.007,84,0.007,93,1.035,121,3.414,162,2.175,259,1.375,611,5.432,689,5.742,740,4.902,788,5.293,1611,7.693,1996,5.293,2108,4.5,2109,5.293,2308,7.326,2309,7.745,2310,7.745,2311,8.214,2312,6.612,2313,6.612,2314,6.612,2315,6.612,2316,5.115,2317,6.612,2318,6.612,2319,5.115,2320,5.115,2321,6.612,2322,5.115]],["title/miscellaneous/typealiases.html",[2176,2.137,2323,5.21]],["body/miscellaneous/typealiases.html",[8,0.56,36,0.009,38,0.745,83,0.009,84,0.009,155,2.742,322,5.336,348,3.626,578,4.604,1114,3.769,1455,5.336,2119,6.846,2176,3.944,2324,6.665,2325,6.665,2326,7.781]],["title/miscellaneous/variables.html",[2176,2.137,2327,4.583]],["body/miscellaneous/variables.html",[5,0.109,8,0.252,22,2.755,31,1.802,33,1.263,36,0.01,37,0.576,38,0.272,45,1.7,52,3.151,53,3.622,71,1.926,73,1.474,82,2.196,83,0.005,84,0.005,93,1.012,105,2.196,121,2.12,123,0.674,148,1.451,165,1.977,167,1.268,170,0.974,171,0.692,227,1.565,229,2.406,231,2.39,233,2.406,235,2.644,238,2.979,239,4.393,240,4.828,241,2.644,242,3.641,243,2.644,244,2.979,245,2.406,246,2.691,247,4.002,248,2.644,249,2.406,250,2.644,251,2.644,252,2.644,253,1.867,254,2.644,255,1.867,256,4.002,257,4.002,258,1.867,265,1.968,283,3.594,333,2.406,342,2.196,343,1.401,347,3.641,348,1.401,360,1.778,363,2.954,366,2.644,367,1.401,382,3.247,388,2.979,455,1.515,478,1.968,488,2.465,530,2.406,577,1.629,583,1.506,624,2.825,634,2.048,675,2.979,708,2.406,709,2.644,710,3.641,711,2.406,712,2.406,713,2.406,714,1.565,715,2.406,716,2.644,717,2.644,718,2.644,719,2.644,720,2.644,721,2.644,722,2.644,723,2.644,724,2.644,725,2.644,726,2.644,727,2.644,728,2.644,729,2.644,730,4.002,731,2.644,882,3.372,975,2.406,1134,1.778,1165,4.828,1379,2.086,1384,2.086,1387,1.968,1403,2.086,1448,4.002,1618,5.383,1671,5.383,2042,3.641,2074,2.644,2075,4.002,2079,4.002,2089,2.086,2093,3.372,2094,2.406,2111,2.644,2112,4.002,2113,2.644,2114,4.002,2115,2.644,2128,2.644,2129,4.002,2130,4.002,2176,1.778,2187,2.644,2327,2.644,2328,3.006,2329,5.487,2330,6.915,2331,3.006,2332,4.548,2333,3.006,2334,3.006,2335,3.006,2336,3.006,2337,3.006,2338,3.006,2339,3.006,2340,3.006,2341,3.006,2342,3.006,2343,3.006,2344,3.006,2345,3.006,2346,3.006,2347,3.006,2348,3.006,2349,3.006,2350,3.006,2351,4.548,2352,3.006,2353,4.548,2354,3.006,2355,4.548,2356,3.006,2357,4.548,2358,3.006,2359,3.006,2360,3.006,2361,3.006,2362,3.006,2363,4.548,2364,3.006,2365,3.006,2366,3.006,2367,4.548,2368,3.006,2369,3.006,2370,3.006,2371,3.006,2372,3.006,2373,3.006]]],"invertedIndex":[["",{"_index":36,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":942,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2306,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2150,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":2170,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":2172,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2149,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2163,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2107,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2125,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2122,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2116,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2117,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2118,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2110,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2105,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2121,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2124,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2123,"title":{},"body":{"coverage.html":{}}}],["078888888",{"_index":931,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["1",{"_index":56,"title":{"classes/FilesDto-1.html":{},"interfaces/ValidationResponse-1.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateQuizDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.0.0",{"_index":2321,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["1.4.5",{"_index":2156,"title":{},"body":{"dependencies.html":{}}}],["1.9.4",{"_index":2158,"title":{},"body":{"dependencies.html":{}}}],["1/7",{"_index":2127,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":2135,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":2140,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":2138,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2137,"title":{},"body":{"dependencies.html":{}}}],["10.4.0",{"_index":2159,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["1024",{"_index":2355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":2302,"title":{},"body":{"overview.html":{}}}],["1234",{"_index":944,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["14",{"_index":2126,"title":{},"body":{"coverage.html":{}}}],["14d",{"_index":1629,"title":{},"body":{"classes/Logger.html":{}}}],["15",{"_index":2301,"title":{},"body":{"overview.html":{}}}],["15.1.3",{"_index":2169,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2303,"title":{},"body":{"overview.html":{}}}],["1d",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":782,"title":{},"body":{"entities/Course.html":{},"classes/CreateQuizDto.html":{}}}],["2.0.0",{"_index":2164,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":2134,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2148,"title":{},"body":{"dependencies.html":{}}}],["2.42.2",{"_index":2142,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateCourseDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"classes/FilesDto-1.html":{},"injectables/LessonsService.html":{}}}],["201",{"_index":688,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{}}}],["2024",{"_index":2233,"title":{},"body":{"license.html":{}}}],["20m",{"_index":1627,"title":{},"body":{"classes/Logger.html":{}}}],["250788888888",{"_index":1053,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["2})@isstring()@isnotempty",{"_index":766,"title":{},"body":{"entities/Course.html":{}}}],["3.13.0",{"_index":2174,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2136,"title":{},"body":{"dependencies.html":{}}}],["3.4.4",{"_index":2168,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":717,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["32",{"_index":2304,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":2165,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":2160,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":2152,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"classes/CustomResponseInterceptor.html":{}}}],["401",{"_index":364,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["404",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["5",{"_index":2356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":2175,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2146,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["587",{"_index":729,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["6.0.2",{"_index":2145,"title":{},"body":{"dependencies.html":{}}}],["6.9.14",{"_index":2162,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["7",{"_index":2305,"title":{},"body":{"overview.html":{}}}],["7.1.0",{"_index":2154,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2139,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2171,"title":{},"body":{"dependencies.html":{}}}],["8.11.5",{"_index":2167,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"overview.html":{}}}],["9.0.1",{"_index":2173,"title":{},"body":{"dependencies.html":{}}}],["9.5.0",{"_index":2144,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["900000).tostring",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["9_]/g",{"_index":2077,"title":{},"body":{"injectables/UserService.html":{}}}],["_",{"_index":1392,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/LessonsController.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isarray(errors",{"_index":1423,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isarray(r.message",{"_index":1398,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isempty(errors",{"_index":1435,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isempty(validationerror.children",{"_index":1420,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isstring(errors",{"_index":1436,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.snakecase(constraintkey",{"_index":1419,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["__dirname",{"_index":1196,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{}}}],["_accesstoken",{"_index":1354,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_refreshtoken",{"_index":1350,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_validationfilter",{"_index":1373,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":1378,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["above",{"_index":2264,"title":{},"body":{"license.html":{}}}],["acceptlanguageresolver",{"_index":1440,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["access_token",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesscontorlservice",{"_index":1,"title":{"injectables/AccessContorlService.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["action",{"_index":2289,"title":{},"body":{"license.html":{}}}],["adapter",{"_index":1674,"title":{},"body":{"modules/MailModule.html":{}}}],["address",{"_index":1089,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["admin",{"_index":2182,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alias",{"_index":249,"title":{},"body":{"interfaces/AssociativeArray.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2324,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_ip_domain",{"_index":1070,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["allow_utf8_local_part",{"_index":1041,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["allowed",{"_index":2362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowinfinity",{"_index":940,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["allownan",{"_index":939,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["allows",{"_index":25,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["already",{"_index":1305,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["amazing",{"_index":2215,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2256,"title":{},"body":{"license.html":{}}}],["andwhere('course.id",{"_index":1314,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["andwhere('course.slug",{"_index":1599,"title":{},"body":{"injectables/LessonsService.html":{}}}],["andwhere('lesson.status",{"_index":1592,"title":{},"body":{"injectables/LessonsService.html":{}}}],["answer",{"_index":141,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["answeroption",{"_index":86,"title":{"entities/AnswerOption.html":{}},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{}}}],["answeroptionrepository",{"_index":1857,"title":{},"body":{"injectables/QuizService.html":{}}}],["answerrepository",{"_index":1864,"title":{},"body":{"injectables/QuizService.html":{}}}],["api",{"_index":2311,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["apiacceptedresponse",{"_index":618,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{}}}],["apibearerauth",{"_index":620,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin",{"_index":1246,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@apiquery({name",{"_index":2009,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@delete(':id",{"_index":2004,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@get(':id",{"_index":2002,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@patch(':id",{"_index":2006,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(authguard)@roles(rolesenum.admin",{"_index":579,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{}}}],["apibearerauth()@useguards(authguard)@roles(rolesenum.admin)@get()@apiquery({name",{"_index":2000,"title":{},"body":{"controllers/UserController.html":{}}}],["apiconsumes",{"_index":619,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apiconsumes('multipart/form",{"_index":631,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":1739,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":1728,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apiproperty",{"_index":933,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":997,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["apiproperty({enum",{"_index":1007,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["apiproperty({example",{"_index":948,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/ProfileDto.html":{}}}],["apiproperty({required",{"_index":1879,"title":{},"body":{"classes/ResponseDto.html":{}}}],["apiproperty({})@isarray()@isstring({each",{"_index":1032,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["apiquery",{"_index":621,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apiquery({name",{"_index":588,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["apitags('app",{"_index":173,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["apitags('auth",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":625,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('category')@apibearerauth()@useguards(authguard)@roles(rolesenum.admin)@delete(':id",{"_index":597,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('category')@apibearerauth()@useguards(authguard)@roles(rolesenum.admin)@patch(':id/status",{"_index":605,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('courses",{"_index":826,"title":{},"body":{"controllers/CoursesController.html":{}}}],["apitags('enrolls",{"_index":1260,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["apitags('lesson",{"_index":1535,"title":{},"body":{"controllers/LessonsController.html":{}}}],["apitags('profile",{"_index":1753,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apitags('quiz",{"_index":1843,"title":{},"body":{"controllers/QuizController.html":{}}}],["apitags('user",{"_index":1965,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["apitags('users",{"_index":1740,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["app",{"_index":1802,"title":{},"body":{"injectables/PrometheusService.html":{},"index.html":{}}}],["app_filter",{"_index":1904,"title":{},"body":{"modules/SharedModule.html":{}}}],["appcontroller",{"_index":145,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"coverage.html":{}}}],["application",{"_index":2309,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["application's",{"_index":2314,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["appmodule",{"_index":178,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":1331,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["argumentshost",{"_index":1102,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["arising",{"_index":2293,"title":{},"body":{"license.html":{}}}],["array",{"_index":41,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"interfaces/IsAuthorizedParams.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["article",{"_index":1509,"title":{},"body":{"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["asc",{"_index":1594,"title":{},"body":{"injectables/LessonsService.html":{}}}],["assign",{"_index":1748,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["associated",{"_index":2244,"title":{},"body":{"license.html":{}}}],["associativearray",{"_index":227,"title":{"interfaces/AssociativeArray.html":{}},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":323,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/PrometheusController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":258,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"interfaces/Config.html":{},"modules/MailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.dto.ts",{"_index":926,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["auth.dto.ts:14",{"_index":932,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.dto.ts:23",{"_index":929,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.dto.ts:34",{"_index":1344,"title":{},"body":{"classes/ForgetPasswordDto.html":{}}}],["auth.dto.ts:52",{"_index":1689,"title":{},"body":{"classes/OTPDto.html":{}}}],["auth.dto.ts:63",{"_index":1877,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["auth.dto.ts:72",{"_index":1876,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["auth.service",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":261,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticatemiddleware",{"_index":328,"title":{"injectables/AuthenticateMiddleware.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":302,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authheader",{"_index":525,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["authheader.split",{"_index":528,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["authmiddleware",{"_index":327,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authmodule",{"_index":187,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2224,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":2282,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":298,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":2031,"title":{},"body":{"injectables/UserService.html":{}}}],["authuser.sub",{"_index":2081,"title":{},"body":{"injectables/UserService.html":{}}}],["authuser?.sub",{"_index":2085,"title":{},"body":{"injectables/UserService.html":{}}}],["authusertype",{"_index":348,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":2299,"title":{},"body":{"modules.html":{}}}],["await",{"_index":352,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"controllers/PrometheusController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["b",{"_index":143,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["backers",{"_index":2216,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1382,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["base",{"_index":240,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash('password",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":2050,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":2147,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":527,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["between",{"_index":28,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["bidirectional",{"_index":127,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["binary",{"_index":962,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["binary'})@isoptional",{"_index":993,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["binary'})@isstring({message",{"_index":955,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/ProfileDto.html":{}}}],["bio",{"_index":1093,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["body",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/FileRequestFilter.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"entities/Enroll.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["boolean'})@isoptional",{"_index":999,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["boolean'})@isoptional({message",{"_index":971,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["boolean})@put('change",{"_index":792,"title":{},"body":{"controllers/CoursesController.html":{}}}],["bootstrap",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2297,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2295,"title":{},"body":{"modules.html":{}}}],["buildroles",{"_index":14,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["buildroles(roles",{"_index":21,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["c",{"_index":139,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"license.html":{}}}],["callbackurl",{"_index":713,"title":{},"body":{"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["callhandler",{"_index":1153,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["canactivate",{"_index":324,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":332,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cascade",{"_index":102,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["catch",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{}}}],["catch(badrequestexception",{"_index":1394,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["catch(exception",{"_index":1101,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["catch(queryfailederror",{"_index":1812,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catcherror",{"_index":1156,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["catcherror((err",{"_index":1164,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["categories",{"_index":691,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserCategoryService.html":{}}}],["category",{"_index":534,"title":{"entities/Category.html":{}},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["category'})@isstring({message",{"_index":949,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.controller",{"_index":654,"title":{},"body":{"modules/CategoryModule.html":{},"modules/UserCategoryModule.html":{}}}],["category.controller.ts",{"_index":1958,"title":{},"body":{"controllers/UserCategoryController.html":{},"coverage.html":{}}}],["category.controller.ts:26",{"_index":1960,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["category.controller.ts:38",{"_index":1962,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["category.controller.ts:45",{"_index":1963,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["category.dto",{"_index":616,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{}}}],["category.dto.ts",{"_index":947,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/FilesDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:21",{"_index":958,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:25",{"_index":1033,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["category.dto.ts:37",{"_index":951,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:55",{"_index":957,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:59",{"_index":1342,"title":{},"body":{"classes/FilesDto.html":{}}}],["category.entity",{"_index":565,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["category.entity.ts",{"_index":1947,"title":{},"body":{"entities/UserCategory.html":{},"coverage.html":{}}}],["category.entity.ts:19",{"_index":1952,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:22",{"_index":1955,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:25",{"_index":1949,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:28",{"_index":1950,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:31",{"_index":1953,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:34",{"_index":1951,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.icon_url",{"_index":700,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.id",{"_index":745,"title":{},"body":{"entities/Course.html":{}}}],["category.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["category.module.ts",{"_index":1977,"title":{},"body":{"modules/UserCategoryModule.html":{}}}],["category.service",{"_index":615,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{}}}],["category.service.ts",{"_index":1980,"title":{},"body":{"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["category.service.ts:14",{"_index":1982,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.service.ts:25",{"_index":1985,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.service.ts:76",{"_index":1987,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.service.ts:99",{"_index":1989,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.status",{"_index":706,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.usercategories",{"_index":1948,"title":{},"body":{"entities/UserCategory.html":{}}}],["category/dto/create",{"_index":1030,"title":{},"body":{"classes/CreateUserCategoryDto.html":{},"coverage.html":{}}}],["category/dto/update",{"_index":1920,"title":{},"body":{"classes/UpdateUserCategoryDto.html":{},"coverage.html":{}}}],["category/entities/category.entity",{"_index":862,"title":{},"body":{"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["category/entities/user",{"_index":564,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"coverage.html":{}}}],["category/user",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["category_id",{"_index":966,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["categorycontroller",{"_index":568,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryexist",{"_index":659,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryexist(name",{"_index":664,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryid",{"_index":1031,"title":{},"body":{"classes/CreateUserCategoryDto.html":{},"injectables/UserCategoryService.html":{}}}],["categorymodule",{"_index":188,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryrepository",{"_index":663,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["categoryservice",{"_index":614,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cb",{"_index":2353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb(new",{"_index":2357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb(null",{"_index":2367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changestatus",{"_index":660,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["changestatus(@param('slug",{"_index":852,"title":{},"body":{"controllers/CoursesController.html":{}}}],["changestatus(id",{"_index":666,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["changestatus(slug",{"_index":790,"title":{},"body":{"controllers/CoursesController.html":{}}}],["changestatuscourse",{"_index":1236,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["changestatuscourse(@user",{"_index":1278,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["changestatuscourse(user",{"_index":1241,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["charge",{"_index":2240,"title":{},"body":{"license.html":{}}}],["checkemailexists",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkemailexists(email",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkphoneexists",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkphoneexists(phone",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["claim",{"_index":2285,"title":{},"body":{"license.html":{}}}],["class",{"_index":65,"title":{"classes/Auth.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"classes/Logger.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/QueryFailedFilter.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"classes/ValidationException.html":{},"classes/swaggerConfig.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"classes/swaggerConfig.html":{}}}],["classes",{"_index":259,"title":{},"body":{"classes/Auth.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"classes/Logger.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/QueryFailedFilter.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"classes/ValidationException.html":{},"overview.html":{},"classes/swaggerConfig.html":{}}}],["client",{"_index":1798,"title":{},"body":{"injectables/PrometheusService.html":{},"dependencies.html":{}}}],["client.collectdefaultmetrics",{"_index":1803,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["client.registry",{"_index":1797,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["clientid",{"_index":711,"title":{},"body":{"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":712,"title":{},"body":{"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":371,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":372,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":650,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_exports",{"_index":651,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":652,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_coursesmodule",{"_index":855,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_coursesmodule_exports",{"_index":858,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_coursesmodule_imports",{"_index":857,"title":{},"body":{"modules/CoursesModule.html":{}}}],["cluster_coursesmodule_providers",{"_index":856,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_defaultmodule",{"_index":1208,"title":{},"body":{"modules/DefaultModule.html":{},"overview.html":{}}}],["cluster_defaultmodule_providers",{"_index":1209,"title":{},"body":{"modules/DefaultModule.html":{},"overview.html":{}}}],["cluster_enrollsmodule",{"_index":1280,"title":{},"body":{"modules/EnrollsModule.html":{},"overview.html":{}}}],["cluster_enrollsmodule_exports",{"_index":1282,"title":{},"body":{"modules/EnrollsModule.html":{},"overview.html":{}}}],["cluster_enrollsmodule_providers",{"_index":1281,"title":{},"body":{"modules/EnrollsModule.html":{},"overview.html":{}}}],["cluster_lessonsmodule",{"_index":1551,"title":{},"body":{"modules/LessonsModule.html":{},"overview.html":{}}}],["cluster_lessonsmodule_providers",{"_index":1552,"title":{},"body":{"modules/LessonsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1651,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1652,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1653,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_prometheusmodule",{"_index":1783,"title":{},"body":{"modules/PrometheusModule.html":{},"overview.html":{}}}],["cluster_prometheusmodule_providers",{"_index":1784,"title":{},"body":{"modules/PrometheusModule.html":{},"overview.html":{}}}],["cluster_quizmodule",{"_index":1848,"title":{},"body":{"modules/QuizModule.html":{},"overview.html":{}}}],["cluster_quizmodule_providers",{"_index":1849,"title":{},"body":{"modules/QuizModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":1899,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":1901,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_imports",{"_index":1900,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_providers",{"_index":1902,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_usercategorymodule",{"_index":1974,"title":{},"body":{"modules/UserCategoryModule.html":{},"overview.html":{}}}],["cluster_usercategorymodule_exports",{"_index":1975,"title":{},"body":{"modules/UserCategoryModule.html":{},"overview.html":{}}}],["cluster_usercategorymodule_providers",{"_index":1976,"title":{},"body":{"modules/UserCategoryModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2012,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2013,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2014,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":97,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{}}}],["column('decimal",{"_index":763,"title":{},"body":{"entities/Course.html":{}}}],["column()@isstring()@isnotempty",{"_index":552,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["column()@isstring()@isnotempty()@minlength(6)@exclude",{"_index":1934,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":1221,"title":{},"body":{"entities/Enroll.html":{}}}],["column({nullable",{"_index":547,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{}}}],["column({type",{"_index":749,"title":{},"body":{"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{}}}],["conditions",{"_index":2263,"title":{},"body":{"license.html":{}}}],["config",{"_index":382,"title":{"interfaces/Config.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/Config.html":{},"modules/DbModule.html":{},"injectables/GoogleStrategy.html":{},"modules/MailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config().google.callbackurl",{"_index":1361,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config().google.clientid",{"_index":1359,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config().google.clientsecret",{"_index":1360,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config().mail.auth.pass",{"_index":1667,"title":{},"body":{"modules/MailModule.html":{}}}],["config().mail.auth.user",{"_index":1666,"title":{},"body":{"modules/MailModule.html":{}}}],["config().mail.from",{"_index":1669,"title":{},"body":{"modules/MailModule.html":{}}}],["config().mail.host",{"_index":1664,"title":{},"body":{"modules/MailModule.html":{}}}],["config().secret",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":1176,"title":{},"body":{"modules/DbModule.html":{}}}],["configmodule.forroot",{"_index":1180,"title":{},"body":{"modules/DbModule.html":{}}}],["configs",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"modules/SharedModule.html":{}}}],["configs/config",{"_index":1661,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice",{"_index":1177,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{}}}],["configservice.get('db_database",{"_index":1195,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_host",{"_index":1190,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_password",{"_index":1193,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_port",{"_index":1191,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_synchronize",{"_index":1199,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_username",{"_index":1192,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('i18n_logging",{"_index":1452,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["configservice.get('i18n_watch",{"_index":1450,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["configservice.getorthrow('fallback_language",{"_index":1446,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["configure",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmpassword",{"_index":945,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["connect",{"_index":1207,"title":{},"body":{"modules/DbModule.html":{}}}],["connected",{"_index":1205,"title":{},"body":{"modules/DbModule.html":{}}}],["connection",{"_index":1203,"title":{},"body":{"modules/DbModule.html":{},"license.html":{}}}],["connecttodatabase",{"_index":1174,"title":{},"body":{"modules/DbModule.html":{}}}],["const",{"_index":71,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"interfaces/AssociativeArray.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"controllers/PrometheusController.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":1410,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["constraintkey",{"_index":1409,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{}}}],["constructor(@inject('file_request",{"_index":1334,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["constructor(@inject(request",{"_index":1122,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["constructor(categoryrepository",{"_index":661,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(courserepository",{"_index":866,"title":{},"body":{"injectables/CoursesService.html":{}}}],["constructor(enrollrepository",{"_index":1293,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["constructor(errors",{"_index":2090,"title":{},"body":{"classes/ValidationException.html":{}}}],["constructor(filerequest",{"_index":1327,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["constructor(i18nservice",{"_index":1481,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["constructor(jwtservice",{"_index":518,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{}}}],["constructor(lessonrepository",{"_index":1559,"title":{},"body":{"injectables/LessonsService.html":{}}}],["constructor(mailerservice",{"_index":1680,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(partial",{"_index":1231,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["constructor(private",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/MailService.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["constructor(public",{"_index":1395,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["constructor(quizrepository",{"_index":1855,"title":{},"body":{"injectables/QuizService.html":{}}}],["constructor(reflector",{"_index":1375,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(req",{"_index":1696,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["constructor(request",{"_index":1896,"title":{},"body":{"injectables/ResponseService.html":{}}}],["constructor(responseservice",{"_index":1099,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/DefaultService.html":{}}}],["constructor(responseservices",{"_index":326,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(usercategoryrepository",{"_index":1981,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["constructor(userrepository",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["consumer",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(languagemiddleware).forroutes",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":42,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["content",{"_index":992,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["content_url",{"_index":989,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"controllers/LessonsController.html":{}}}],["contentmetadata",{"_index":990,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{}}}],["contenturl",{"_index":1487,"title":{},"body":{"entities/Lesson.html":{},"injectables/LessonsService.html":{}}}],["context",{"_index":335,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":359,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":358,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":354,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":355,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{}}}],["continue",{"_index":256,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":2290,"title":{},"body":{"license.html":{}}}],["control.service.ts",{"_index":7,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["control.service.ts:11",{"_index":54,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:12",{"_index":20,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:24",{"_index":23,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:33",{"_index":50,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:49",{"_index":48,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["controller",{"_index":144,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":626,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('courses",{"_index":827,"title":{},"body":{"controllers/CoursesController.html":{}}}],["controller('enrolls",{"_index":1261,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["controller('lessons",{"_index":1536,"title":{},"body":{"controllers/LessonsController.html":{}}}],["controller('metrics",{"_index":1777,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["controller('profile",{"_index":1754,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["controller('quiz",{"_index":1844,"title":{},"body":{"controllers/QuizController.html":{}}}],["controller('user",{"_index":1967,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["controller('users",{"_index":1741,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1413,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["cookieresolver",{"_index":1443,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["copies",{"_index":2258,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2243,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2232,"title":{},"body":{"license.html":{}}}],["correctanswers",{"_index":137,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["course",{"_index":732,"title":{"entities/Course.html":{}},"body":{"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"entities/Enroll.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"coverage.html":{}}}],["course')@apibearerauth()@useguards(authguard)@roles(rolesenum.admin",{"_index":808,"title":{},"body":{"controllers/CoursesController.html":{}}}],["course'})@isstring()@isnotempty({message",{"_index":967,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto",{"_index":825,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/UpdateCourseDto.html":{}}}],["course.dto.ts",{"_index":965,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["course.dto.ts:104",{"_index":968,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:108",{"_index":1343,"title":{},"body":{"classes/FilesDto-1.html":{}}}],["course.dto.ts:17",{"_index":977,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:29",{"_index":970,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:41",{"_index":974,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:53",{"_index":969,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:64",{"_index":973,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:82",{"_index":976,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:92",{"_index":972,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.featured",{"_index":918,"title":{},"body":{"injectables/CoursesService.html":{}}}],["course.id",{"_index":1215,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["course.isfree",{"_index":916,"title":{},"body":{"injectables/CoursesService.html":{}}}],["course.thumbnail",{"_index":912,"title":{},"body":{"injectables/CoursesService.html":{}}}],["course_slug",{"_index":1520,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["courseexist",{"_index":865,"title":{},"body":{"injectables/CoursesService.html":{}}}],["courseexist(title",{"_index":873,"title":{},"body":{"injectables/CoursesService.html":{}}}],["courseid",{"_index":1242,"title":{},"body":{"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["coursepagination",{"_index":868,"title":{},"body":{"injectables/CoursesService.html":{}}}],["courserepository",{"_index":871,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["courses",{"_index":788,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/swaggerConfig.html":{}}}],["courses.controller",{"_index":860,"title":{},"body":{"modules/CoursesModule.html":{}}}],["courses.service",{"_index":824,"title":{},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{}}}],["courses/entities/course.entity",{"_index":1286,"title":{},"body":{"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{}}}],["coursescontroller",{"_index":786,"title":{"controllers/CoursesController.html":{}},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"coverage.html":{}}}],["coursesmodule",{"_index":189,"title":{"modules/CoursesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"modules.html":{},"overview.html":{}}}],["coursesquery",{"_index":902,"title":{},"body":{"injectables/CoursesService.html":{}}}],["coursesservice",{"_index":823,"title":{"injectables/CoursesService.html":{}},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":2101,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["create(createauthdto",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["create(createcategorydto",{"_index":575,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createcoursedto",{"_index":795,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["create(createlessondto",{"_index":1513,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["create(createusercategorydto",{"_index":1959,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["create(createuserdto",{"_index":1998,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(undefined",{"_index":1984,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["createauthdto",{"_index":270,"title":{"classes/CreateAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":576,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.description",{"_index":683,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto.name.tolowercase",{"_index":682,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto})@useinterceptors(undefined",{"_index":585,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcoursedto",{"_index":796,"title":{"classes/CreateCourseDto.html":{}},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["createcoursedto.category_id",{"_index":888,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto.featured",{"_index":898,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto.isfree",{"_index":897,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto.price.tostring",{"_index":896,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto})@useinterceptors(undefined",{"_index":798,"title":{},"body":{"controllers/CoursesController.html":{}}}],["created",{"_index":584,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{}}}],["created_at",{"_index":536,"title":{},"body":{"entities/Category.html":{},"entities/Enroll.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["createdat",{"_index":129,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["createdatecolumn",{"_index":107,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["createdatecolumn({type",{"_index":542,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/UserCategory.html":{}}}],["createlessondto",{"_index":986,"title":{"classes/CreateLessonDto.html":{}},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["createlessondto})@useinterceptors(undefined",{"_index":1514,"title":{},"body":{"controllers/LessonsController.html":{}}}],["createparamdecorator",{"_index":2372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1578,"title":{},"body":{"injectables/LessonsService.html":{}}}],["createquerybuilder('users",{"_index":2054,"title":{},"body":{"injectables/UserService.html":{}}}],["createquiz",{"_index":1834,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{}}}],["createquiz(createquizdto",{"_index":1835,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{}}}],["createquizdto",{"_index":1017,"title":{"classes/CreateQuizDto.html":{}},"body":{"classes/CreateQuizDto.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["createquizdto.description",{"_index":1869,"title":{},"body":{"injectables/QuizService.html":{}}}],["createquizdto.questions.map((question",{"_index":1865,"title":{},"body":{"injectables/QuizService.html":{}}}],["createquizdto.title",{"_index":1868,"title":{},"body":{"injectables/QuizService.html":{}}}],["createusercategorydto",{"_index":1028,"title":{"classes/CreateUserCategoryDto.html":{}},"body":{"classes/CreateUserCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":1037,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["creating",{"_index":26,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/QuizService.html":{}}}],["creator",{"_index":734,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{}}}],["ctx",{"_index":1134,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1137,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["ctx.getresponse",{"_index":1136,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currency",{"_index":735,"title":{},"body":{"entities/Course.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["current_timestamp",{"_index":1217,"title":{},"body":{"entities/Enroll.html":{}}}],["currentrole",{"_index":62,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["customexceptionfilter",{"_index":1096,"title":{"classes/CustomExceptionFilter.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["customresponseinterceptor",{"_index":1148,"title":{"classes/CustomResponseInterceptor.html":{}},"body":{"classes/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["d",{"_index":1026,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["daily",{"_index":1647,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["damages",{"_index":2286,"title":{},"body":{"license.html":{}}}],["data",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"injectables/QuizService.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["data')@apiacceptedresponse({description",{"_index":581,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{}}}],["data')@useinterceptors(undefined",{"_index":1530,"title":{},"body":{"controllers/LessonsController.html":{}}}],["data')@useinterceptors(undefined)@apibearerauth()@patch(':id",{"_index":602,"title":{},"body":{"controllers/CategoryController.html":{}}}],["data')@useinterceptors(undefined)@apioperation({summary",{"_index":1734,"title":{},"body":{"controllers/ProfileController.html":{}}}],["database",{"_index":1194,"title":{},"body":{"modules/DbModule.html":{}}}],["databasename",{"_index":1201,"title":{},"body":{"modules/DbModule.html":{}}}],["datasource",{"_index":1561,"title":{},"body":{"injectables/LessonsService.html":{}}}],["date",{"_index":130,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["date(date.now()).toisostring",{"_index":1133,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["date.now",{"_index":1116,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["date.now()}.${ext",{"_index":2339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datepattern",{"_index":1621,"title":{},"body":{"classes/Logger.html":{}}}],["dbmodule",{"_index":1172,"title":{"modules/DbModule.html":{}},"body":{"modules/DbModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["dd",{"_index":1624,"title":{},"body":{"classes/Logger.html":{}}}],["deal",{"_index":2245,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2294,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1634,"title":{},"body":{"classes/Logger.html":{}}}],["declarations",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":533,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["decoded",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.exps",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":94,"title":{},"body":{"entities/AnswerOption.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"classes/ForgetPasswordDto.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":52,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/Category.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"injectables/PaginateHelper.html":{},"entities/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["defaultmetrics",{"_index":1791,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["defaultmodule",{"_index":177,"title":{"modules/DefaultModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules.html":{},"overview.html":{}}}],["defaults",{"_index":1668,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultservice",{"_index":161,"title":{"injectables/DefaultService.html":{}},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"coverage.html":{},"overview.html":{}}}],["defaultvaluepipe",{"_index":821,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":839,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":841,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["deferrable",{"_index":770,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["deferred",{"_index":772,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{}}}],["delete",{"_index":608,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":644,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":922,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["deleted_at",{"_index":537,"title":{},"body":{"entities/Category.html":{},"entities/Enroll.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["deletedat",{"_index":736,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["deletedatecolumn",{"_index":560,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["deletedatecolumn({type",{"_index":545,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["dependencies",{"_index":180,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":2066,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":40,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{},"classes/swaggerConfig.html":{}}}],["destination",{"_index":2351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":2195,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1671,"title":{},"body":{"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":832,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["diskstorage",{"_index":2350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distination",{"_index":2363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":2254,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":2102,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doe",{"_index":1044,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["done",{"_index":1351,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":1370,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto/create",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":617,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e",{"_index":689,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{},"classes/swaggerConfig.html":{}}}],["e.g",{"_index":142,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["e2e",{"_index":2204,"title":{},"body":{"index.html":{}}}],["each",{"_index":1035,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["ejsadapter",{"_index":1676,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["emailexists",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["emailexists(email",{"_index":2023,"title":{},"body":{"injectables/UserService.html":{}}}],["emailregex",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailregex.test(username",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails",{"_index":1362,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":1364,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["enabled",{"_index":1792,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["engineer",{"_index":1092,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["enroll",{"_index":737,"title":{"entities/Enroll.html":{}},"body":{"entities/Course.html":{},"entities/Enroll.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"coverage.html":{}}}],["enroll.id",{"_index":755,"title":{},"body":{"entities/Course.html":{}}}],["enroll.status",{"_index":1318,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["enrollcourse",{"_index":1237,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["enrollcourse(@user",{"_index":1271,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["enrollcourse(user",{"_index":1245,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["enrolled",{"_index":1306,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["enrollrepository",{"_index":1295,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["enrolls",{"_index":1235,"title":{},"body":{"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{}}}],["enrolls.controller",{"_index":1284,"title":{},"body":{"modules/EnrollsModule.html":{}}}],["enrolls.service",{"_index":1259,"title":{},"body":{"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{}}}],["enrollscontroller",{"_index":1233,"title":{"controllers/EnrollsController.html":{}},"body":{"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"coverage.html":{}}}],["enrollsmodule",{"_index":190,"title":{"modules/EnrollsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EnrollsModule.html":{},"modules.html":{},"overview.html":{}}}],["enrollsservice",{"_index":1258,"title":{"injectables/EnrollsService.html":{}},"body":{"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"coverage.html":{},"overview.html":{}}}],["entities",{"_index":87,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"modules/DbModule.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":655,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["entities/course.entity",{"_index":861,"title":{},"body":{"modules/CoursesModule.html":{},"injectables/CoursesService.html":{}}}],["entities/enroll.entity",{"_index":1285,"title":{},"body":{"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{}}}],["entities/lesson.entity",{"_index":1012,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{}}}],["entities/quiz.entity",{"_index":1023,"title":{},"body":{"classes/CreateQuizDto.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{}}}],["entities/user",{"_index":1978,"title":{},"body":{"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["entities/user.entity",{"_index":2017,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":85,"title":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"coverage.html":{}}}],["entity('categories",{"_index":566,"title":{},"body":{"entities/Category.html":{}}}],["entity('courses",{"_index":780,"title":{},"body":{"entities/Course.html":{}}}],["entity('enrolles",{"_index":1230,"title":{},"body":{"entities/Enroll.html":{}}}],["entity('user_categories",{"_index":1956,"title":{},"body":{"entities/UserCategory.html":{}}}],["entity('users",{"_index":1945,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":1197,"title":{},"body":{"modules/DbModule.html":{}}}],["enum",{"_index":115,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{},"controllers/ProfileController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["enumerations",{"_index":2177,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":60,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"controllers/EnrollsController.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["env",{"_index":1184,"title":{},"body":{"modules/DbModule.html":{}}}],["env.development",{"_index":1185,"title":{},"body":{"modules/DbModule.html":{}}}],["env.production",{"_index":1186,"title":{},"body":{"modules/DbModule.html":{}}}],["envfilepath",{"_index":1183,"title":{},"body":{"modules/DbModule.html":{}}}],["err",{"_index":1165,"title":{},"body":{"classes/CustomResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["err.getstatus",{"_index":1166,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["err.message",{"_index":1167,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["err.name",{"_index":1170,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["errmsg",{"_index":1422,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["errmsg['error",{"_index":1437,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["errmsg[error.property",{"_index":1429,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["error",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["error(\"my",{"_index":1764,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["error('file",{"_index":2358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error('only",{"_index":2361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error).message",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["error.children",{"_index":1431,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["error.children.length",{"_index":1432,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["error.constraints",{"_index":1428,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["error.fields",{"_index":1418,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["error.fields.{key",{"_index":1414,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["error.log",{"_index":1620,"title":{},"body":{"classes/Logger.html":{}}}],["errormessage",{"_index":1587,"title":{},"body":{"injectables/LessonsService.html":{}}}],["errormsg",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["errorresponse",{"_index":1145,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["errorresponse[error.property",{"_index":2096,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["errors",{"_index":1387,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["errors.foreach((error",{"_index":1425,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["errors.length",{"_index":1424,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["eslint",{"_index":831,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["eslint/no",{"_index":835,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["eur",{"_index":784,"title":{},"body":{"entities/Course.html":{}}}],["event",{"_index":2281,"title":{},"body":{"license.html":{}}}],["exact",{"_index":140,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["example",{"_index":937,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["example@example.com",{"_index":930,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{}}}],["exception",{"_index":1104,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{}}}],["exception.constraint",{"_index":1813,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":1814,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.getresponse",{"_index":1397,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["exception.getstatus",{"_index":1139,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["exception.message",{"_index":1142,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{}}}],["exceptionfilter",{"_index":1098,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["exclude",{"_index":1541,"title":{},"body":{"controllers/LessonsController.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["exclude()@apiproperty({required",{"_index":1881,"title":{},"body":{"classes/ResponseDto.html":{}}}],["execute",{"_index":1580,"title":{},"body":{"injectables/LessonsService.html":{}}}],["executioncontext",{"_index":333,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":704,"title":{},"body":{"injectables/CategoryService.html":{}}}],["exists",{"_index":2073,"title":{},"body":{"injectables/UserService.html":{}}}],["existuser",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["existuser.id",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["existuser?.name",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["existuserenrolled",{"_index":1303,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["exp",{"_index":532,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["expiresin",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":64,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{}}}],["exports",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":344,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":634,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":2352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exps",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["ext",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":1082,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"classes/ProfileDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["extractjwt",{"_index":1473,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1475,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fabrice",{"_index":2235,"title":{},"body":{"license.html":{}}}],["fail.filter.ts",{"_index":1807,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["fail.filter.ts:13",{"_index":1808,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fail.filter.ts:14",{"_index":1809,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fail.filter.ts:16",{"_index":1810,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":907,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["fallbacklanguage",{"_index":1445,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["false",{"_index":362,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{}}}],["false})@isstring()@isnotempty",{"_index":753,"title":{},"body":{"entities/Course.html":{}}}],["featured",{"_index":738,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["fetch",{"_index":908,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["fetched",{"_index":906,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|gif",{"_index":2360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split('.')[0",{"_index":2335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split('.')[1",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.size",{"_index":2354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file[0",{"_index":1339,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["filefieldsinterceptor",{"_index":622,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["filename",{"_index":1618,"title":{},"body":{"classes/Logger.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":2344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filerequest",{"_index":1329,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["filerequestfilter",{"_index":1323,"title":{"injectables/FileRequestFilter.html":{}},"body":{"injectables/FileRequestFilter.html":{},"coverage.html":{}}}],["files",{"_index":577,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.content_url",{"_index":1601,"title":{},"body":{"injectables/LessonsService.html":{}}}],["files.icon_url",{"_index":696,"title":{},"body":{"injectables/CategoryService.html":{}}}],["files.icon_url[0]?.filename",{"_index":684,"title":{},"body":{"injectables/CategoryService.html":{}}}],["files.thumbnail",{"_index":1603,"title":{},"body":{"injectables/LessonsService.html":{}}}],["files.thumbnail_url",{"_index":911,"title":{},"body":{"injectables/CoursesService.html":{}}}],["files.thumbnail_url[0]?.filename",{"_index":892,"title":{},"body":{"injectables/CoursesService.html":{}}}],["filesdto",{"_index":668,"title":{"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{}},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"injectables/LessonsService.html":{},"coverage.html":{}}}],["filter",{"_index":590,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["filteredfilters",{"_index":1540,"title":{},"body":{"controllers/LessonsController.html":{}}}],["filterquerybuilderfromrequest",{"_index":244,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterquerybuilderfromrequest(coursesquery",{"_index":904,"title":{},"body":{"injectables/CoursesService.html":{}}}],["filterquerybuilderfromrequest(lessonquery",{"_index":1595,"title":{},"body":{"injectables/LessonsService.html":{}}}],["filterquerybuilderfromrequest(q",{"_index":2067,"title":{},"body":{"injectables/UserService.html":{}}}],["filters",{"_index":246,"title":{},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["filters[key",{"_index":251,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["findall",{"_index":570,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@param('slug",{"_index":1539,"title":{},"body":{"controllers/LessonsController.html":{}}}],["findall(@query('status",{"_index":636,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(@user",{"_index":1969,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["findall(filter",{"_index":670,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["findall(filters",{"_index":2025,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(page",{"_index":800,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UserController.html":{}}}],["findall(slug",{"_index":1516,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["findall(status",{"_index":587,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(undefined",{"_index":1986,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["findall(user",{"_index":1961,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["findmycourse",{"_index":789,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["findmycourse(@user",{"_index":843,"title":{},"body":{"controllers/CoursesController.html":{}}}],["findmycourse(user",{"_index":806,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["findone",{"_index":571,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":638,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["findone(@param('lesson_slug",{"_index":1546,"title":{},"body":{"controllers/LessonsController.html":{}}}],["findone(@param('slug",{"_index":845,"title":{},"body":{"controllers/CoursesController.html":{}}}],["findone(id",{"_index":593,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(lesson_slug",{"_index":1519,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["findone(slug",{"_index":810,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["findoneinstructor",{"_index":1512,"title":{},"body":{"controllers/LessonsController.html":{}}}],["findoneinstructor(course_slug",{"_index":1524,"title":{},"body":{"controllers/LessonsController.html":{}}}],["first",{"_index":1765,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["firstname",{"_index":1365,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2277,"title":{},"body":{"license.html":{}}}],["following",{"_index":2262,"title":{},"body":{"license.html":{}}}],["forgetpassword",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(@body",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(forgetpassworddto",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassworddto",{"_index":274,"title":{"classes/ForgetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["forgot",{"_index":1687,"title":{},"body":{"injectables/MailService.html":{}}}],["forgotpassword",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassword(passworddto",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["format",{"_index":954,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/Logger.html":{},"classes/ProfileDto.html":{}}}],["format.colorize",{"_index":1640,"title":{},"body":{"classes/Logger.html":{}}}],["format.combine",{"_index":1635,"title":{},"body":{"classes/Logger.html":{}}}],["format.combine(format.timestamp",{"_index":1614,"title":{},"body":{"classes/Logger.html":{}}}],["format.errors",{"_index":1637,"title":{},"body":{"classes/Logger.html":{}}}],["format.json",{"_index":1615,"title":{},"body":{"classes/Logger.html":{}}}],["format.printf",{"_index":1641,"title":{},"body":{"classes/Logger.html":{}}}],["format.splat",{"_index":1639,"title":{},"body":{"classes/Logger.html":{}}}],["format.timestamp",{"_index":1636,"title":{},"body":{"classes/Logger.html":{}}}],["formaterrors",{"_index":1374,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["formaterrors(error.children",{"_index":2098,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["formaterrors(errors",{"_index":1384,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["formattederrors",{"_index":1403,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["formatusername",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["formatusername(name",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["found",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserService.html":{}}}],["founduser",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser.id",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser.password",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser.role",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":2190,"title":{},"body":{"index.html":{}}}],["free",{"_index":2239,"title":{},"body":{"license.html":{}}}],["fs.existssync(distination",{"_index":2365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.existssync(filepath",{"_index":2346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.mkdirsync(distination",{"_index":2366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.unlink(filepath",{"_index":2347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":677,"title":{},"body":{"injectables/CategoryService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["functions",{"_index":2185,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2261,"title":{},"body":{"license.html":{}}}],["g",{"_index":2075,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["generated",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["generateslug",{"_index":882,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateslug(createcoursedto.title",{"_index":886,"title":{},"body":{"injectables/CoursesService.html":{}}}],["generateslug(createlessondto.title",{"_index":1584,"title":{},"body":{"injectables/LessonsService.html":{}}}],["get(\"/debug",{"_index":1763,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["get('/debug",{"_index":1724,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('/google",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google')@useguards(undefined",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback')@useguards(undefined",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':course_slug/instructor",{"_index":1543,"title":{},"body":{"controllers/LessonsController.html":{}}}],["get(':id",{"_index":594,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["get(':lesson_slug/:course_slug",{"_index":1521,"title":{},"body":{"controllers/LessonsController.html":{}}}],["get(':slug",{"_index":811,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{}}}],["get(':slug')@apiquery({name",{"_index":1517,"title":{},"body":{"controllers/LessonsController.html":{}}}],["get('courses",{"_index":1263,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["get('instructor",{"_index":1267,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["get('my",{"_index":807,"title":{},"body":{"controllers/CoursesController.html":{}}}],["get()@apiquery({name",{"_index":801,"title":{},"body":{"controllers/CoursesController.html":{}}}],["getalllessonbyinstructionn",{"_index":1558,"title":{},"body":{"injectables/LessonsService.html":{}}}],["getalllessonbyinstructionn(slug",{"_index":1569,"title":{},"body":{"injectables/LessonsService.html":{}}}],["geterror",{"_index":1721,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["getfilename",{"_index":2129,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfilename(file",{"_index":2368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gethello",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["getinstructorenrollscourses",{"_index":1238,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getinstructorenrollscourses(@user",{"_index":1268,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getinstructorenrollscourses(user",{"_index":1249,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getlimit",{"_index":1691,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["getmany",{"_index":1319,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["getmetrics",{"_index":1772,"title":{},"body":{"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{}}}],["getmetrics(@res",{"_index":1778,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["getmetrics(res",{"_index":1773,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["getone",{"_index":1315,"title":{},"body":{"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["getpage",{"_index":1692,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["getprofile",{"_index":1722,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/UserService.html":{}}}],["getprofile(@user",{"_index":1757,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["getprofile(authuser",{"_index":2029,"title":{},"body":{"injectables/UserService.html":{}}}],["getprofile(user",{"_index":1727,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrole",{"_index":16,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["getrole(undefined",{"_index":46,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["getstudentenrollscourses",{"_index":1239,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getstudentenrollscourses(@user",{"_index":1264,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getstudentenrollscourses(user",{"_index":1252,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getting",{"_index":2188,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuploadpath",{"_index":2042,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuploadpath(user.profile_picture",{"_index":2087,"title":{},"body":{"injectables/UserService.html":{}}}],["global",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"modules/I18nConfigModule.html":{},"modules/PrometheusModule.html":{},"modules/SharedModule.html":{}}}],["google",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["googlecallback",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlecallback(@req",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlecallback(req",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":375,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2238,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2298,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":2211,"title":{},"body":{"index.html":{}}}],["guard",{"_index":320,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":321,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["guest",{"_index":2183,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["handlebars",{"_index":2151,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1658,"title":{},"body":{"modules/MailModule.html":{}}}],["handleexceptions",{"_index":1630,"title":{},"body":{"classes/Logger.html":{}}}],["hashedpassword",{"_index":2049,"title":{},"body":{"injectables/UserService.html":{}}}],["headerresolver",{"_index":1442,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["headerresolver(['x",{"_index":1457,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["helmet",{"_index":2153,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":2221,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":2237,"title":{},"body":{"license.html":{}}}],["hierarchies",{"_index":11,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy",{"_index":27,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(currentrole",{"_index":79,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(requiredrole",{"_index":81,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.set(role",{"_index":75,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["holders",{"_index":2283,"title":{},"body":{"license.html":{}}}],["host",{"_index":714,"title":{},"body":{"interfaces/Config.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"modules/MailModule.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1135,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["http",{"_index":1391,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["http://localhost:3000/auth/google/callback",{"_index":722,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["httpexception",{"_index":1108,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["httpexception(errorresponse",{"_index":1171,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["httpexceptionfilter",{"_index":1371,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{}}}],["https://example.com/icon.png",{"_index":952,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["https://nestjs.com",{"_index":2228,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":1107,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["httpstatus.conflict",{"_index":1815,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":1140,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{}}}],["httpstatus.ok",{"_index":1112,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":1400,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["i18n",{"_index":160,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/ImagePicDto.html":{},"injectables/LanguageMiddleware.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{}}}],["i18nconfigmodule",{"_index":191,"title":{"modules/I18nConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/I18nConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["i18ncontext",{"_index":157,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/UserService.html":{}}}],["i18ncontext.current().lang",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/UserService.html":{}}}],["i18nmodule",{"_index":1439,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["i18nmodule.forrootasync",{"_index":1444,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["i18npath",{"_index":2119,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["i18nservice",{"_index":158,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/LanguageMiddleware.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["i18ntranslations",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["i18nvalidationmessage",{"_index":935,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iat",{"_index":531,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["icon",{"_index":953,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["icon_url",{"_index":538,"title":{},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["id",{"_index":89,"title":{},"body":{"entities/AnswerOption.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto-1.html":{},"injectables/JwtStrategy.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2103,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1476,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":975,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"miscellaneous/variables.html":{}}}],["imagepicdto",{"_index":1095,"title":{"classes/ImagePicDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["imageprofile",{"_index":2035,"title":{},"body":{"injectables/UserService.html":{}}}],["imageprofile?.profile_picture[0]?.filename",{"_index":2084,"title":{},"body":{"injectables/UserService.html":{}}}],["images",{"_index":891,"title":{},"body":{"injectables/CoursesService.html":{}}}],["implements",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["implied",{"_index":2273,"title":{},"body":{"license.html":{}}}],["import",{"_index":57,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["imports",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":2267,"title":{},"body":{"license.html":{}}}],["including",{"_index":2248,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":230,"title":{},"body":{"interfaces/AssociativeArray.html":{},"interfaces/ValidationResponse-1.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{}}}],["info.level",{"_index":1643,"title":{},"body":{"classes/Logger.html":{}}}],["info.log",{"_index":1632,"title":{},"body":{"classes/Logger.html":{}}}],["info.message",{"_index":1644,"title":{},"body":{"classes/Logger.html":{}}}],["info.timestamp",{"_index":1642,"title":{},"body":{"classes/Logger.html":{}}}],["initially",{"_index":771,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["inject",{"_index":1106,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"injectables/FileRequestFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessContorlService.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["injectrepository(answer",{"_index":1863,"title":{},"body":{"injectables/QuizService.html":{}}}],["injectrepository(answeroption",{"_index":1862,"title":{},"body":{"injectables/QuizService.html":{}}}],["injectrepository(category",{"_index":676,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["injectrepository(course",{"_index":885,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["injectrepository(enroll",{"_index":1301,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["injectrepository(lesson",{"_index":1573,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["injectrepository(question",{"_index":1861,"title":{},"body":{"injectables/QuizService.html":{}}}],["injectrepository(quiz",{"_index":1574,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["injectrepository(user",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EnrollsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["injectrepository(usercategory",{"_index":1990,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["installation",{"_index":2192,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2194,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1138,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["instructor",{"_index":1320,"title":{},"body":{"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"miscellaneous/enumerations.html":{}}}],["instructor.sub",{"_index":1321,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["instructorgetenrollscourses",{"_index":1289,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["int",{"_index":1497,"title":{},"body":{"entities/Lesson.html":{}}}],["intercept",{"_index":1151,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["intercept(context",{"_index":1152,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["interface",{"_index":61,"title":{"interfaces/AssociativeArray.html":{},"interfaces/Config.html":{},"interfaces/IsAuthorizedParams.html":{},"interfaces/Request.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IsAuthorizedParams.html":{},"interfaces/Request.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["interfaces",{"_index":228,"title":{},"body":{"interfaces/AssociativeArray.html":{},"interfaces/Config.html":{},"interfaces/IsAuthorizedParams.html":{},"interfaces/Request.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"overview.html":{}}}],["internal",{"_index":1168,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["irequest",{"_index":1117,"title":{"classes/IRequest.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["iresponsedata",{"_index":1111,"title":{"classes/IResponseData.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["isarray",{"_index":1034,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["isauthorized",{"_index":17,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["isauthorized(undefined",{"_index":49,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["isauthorizedparams",{"_index":47,"title":{"interfaces/IsAuthorizedParams.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["isboolean",{"_index":1895,"title":{},"body":{"classes/ResponseDto.html":{}}}],["iscorrect",{"_index":1025,"title":{},"body":{"classes/CreateQuizDto.html":{},"injectables/QuizService.html":{}}}],["isemail",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["isemail(username",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemailexists",{"_index":2043,"title":{},"body":{"injectables/UserService.html":{}}}],["isenum",{"_index":1010,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["isenum(lessontype",{"_index":1015,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["isfree",{"_index":739,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["isglobal",{"_index":1181,"title":{},"body":{"modules/DbModule.html":{}}}],["isin",{"_index":236,"title":{},"body":{"interfaces/AssociativeArray.html":{}}}],["isin(key",{"_index":252,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":561,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["isnumber",{"_index":934,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{}}}],["isnumber({allownan",{"_index":1688,"title":{},"body":{"classes/OTPDto.html":{}}}],["isoptional",{"_index":959,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/ResponseDto.html":{}}}],["ispasswordmatch",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":1063,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["isphonenumber('rw",{"_index":1073,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["ispublished",{"_index":991,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["isstring",{"_index":562,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty({message",{"_index":1049,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring({message",{"_index":927,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isusernameexists",{"_index":2045,"title":{},"body":{"injectables/UserService.html":{}}}],["items",{"_index":803,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["iurl",{"_index":1710,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["iurl.searchparams.get('limit",{"_index":1713,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["iurl.searchparams.get('page",{"_index":1715,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["john",{"_index":1016,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["john_doe",{"_index":1058,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["johndoe",{"_index":1048,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["join",{"_index":1660,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1672,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":1225,"title":{},"body":{"entities/Enroll.html":{}}}],["jointable",{"_index":1226,"title":{},"body":{"entities/Enroll.html":{}}}],["json",{"_index":1631,"title":{},"body":{"classes/Logger.html":{}}}],["jsonb",{"_index":1489,"title":{},"body":{"entities/Lesson.html":{}}}],["jwt",{"_index":1469,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":1474,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"modules/UserModule.html":{}}}],["jwtstrategy",{"_index":376,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2225,"title":{},"body":{"index.html":{}}}],["key",{"_index":231,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["keys",{"_index":247,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["kigali",{"_index":1087,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["kind",{"_index":2272,"title":{},"body":{"license.html":{}}}],["label",{"_index":90,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["lang",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules/I18nConfigModule.html":{},"injectables/LanguageMiddleware.html":{},"injectables/UserService.html":{}}}],["languagemiddleware",{"_index":211,"title":{"injectables/LanguageMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["large",{"_index":2359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":1367,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["learning",{"_index":2310,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["leason",{"_index":1002,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["leftjoinandselect('course.creator",{"_index":1597,"title":{},"body":{"injectables/LessonsService.html":{}}}],["leftjoinandselect('enroll.course",{"_index":1312,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["leftjoinandselect('lesson.course",{"_index":1590,"title":{},"body":{"injectables/LessonsService.html":{}}}],["legend",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["lesson",{"_index":113,"title":{"entities/Lesson.html":{}},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{}}}],["lesson.contenturl",{"_index":1607,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson.dto",{"_index":1534,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateLessonDto.html":{}}}],["lesson.dto.ts",{"_index":988,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["lesson.dto.ts:14",{"_index":1005,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:19",{"_index":998,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:26",{"_index":1009,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:34",{"_index":996,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:40",{"_index":1000,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:50",{"_index":994,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:59",{"_index":1001,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:63",{"_index":1340,"title":{},"body":{"classes/FilesDTO.html":{}}}],["lesson.dto.ts:64",{"_index":1341,"title":{},"body":{"classes/FilesDTO.html":{}}}],["lesson.id",{"_index":761,"title":{},"body":{"entities/Course.html":{}}}],["lesson.quiz",{"_index":126,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["lesson.thumbnail",{"_index":1608,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson/${files.content_url[0]?.filename",{"_index":1582,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson/${files.thumbnail[0]?.filename",{"_index":1583,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson_slug",{"_index":1523,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["lessonid",{"_index":1836,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{}}}],["lessonquery",{"_index":1588,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lessonrepository",{"_index":1564,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["lessons",{"_index":740,"title":{},"body":{"entities/Course.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/swaggerConfig.html":{}}}],["lessons.controller",{"_index":1554,"title":{},"body":{"modules/LessonsModule.html":{}}}],["lessons.service",{"_index":1533,"title":{},"body":{"controllers/LessonsController.html":{},"modules/LessonsModule.html":{}}}],["lessons/entities/lesson.entity",{"_index":1852,"title":{},"body":{"modules/QuizModule.html":{},"injectables/QuizService.html":{}}}],["lessonscontroller",{"_index":1510,"title":{"controllers/LessonsController.html":{}},"body":{"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"coverage.html":{}}}],["lessonsmodule",{"_index":192,"title":{"modules/LessonsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LessonsModule.html":{},"modules.html":{},"overview.html":{}}}],["lessonsservice",{"_index":1532,"title":{"injectables/LessonsService.html":{}},"body":{"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"coverage.html":{},"overview.html":{}}}],["lessontype",{"_index":1006,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["lessontype.pdf",{"_index":1014,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["level",{"_index":1613,"title":{},"body":{"classes/Logger.html":{}}}],["liability",{"_index":2287,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2284,"title":{},"body":{"license.html":{}}}],["lib",{"_index":1709,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["license",{"_index":2231,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2208,"title":{},"body":{"index.html":{}}}],["limit",{"_index":253,"title":{},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["limitation",{"_index":2249,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2274,"title":{},"body":{"license.html":{}}}],["line",{"_index":833,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["link",{"_index":239,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["link.charat(0",{"_index":243,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":43,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["listed",{"_index":1013,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/FilesDTO.html":{}}}],["listed'})@isstring()@isnotempty({message",{"_index":1004,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["literal",{"_index":578,"title":{},"body":{"controllers/CategoryController.html":{},"interfaces/Config.html":{},"controllers/CoursesController.html":{},"classes/CreateQuizDto.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"injectables/UserCategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":1182,"title":{},"body":{"modules/DbModule.html":{}}}],["loaderoptions",{"_index":1447,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["lodash",{"_index":1393,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["logger",{"_index":1179,"title":{"classes/Logger.html":{}},"body":{"modules/DbModule.html":{},"classes/Logger.html":{},"coverage.html":{}}}],["logger.logger.error(`failed",{"_index":1206,"title":{},"body":{"modules/DbModule.html":{}}}],["logger.logger.log(`database",{"_index":1204,"title":{},"body":{"modules/DbModule.html":{}}}],["logging",{"_index":1451,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["login",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithgoogle",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":2370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logoutdecorator",{"_index":2114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logs/%date",{"_index":1619,"title":{},"body":{"classes/Logger.html":{}}}],["lts.1",{"_index":2157,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":709,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["mail.service",{"_index":1655,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule",{"_index":1656,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forroot",{"_index":1662,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1681,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":193,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mails/mail.module",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["mails/mail.service",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailservice",{"_index":408,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["manage",{"_index":2313,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["manager",{"_index":1576,"title":{},"body":{"injectables/LessonsService.html":{}}}],["manager.getrepository(lesson",{"_index":1577,"title":{},"body":{"injectables/LessonsService.html":{}}}],["manager.save(lesson",{"_index":1586,"title":{},"body":{"injectables/LessonsService.html":{}}}],["manytoone",{"_index":108,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/UserCategory.html":{}}}],["manytoone(undefined",{"_index":99,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Question.html":{},"entities/UserCategory.html":{}}}],["map",{"_index":72,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CustomResponseInterceptor.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["map((data",{"_index":1160,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["matches",{"_index":1062,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["matches(/^[a",{"_index":1079,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["matching",{"_index":84,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchroles",{"_index":325,"title":{},"body":{"guards/AuthGuard.html":{}}}],["matchroles(roles",{"_index":337,"title":{},"body":{"guards/AuthGuard.html":{}}}],["math.floor(100000",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.floor(date.now",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.random",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxcount",{"_index":632,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["maxdecimalplaces",{"_index":941,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["maxfiles",{"_index":1628,"title":{},"body":{"classes/Logger.html":{}}}],["maxlength",{"_index":1060,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["maxlength(50",{"_index":1069,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["maxsize",{"_index":1626,"title":{},"body":{"classes/Logger.html":{}}}],["mcqs",{"_index":138,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["mentor",{"_index":2184,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["merchantability",{"_index":2276,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2252,"title":{},"body":{"license.html":{}}}],["message",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/LessonsService.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1229,"title":{},"body":{"entities/Enroll.html":{},"injectables/FileRequestFilter.html":{},"dependencies.html":{}}}],["metadata.data",{"_index":1336,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["metadata.type",{"_index":1335,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["method",{"_index":24,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["metrics",{"_index":1771,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["middlewareconsumer",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewares",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}}}],["minlength",{"_index":1061,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["minlength(6",{"_index":1077,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["miscellaneous",{"_index":2176,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2207,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":1623,"title":{},"body":{"classes/Logger.html":{}}}],["mode",{"_index":2197,"title":{},"body":{"index.html":{}}}],["modify",{"_index":2251,"title":{},"body":{"license.html":{}}}],["module",{"_index":152,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticateMiddleware.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"interfaces/Request.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":179,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/category/category.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/category/entities/category.entity",{"_index":778,"title":{},"body":{"entities/Course.html":{},"entities/UserCategory.html":{}}}],["modules/courses/courses.module",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/courses/entities/course.entity",{"_index":1227,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["modules/enrolls/enrolls.module",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/enrolls/entities/enroll.entity",{"_index":779,"title":{},"body":{"entities/Course.html":{}}}],["modules/lessons/entities/lesson.entity",{"_index":114,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["modules/lessons/lessons.module",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":1657,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":1659,"title":{},"body":{"modules/MailModule.html":{}}}],["modules/mails/mail.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/prometheus/prometheus.module",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/quiz/entities/quiz.entity",{"_index":1506,"title":{},"body":{"entities/Lesson.html":{}}}],["modules/quiz/quiz.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"entities/Category.html":{},"entities/User.html":{}}}],["modules/user/entities/user.entity",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/UserCategory.html":{}}}],["more",{"_index":2220,"title":{},"body":{"index.html":{}}}],["multer",{"_index":2155,"title":{},"body":{"dependencies.html":{}}}],["multiple_choice",{"_index":118,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"miscellaneous/enumerations.html":{}}}],["myśliwiec",{"_index":2226,"title":{},"body":{"index.html":{}}}],["name",{"_index":37,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":1368,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":1366,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.tolowercase",{"_index":705,"title":{},"body":{"injectables/CategoryService.html":{}}}],["ndacyayisenga",{"_index":2234,"title":{},"body":{"license.html":{}}}],["nest",{"_index":1650,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{},"index.html":{}}}],["nested",{"_index":2097,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["nestframework",{"_index":2230,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1150,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["nestjs",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"modules/I18nConfigModule.html":{},"classes/ImagePicDto.html":{},"injectables/LanguageMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"classes/ProfileDto.html":{},"injectables/PrometheusService.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":1178,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":341,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":623,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"controllers/LessonsController.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":524,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"interfaces/Request.html":{}}}],["nestmodule",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":73,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CoursesController.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":521,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"controllers/CoursesController.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LanguageMiddleware.html":{},"controllers/ProfileController.html":{},"interfaces/Request.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["next.handle().pipe",{"_index":1159,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["nextfunction",{"_index":522,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"interfaces/Request.html":{}}}],["nodemailer",{"_index":2161,"title":{},"body":{"dependencies.html":{}}}],["noninfringement",{"_index":2280,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2265,"title":{},"body":{"license.html":{}}}],["null",{"_index":363,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":122,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["number",{"_index":55,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"controllers/CoursesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/ForgetPasswordDto.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{}}}],["number'})@apiquery({name",{"_index":802,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/UserController.html":{}}}],["number(decoded.otp",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth20",{"_index":1357,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object.entries",{"_index":1411,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["object.keys(filters",{"_index":248,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.constraints",{"_index":1430,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["observable",{"_index":345,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{}}}],["obtaining",{"_index":2242,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":1144,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["offset",{"_index":254,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["ondelete",{"_index":101,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["one",{"_index":34,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["onetomany",{"_index":109,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["onetomany(undefined",{"_index":1820,"title":{},"body":{"entities/Question.html":{},"entities/Quiz.html":{}}}],["onetoone",{"_index":110,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["onetoone(undefined",{"_index":744,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{},"entities/Quiz.html":{}}}],["open",{"_index":2209,"title":{},"body":{"index.html":{}}}],["option",{"_index":133,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["option.question",{"_index":134,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["optional",{"_index":39,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":135,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"modules/I18nConfigModule.html":{},"modules/MailModule.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["orderby('lesson.position",{"_index":1593,"title":{},"body":{"injectables/LessonsService.html":{}}}],["orderby('users.created_at",{"_index":2065,"title":{},"body":{"injectables/UserService.html":{}}}],["otherwise",{"_index":2292,"title":{},"body":{"license.html":{}}}],["otp",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["otp.otp",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["otp/:token",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["otpdto",{"_index":291,"title":{"classes/OTPDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["out",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2300,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2133,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":255,"title":{},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["paginate",{"_index":1707,"title":{},"body":{"injectables/PaginateHelper.html":{},"dependencies.html":{}}}],["paginate(query",{"_index":1716,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["paginatehelper",{"_index":869,"title":{"injectables/PaginateHelper.html":{}},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["pagination",{"_index":1562,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{}}}],["paginationtype",{"_index":1717,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["paginationtypeenum",{"_index":1708,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["paginationtypeenum.take_and_skip",{"_index":1718,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["param",{"_index":70,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["param('course_slug",{"_index":1544,"title":{},"body":{"controllers/LessonsController.html":{}}}],["param('courseid",{"_index":1272,"title":{},"body":{"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{}}}],["param('id",{"_index":642,"title":{},"body":{"controllers/CategoryController.html":{}}}],["param('lessonid",{"_index":1846,"title":{},"body":{"controllers/QuizController.html":{}}}],["param('slug",{"_index":848,"title":{},"body":{"controllers/CoursesController.html":{}}}],["param('token",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":35,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.mail_port",{"_index":728,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["parseint(process.env.port",{"_index":716,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":822,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["parseuuidpipe",{"_index":613,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/LessonsController.html":{}}}],["partial",{"_index":1232,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["partialtype",{"_index":1064,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1912,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createcoursedto",{"_index":1914,"title":{},"body":{"classes/UpdateCourseDto.html":{}}}],["partialtype(createlessondto",{"_index":1916,"title":{},"body":{"classes/UpdateLessonDto.html":{}}}],["partialtype(createquizdto",{"_index":1918,"title":{},"body":{"classes/UpdateQuizDto.html":{}}}],["partialtype(createusercategorydto",{"_index":1921,"title":{},"body":{"classes/UpdateUserCategoryDto.html":{}}}],["partialtype(createuserdto",{"_index":1083,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(iresponsedata",{"_index":1118,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["particular",{"_index":2278,"title":{},"body":{"license.html":{}}}],["pass",{"_index":715,"title":{},"body":{"interfaces/Config.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":1356,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1355,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1346,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["password/:token",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["passworddto",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":607,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserController.html":{}}}],["patch('/:courseid/status",{"_index":1277,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["patch(':id",{"_index":641,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["patch(':id/status",{"_index":647,"title":{},"body":{"controllers/CategoryController.html":{}}}],["patch(':slug",{"_index":847,"title":{},"body":{"controllers/CoursesController.html":{}}}],["patch('profile",{"_index":1759,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["patch('profile')@apiconsumes('multipart/form",{"_index":1733,"title":{},"body":{"controllers/ProfileController.html":{}}}],["path",{"_index":1114,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"modules/MailModule.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"miscellaneous/typealiases.html":{}}}],["path.join",{"_index":1454,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["path.join(__dirname",{"_index":1448,"title":{},"body":{"modules/I18nConfigModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserCategoryController.html":{}}}],["payload.role",{"_index":1479,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1478,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1508,"title":{},"body":{"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["per",{"_index":804,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["permission",{"_index":2236,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2259,"title":{},"body":{"license.html":{}}}],["person",{"_index":2241,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2260,"title":{},"body":{"license.html":{}}}],["pg",{"_index":2166,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["phoneexists",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos",{"_index":1363,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1369,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":1085,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["pipetransform",{"_index":1333,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["please",{"_index":2218,"title":{},"body":{"index.html":{}}}],["port",{"_index":710,"title":{},"body":{"interfaces/Config.html":{},"modules/DbModule.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":2269,"title":{},"body":{"license.html":{}}}],["position",{"_index":1488,"title":{},"body":{"entities/Lesson.html":{},"injectables/LessonsService.html":{}}}],["post",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["post('/:courseid",{"_index":1270,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["post('/forget",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/reset",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/verify",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':lessonid",{"_index":1845,"title":{},"body":{"controllers/QuizController.html":{}}}],["postgres",{"_index":1189,"title":{},"body":{"modules/DbModule.html":{},"dependencies.html":{}}}],["precision",{"_index":764,"title":{},"body":{"entities/Course.html":{}}}],["prefix",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"interfaces/Config.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["price",{"_index":741,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["primarycolumn",{"_index":95,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["priority",{"_index":12,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{}}}],["privileged",{"_index":32,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["process.env.backend_domain",{"_index":241,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["process.env.backend_domain}/uploads/${filename",{"_index":2343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.google_callback_url",{"_index":721,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.google_client_id",{"_index":719,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.google_client_secret",{"_index":720,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":718,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_from",{"_index":731,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_host",{"_index":723,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_pass",{"_index":726,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_user",{"_index":725,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.prefix",{"_index":242,"title":{},"body":{"interfaces/AssociativeArray.html":{},"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":2199,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1084,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/UserController.html":{}}}],["profile'})@apibearerauth()@roles(rolesenum.all)@useguards(authguard)@get",{"_index":1729,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile_picture",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profilecontroller",{"_index":1719,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["profiledto",{"_index":1081,"title":{"classes/ProfileDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["project",{"_index":2210,"title":{},"body":{"index.html":{}}}],["prom",{"_index":1799,"title":{},"body":{"injectables/PrometheusService.html":{},"dependencies.html":{}}}],["prometheus",{"_index":1789,"title":{},"body":{"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"dependencies.html":{}}}],["prometheus.controller",{"_index":1786,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheus.service",{"_index":1776,"title":{},"body":{"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{}}}],["prometheuscontroller",{"_index":1769,"title":{"controllers/PrometheusController.html":{}},"body":{"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"coverage.html":{}}}],["prometheusmodule",{"_index":194,"title":{"modules/PrometheusModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrometheusModule.html":{},"modules.html":{},"overview.html":{}}}],["prometheusmodules",{"_index":1787,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheusmodules.register",{"_index":1790,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheusservice",{"_index":1775,"title":{"injectables/PrometheusService.html":{}},"body":{"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":336,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"entities/Category.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"entities/Lesson.html":{},"classes/Logger.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"classes/ProfileDto.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"properties.html":{},"classes/swaggerConfig.html":{}}}],["protected",{"_index":658,"title":{},"body":{"injectables/CategoryService.html":{}}}],["provide",{"_index":1909,"title":{},"body":{"modules/SharedModule.html":{}}}],["provided",{"_index":2270,"title":{},"body":{"license.html":{}}}],["providers",{"_index":176,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":15,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/Logger.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"classes/ValidationException.html":{},"classes/swaggerConfig.html":{}}}],["publish",{"_index":2253,"title":{},"body":{"license.html":{}}}],["pugadapter",{"_index":1675,"title":{},"body":{"modules/MailModule.html":{}}}],["purpose",{"_index":2279,"title":{},"body":{"license.html":{}}}],["put",{"_index":820,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["put('/:courseid",{"_index":1274,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["put(':id/role",{"_index":1749,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["put('change",{"_index":851,"title":{},"body":{"controllers/CoursesController.html":{}}}],["q",{"_index":245,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["q.alias",{"_index":250,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["q.andwhere(`${alias}.createdat",{"_index":257,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":612,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":840,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('page",{"_index":838,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('role",{"_index":1751,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('status",{"_index":853,"title":{},"body":{"controllers/CoursesController.html":{}}}],["queryfailederror",{"_index":1811,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":1805,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryresolver",{"_index":1441,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["question",{"_index":91,"title":{"entities/Question.html":{}},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{}}}],["question.correctanswers",{"_index":1866,"title":{},"body":{"injectables/QuizService.html":{}}}],["question.options",{"_index":100,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["question.quiz",{"_index":124,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["question.text",{"_index":1870,"title":{},"body":{"injectables/QuizService.html":{}}}],["question.type",{"_index":1871,"title":{},"body":{"injectables/QuizService.html":{}}}],["questionrepository",{"_index":1856,"title":{},"body":{"injectables/QuizService.html":{}}}],["questions",{"_index":125,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["questiontype",{"_index":116,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"miscellaneous/enumerations.html":{}}}],["questiontype.single_choice",{"_index":1024,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["questiontype.text",{"_index":1027,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz",{"_index":119,"title":{"entities/Quiz.html":{}},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Lesson.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["quiz.controller",{"_index":1851,"title":{},"body":{"modules/QuizModule.html":{}}}],["quiz.dto",{"_index":1841,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/UpdateQuizDto.html":{}}}],["quiz.dto.ts",{"_index":1019,"title":{},"body":{"classes/CreateQuizDto.html":{},"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["quiz.dto.ts:14",{"_index":1020,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz.dto.ts:34",{"_index":1021,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz.dto.ts:9",{"_index":1022,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz.questions",{"_index":132,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["quiz.service",{"_index":1840,"title":{},"body":{"controllers/QuizController.html":{},"modules/QuizModule.html":{}}}],["quiz/entities/quiz.entity",{"_index":1555,"title":{},"body":{"modules/LessonsModule.html":{},"injectables/LessonsService.html":{}}}],["quizcontroller",{"_index":1832,"title":{"controllers/QuizController.html":{}},"body":{"controllers/QuizController.html":{},"modules/QuizModule.html":{},"coverage.html":{}}}],["quizid",{"_index":1565,"title":{},"body":{"injectables/LessonsService.html":{}}}],["quizmodule",{"_index":195,"title":{"modules/QuizModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuizModule.html":{},"modules.html":{},"overview.html":{}}}],["quizrepository",{"_index":1859,"title":{},"body":{"injectables/QuizService.html":{}}}],["quizservice",{"_index":1839,"title":{"injectables/QuizService.html":{}},"body":{"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{},"overview.html":{}}}],["quizzesrepository",{"_index":1560,"title":{},"body":{"injectables/LessonsService.html":{}}}],["r",{"_index":1396,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.error",{"_index":1406,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.message",{"_index":1401,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.message[0",{"_index":1399,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.statuscode",{"_index":1405,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["read",{"_index":2219,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":162,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/swaggerConfig.html":{}}}],["record",{"_index":582,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/HttpExceptionFilter.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{},"classes/ResponseDto.html":{},"interfaces/ValidationResponse.html":{}}}],["reflect",{"_index":1228,"title":{},"body":{"entities/Enroll.html":{},"dependencies.html":{}}}],["reflector",{"_index":329,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["refresh_token",{"_index":1924,"title":{},"body":{"entities/User.html":{}}}],["regexp(/https",{"_index":2341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":1794,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["regix",{"_index":2340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regix.test(filename",{"_index":2342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations",{"_index":910,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["relationship",{"_index":128,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["remove",{"_index":572,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":645,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":596,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(undefined",{"_index":1988,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["removefile",{"_index":675,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["removefile(category.icon_url",{"_index":697,"title":{},"body":{"injectables/CategoryService.html":{}}}],["removefile(course.thumbnail",{"_index":920,"title":{},"body":{"injectables/CoursesService.html":{}}}],["removefile(files.icon_url[0].filename",{"_index":679,"title":{},"body":{"injectables/CategoryService.html":{}}}],["removefile(files.thumbnail_url[0].filename",{"_index":889,"title":{},"body":{"injectables/CoursesService.html":{}}}],["removefile(lesson.contenturl",{"_index":1602,"title":{},"body":{"injectables/LessonsService.html":{}}}],["removefile(lesson.thumbnail",{"_index":1604,"title":{},"body":{"injectables/LessonsService.html":{}}}],["removefile(user.profile_picture",{"_index":2083,"title":{},"body":{"injectables/UserService.html":{}}}],["removewhitespace",{"_index":2130,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["removewhitespace(name",{"_index":2338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace",{"_index":2074,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["replace(/[^\\w",{"_index":2334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace(/[^a",{"_index":2076,"title":{},"body":{"injectables/UserService.html":{}}}],["replace(/\\s/g",{"_index":2078,"title":{},"body":{"injectables/UserService.html":{}}}],["reply",{"_index":730,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PaginateHelper.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":526,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["req.headers['x",{"_index":1484,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["req.user",{"_index":530,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["req.user.email",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.firstname",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.lastname",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.picture",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":342,"title":{"interfaces/Request.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PaginateHelper.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.filter.ts",{"_index":1325,"title":{},"body":{"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{}}}],["request.filter.ts:11",{"_index":1332,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["request.filter.ts:19",{"_index":1376,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:20",{"_index":1377,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:22",{"_index":1383,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:41",{"_index":1380,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:58",{"_index":1386,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:9",{"_index":1328,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["request.url",{"_index":1163,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["request.user",{"_index":366,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["requestid",{"_index":1115,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{}}}],["require_tld",{"_index":1042,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["required",{"_index":589,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{}}}],["requiredpriority",{"_index":80,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["requiredrole",{"_index":63,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["requiredroles",{"_index":356,"title":{},"body":{"guards/AuthGuard.html":{}}}],["res",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"controllers/PrometheusController.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["res.send(metrics",{"_index":1782,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["res.setheader('content",{"_index":1780,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["res.status(200).json",{"_index":2369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(payload",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassworddto",{"_index":285,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resolvers",{"_index":1456,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["resources",{"_index":2315,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["response",{"_index":343,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/PrometheusController.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["response(result",{"_index":1123,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["response.category.category_created_successfully",{"_index":687,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.category.category_deleted_successfully",{"_index":703,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.category.category_status_updated_successfully",{"_index":707,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.category.category_updated_successfully",{"_index":701,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.dto",{"_index":1110,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["response.message",{"_index":1161,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":1816,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":1147,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["response.status(statuscode).json(formattederrors",{"_index":1408,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["response.statuscode",{"_index":1158,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["responsedto",{"_index":1109,"title":{"classes/ResponseDto.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["responseservice",{"_index":151,"title":{"injectables/ResponseService.html":{}},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["responseservices",{"_index":331,"title":{},"body":{"guards/AuthGuard.html":{}}}],["restriction",{"_index":2247,"title":{},"body":{"license.html":{}}}],["result",{"_index":1141,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.data",{"_index":1129,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.key",{"_index":1128,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.message",{"_index":1132,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.requestid",{"_index":1131,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.statuscode",{"_index":1127,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.success",{"_index":1126,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["results",{"_index":83,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/JwtStrategy.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":44,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rfw",{"_index":785,"title":{},"body":{"entities/Course.html":{}}}],["rights",{"_index":2250,"title":{},"body":{"license.html":{}}}],["role",{"_index":22,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":69,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["role.all",{"_index":351,"title":{},"body":{"guards/AuthGuard.html":{}}}],["role.user",{"_index":68,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["role_key",{"_index":347,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":31,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"controllers/EnrollsController.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(rolesenum.admin",{"_index":628,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["roles(rolesenum.all",{"_index":1756,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["roles.foreach((role",{"_index":74,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["roles.some((role",{"_index":350,"title":{},"body":{"guards/AuthGuard.html":{}}}],["roles.user",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["roles[role",{"_index":2051,"title":{},"body":{"injectables/UserService.html":{}}}],["rolesenum",{"_index":59,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"controllers/EnrollsController.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["rolesenum.all",{"_index":1262,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@get('courses",{"_index":1253,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@patch('/:courseid/status",{"_index":1243,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@put('/:courseid",{"_index":1256,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@useguards(authguard)@post('/:courseid",{"_index":1247,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.instructor",{"_index":629,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{}}}],["rolesenum.instructor)@apiconsumes('multipart/form",{"_index":817,"title":{},"body":{"controllers/CoursesController.html":{}}}],["rolesenum.instructor)@apiquery({name",{"_index":791,"title":{},"body":{"controllers/CoursesController.html":{}}}],["rolesenum.instructor)@delete(':id",{"_index":813,"title":{},"body":{"controllers/CoursesController.html":{}}}],["rolesenum.instructor)@get(':course_slug/instructor')@apiquery({name",{"_index":1525,"title":{},"body":{"controllers/LessonsController.html":{}}}],["rolesenum.instructor)@patch(':id')@apiconsumes('multipart/form",{"_index":1529,"title":{},"body":{"controllers/LessonsController.html":{}}}],["rolesenum.instructor)@post(':lessonid')@apiacceptedresponse({description",{"_index":1837,"title":{},"body":{"controllers/QuizController.html":{}}}],["rolesenum.instructor)@post()@apiconsumes('multipart/form",{"_index":797,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{}}}],["rolesenum.instructor)@post()@version('1')@apiconsumes('multipart/form",{"_index":580,"title":{},"body":{"controllers/CategoryController.html":{}}}],["rolesenum.mentor",{"_index":1266,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.mentor)@useguards(authguard)@get('instructor",{"_index":1250,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.user",{"_index":1966,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["rotate",{"_index":1648,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["route",{"_index":1124,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["route.path",{"_index":1130,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["run",{"_index":1693,"title":{},"body":{"injectables/PaginateHelper.html":{},"index.html":{}}}],["run(query",{"_index":1700,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["rwanda",{"_index":1088,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["rxjs",{"_index":346,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1157,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["savedlesson",{"_index":1585,"title":{},"body":{"injectables/LessonsService.html":{}}}],["savedquestions",{"_index":1872,"title":{},"body":{"injectables/QuizService.html":{}}}],["savedquiz",{"_index":1874,"title":{},"body":{"injectables/QuizService.html":{}}}],["scale",{"_index":765,"title":{},"body":{"entities/Course.html":{}}}],["scope",{"_index":1105,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["scope.default",{"_index":1121,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["scope.request",{"_index":1119,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["scope.transient",{"_index":1120,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["secret",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"injectables/JwtStrategy.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1477,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1665,"title":{},"body":{"modules/MailModule.html":{}}}],["seen",{"_index":1385,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{}}}],["seen.add(error",{"_index":1427,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["seen.has(error",{"_index":1426,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["select",{"_index":2055,"title":{},"body":{"injectables/UserService.html":{}}}],["selectquerybuilder",{"_index":233,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/PaginateHelper.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":2257,"title":{},"body":{"license.html":{}}}],["sendforgotpasswordemail",{"_index":1679,"title":{},"body":{"injectables/MailService.html":{}}}],["sendforgotpasswordemail(email",{"_index":1683,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["sentry",{"_index":1725,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["sentry/cli",{"_index":2141,"title":{},"body":{"dependencies.html":{}}}],["sentry/nestjs",{"_index":2143,"title":{},"body":{"dependencies.html":{}}}],["sentry/nestjs/setup",{"_index":1907,"title":{},"body":{"modules/SharedModule.html":{}}}],["sentryglobalfilter",{"_index":1905,"title":{},"body":{"modules/SharedModule.html":{}}}],["sentrymodule",{"_index":1906,"title":{},"body":{"modules/SharedModule.html":{}}}],["sentrymodule.forroot",{"_index":1908,"title":{},"body":{"modules/SharedModule.html":{}}}],["server",{"_index":1169,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["service",{"_index":2318,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["set",{"_index":30,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LessonsService.html":{}}}],["setlimit",{"_index":1694,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["setlimit(limit",{"_index":1702,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["setmetadata(role_key",{"_index":2371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setpage",{"_index":1695,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["setpage(page",{"_index":1704,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["shall",{"_index":2266,"title":{},"body":{"license.html":{}}}],["shared",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["sharedmodule",{"_index":196,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["signoptions",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":136,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["single_choice",{"_index":117,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"miscellaneous/enumerations.html":{}}}],["slug",{"_index":742,"title":{},"body":{"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["smtp.gmail.com",{"_index":724,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":1091,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["specified",{"_index":29,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["sponsors",{"_index":2213,"title":{},"body":{"index.html":{}}}],["src/.../auth",{"_index":2333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.guard.ts",{"_index":2325,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../config.ts",{"_index":2328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helper.ts",{"_index":2330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../i18n.generated.ts",{"_index":2326,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../lesson.entity.ts",{"_index":2178,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../lib.ts",{"_index":2329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logout.decorator.ts",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../quiz.entity.ts",{"_index":2179,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.ts",{"_index":2180,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../validation.exception.ts",{"_index":2187,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:36",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["src/configs/config.ts",{"_index":708,"title":{},"body":{"interfaces/Config.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configs/db.module.ts",{"_index":1173,"title":{},"body":{"modules/DbModule.html":{}}}],["src/configs/db.module.ts:35",{"_index":1175,"title":{},"body":{"modules/DbModule.html":{}}}],["src/configs/i18n.module.ts",{"_index":1438,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["src/configs/swagger.ts",{"_index":2108,"title":{},"body":{"coverage.html":{},"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:2",{"_index":2320,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:3",{"_index":2322,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:4",{"_index":2316,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:6",{"_index":2319,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/decorators/auth",{"_index":2111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/logout.decorator.ts",{"_index":2113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":2115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/enums/roles.ts",{"_index":2181,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/filters/bad",{"_index":1372,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{}}}],["src/filters/file",{"_index":1324,"title":{},"body":{"injectables/FileRequestFilter.html":{},"coverage.html":{}}}],["src/filters/query",{"_index":1806,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/generated/i18n.generated.ts",{"_index":1455,"title":{},"body":{"modules/I18nConfigModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/guards/auth.guard.ts",{"_index":322,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/guards/auth.guard.ts:16",{"_index":330,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guards/auth.guard.ts:22",{"_index":339,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guards/auth.guard.ts:28",{"_index":334,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/interceptors/response.interceptor.ts",{"_index":1149,"title":{},"body":{"classes/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/response.interceptor.ts:7",{"_index":1154,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["src/main.ts",{"_index":2120,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/authenticate.middleware.ts",{"_index":516,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/middlewares/authenticate.middleware.ts:11",{"_index":519,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{}}}],["src/middlewares/authenticate.middleware.ts:17",{"_index":523,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{}}}],["src/middlewares/language.middleware.ts",{"_index":1480,"title":{},"body":{"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/language.middleware.ts:6",{"_index":1482,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["src/middlewares/language.middleware.ts:8",{"_index":1483,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:26",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:38",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:43",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:48",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:53",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:113",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:116",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:120",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:127",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:134",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:164",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:20",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:226",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:269",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:30",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:317",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:66",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:78",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/create",{"_index":925,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/entities/auth.entity.ts",{"_index":260,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/modules/category/category.controller.ts",{"_index":569,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/modules/category/category.controller.ts:115",{"_index":598,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:124",{"_index":606,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:58",{"_index":586,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:75",{"_index":592,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:80",{"_index":595,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:99",{"_index":603,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.module.ts",{"_index":653,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/modules/category/category.service.ts",{"_index":657,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/modules/category/category.service.ts:112",{"_index":674,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:12",{"_index":662,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:162",{"_index":673,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:197",{"_index":665,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:209",{"_index":667,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:22",{"_index":669,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:64",{"_index":671,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:77",{"_index":672,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/dto/create",{"_index":946,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"coverage.html":{}}}],["src/modules/category/dto/update",{"_index":1911,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/modules/category/entities/category.entity.ts",{"_index":535,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/modules/category/entities/category.entity.ts:24",{"_index":551,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:29",{"_index":553,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:34",{"_index":549,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:37",{"_index":554,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:42",{"_index":550,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:46",{"_index":544,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:50",{"_index":556,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:54",{"_index":546,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:57",{"_index":559,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/courses/courses.controller.ts",{"_index":787,"title":{},"body":{"controllers/CoursesController.html":{},"coverage.html":{}}}],["src/modules/courses/courses.controller.ts:122",{"_index":819,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:137",{"_index":814,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:146",{"_index":794,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:58",{"_index":799,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:82",{"_index":805,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:94",{"_index":809,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:98",{"_index":812,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.module.ts",{"_index":859,"title":{},"body":{"modules/CoursesModule.html":{}}}],["src/modules/courses/courses.service.ts",{"_index":864,"title":{},"body":{"injectables/CoursesService.html":{},"coverage.html":{}}}],["src/modules/courses/courses.service.ts:114",{"_index":879,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:137",{"_index":881,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:195",{"_index":880,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:21",{"_index":870,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:231",{"_index":874,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:241",{"_index":872,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:274",{"_index":878,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:33",{"_index":875,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:91",{"_index":876,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/dto/create",{"_index":964,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"coverage.html":{}}}],["src/modules/courses/dto/update",{"_index":1913,"title":{},"body":{"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["src/modules/courses/entities/course.entity.ts",{"_index":733,"title":{},"body":{"entities/Course.html":{},"coverage.html":{}}}],["src/modules/courses/entities/course.entity.ts:100",{"_index":747,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:103",{"_index":777,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:106",{"_index":752,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:30",{"_index":758,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:35",{"_index":776,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:45",{"_index":773,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:53",{"_index":754,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:58",{"_index":775,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:66",{"_index":767,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:75",{"_index":751,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:78",{"_index":759,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:81",{"_index":774,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:84",{"_index":757,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:87",{"_index":748,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:90",{"_index":756,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:93",{"_index":746,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:97",{"_index":762,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/default/default.module.ts",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"coverage.html":{}}}],["src/modules/default/default.module.ts:13",{"_index":1211,"title":{},"body":{"injectables/DefaultService.html":{}}}],["src/modules/default/default.module.ts:33",{"_index":150,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/default/default.module.ts:8",{"_index":1210,"title":{},"body":{"injectables/DefaultService.html":{}}}],["src/modules/enrolls/enrolls.controller.ts",{"_index":1234,"title":{},"body":{"controllers/EnrollsController.html":{},"coverage.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:16",{"_index":1254,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:23",{"_index":1251,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:31",{"_index":1248,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:39",{"_index":1257,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:47",{"_index":1244,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.module.ts",{"_index":1283,"title":{},"body":{"modules/EnrollsModule.html":{}}}],["src/modules/enrolls/enrolls.service.ts",{"_index":1288,"title":{},"body":{"injectables/EnrollsService.html":{},"coverage.html":{}}}],["src/modules/enrolls/enrolls.service.ts:102",{"_index":1298,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:13",{"_index":1294,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:137",{"_index":1299,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:162",{"_index":1296,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:26",{"_index":1297,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:72",{"_index":1300,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts",{"_index":1212,"title":{},"body":{"entities/Enroll.html":{},"coverage.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:14",{"_index":1220,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:18",{"_index":1216,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:22",{"_index":1223,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:25",{"_index":1222,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:28",{"_index":1218,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:30",{"_index":1224,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:32",{"_index":1219,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/lessons/dto/create",{"_index":987,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"coverage.html":{}}}],["src/modules/lessons/dto/update",{"_index":1915,"title":{},"body":{"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts",{"_index":1486,"title":{},"body":{"entities/Lesson.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:21",{"_index":1496,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:31",{"_index":1500,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:35",{"_index":1492,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:38",{"_index":1503,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:41",{"_index":1495,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:44",{"_index":1504,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:47",{"_index":1498,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:50",{"_index":1491,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:53",{"_index":1502,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:56",{"_index":1490,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:59",{"_index":1501,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:62",{"_index":1499,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:65",{"_index":1493,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:68",{"_index":1505,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:71",{"_index":1494,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/lessons.controller.ts",{"_index":1511,"title":{},"body":{"controllers/LessonsController.html":{},"coverage.html":{}}}],["src/modules/lessons/lessons.controller.ts:107",{"_index":1522,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:131",{"_index":1531,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:142",{"_index":1527,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:49",{"_index":1515,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:73",{"_index":1518,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:98",{"_index":1526,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.module.ts",{"_index":1553,"title":{},"body":{"modules/LessonsModule.html":{}}}],["src/modules/lessons/lessons.service.ts",{"_index":1557,"title":{},"body":{"injectables/LessonsService.html":{},"coverage.html":{}}}],["src/modules/lessons/lessons.service.ts:128",{"_index":1572,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:13",{"_index":1563,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:168",{"_index":1571,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:196",{"_index":1570,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:25",{"_index":1566,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:71",{"_index":1567,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:98",{"_index":1568,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/mails/mail.module.ts",{"_index":1654,"title":{},"body":{"modules/MailModule.html":{}}}],["src/modules/mails/mail.service.ts",{"_index":1678,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/modules/mails/mail.service.ts:5",{"_index":1682,"title":{},"body":{"injectables/MailService.html":{}}}],["src/modules/mails/mail.service.ts:7",{"_index":1684,"title":{},"body":{"injectables/MailService.html":{}}}],["src/modules/prometheus/prometheus.controller.ts",{"_index":1770,"title":{},"body":{"controllers/PrometheusController.html":{},"coverage.html":{}}}],["src/modules/prometheus/prometheus.controller.ts:11",{"_index":1774,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["src/modules/prometheus/prometheus.module.ts",{"_index":1785,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["src/modules/prometheus/prometheus.service.ts",{"_index":1793,"title":{},"body":{"injectables/PrometheusService.html":{},"coverage.html":{}}}],["src/modules/prometheus/prometheus.service.ts:14",{"_index":1796,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:6",{"_index":1795,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/quiz/dto/create",{"_index":1018,"title":{},"body":{"classes/CreateQuizDto.html":{},"coverage.html":{}}}],["src/modules/quiz/dto/update",{"_index":1917,"title":{},"body":{"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts",{"_index":88,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:17",{"_index":1827,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:20",{"_index":1830,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:23",{"_index":1826,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:26",{"_index":1829,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:29",{"_index":1828,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:32",{"_index":1825,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:35",{"_index":1831,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:44",{"_index":1819,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:47",{"_index":1823,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:50",{"_index":1824,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:53",{"_index":1822,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:56",{"_index":1821,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:59",{"_index":1818,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:68",{"_index":96,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:71",{"_index":98,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:74",{"_index":104,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:77",{"_index":103,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/quiz.controller.ts",{"_index":1833,"title":{},"body":{"controllers/QuizController.html":{},"coverage.html":{}}}],["src/modules/quiz/quiz.controller.ts:23",{"_index":1838,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/modules/quiz/quiz.module.ts",{"_index":1850,"title":{},"body":{"modules/QuizModule.html":{}}}],["src/modules/quiz/quiz.service.ts",{"_index":1854,"title":{},"body":{"injectables/QuizService.html":{},"coverage.html":{}}}],["src/modules/quiz/quiz.service.ts:16",{"_index":1858,"title":{},"body":{"injectables/QuizService.html":{}}}],["src/modules/quiz/quiz.service.ts:32",{"_index":1860,"title":{},"body":{"injectables/QuizService.html":{}}}],["src/modules/user",{"_index":1029,"title":{},"body":{"classes/CreateUserCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["src/modules/user/dto/create",{"_index":1038,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/update",{"_index":1922,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":1923,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts:22",{"_index":1932,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:28",{"_index":1933,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:34",{"_index":1931,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:37",{"_index":1944,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:42",{"_index":1936,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:45",{"_index":1941,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:52",{"_index":1940,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:57",{"_index":1937,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:62",{"_index":1925,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:67",{"_index":1926,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:74",{"_index":1935,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:78",{"_index":1939,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:82",{"_index":1928,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:85",{"_index":1942,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:88",{"_index":1929,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:91",{"_index":1943,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":1720,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:108",{"_index":1730,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/user/user.controller.ts:129",{"_index":1736,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/user/user.controller.ts:138",{"_index":1726,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/user/user.controller.ts:33",{"_index":1999,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:52",{"_index":2001,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:66",{"_index":2003,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:73",{"_index":2007,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:80",{"_index":2005,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:93",{"_index":2011,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":2015,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":2018,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:111",{"_index":2027,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:130",{"_index":2033,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:159",{"_index":2032,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:174",{"_index":2024,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:182",{"_index":2041,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:190",{"_index":2028,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:199",{"_index":2039,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:207",{"_index":2036,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:22",{"_index":2021,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:241",{"_index":2030,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:261",{"_index":2037,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:30",{"_index":2022,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:84",{"_index":2026,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/access",{"_index":6,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["src/shared/exceptions/validation.exception.ts",{"_index":2089,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/exceptions/validation.exception.ts:34",{"_index":2091,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/shared/exceptions/validation.exception.ts:35",{"_index":2092,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/shared/exceptions/validation.exception.ts:8",{"_index":2100,"title":{},"body":{"interfaces/ValidationResponse-1.html":{}}}],["src/shared/shared.module.ts",{"_index":1903,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/strategy/google.strategy.ts",{"_index":1345,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/strategy/google.strategy.ts:18",{"_index":1353,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/strategy/google.strategy.ts:8",{"_index":1348,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/strategy/jwt.strategy.ts",{"_index":1468,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/strategy/jwt.strategy.ts:15",{"_index":1472,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/strategy/jwt.strategy.ts:5",{"_index":1470,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/utils/helper.ts",{"_index":2128,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lib.ts",{"_index":229,"title":{},"body":{"interfaces/AssociativeArray.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lib.ts:16",{"_index":232,"title":{},"body":{"interfaces/AssociativeArray.html":{}}}],["src/utils/logger.ts",{"_index":1610,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/utils/logger.ts:6",{"_index":1645,"title":{},"body":{"classes/Logger.html":{}}}],["src/utils/paginate.ts",{"_index":1690,"title":{},"body":{"injectables/PaginateHelper.html":{},"coverage.html":{}}}],["src/utils/paginate.ts:14",{"_index":1706,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:15",{"_index":1697,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:25",{"_index":1703,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:29",{"_index":1698,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:33",{"_index":1705,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:37",{"_index":1699,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:41",{"_index":1701,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/response/index.ts",{"_index":1097,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/utils/response/index.ts:17",{"_index":1465,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:18",{"_index":1464,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:19",{"_index":1458,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:20",{"_index":1462,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:21",{"_index":1461,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:22",{"_index":1463,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:23",{"_index":1466,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:24",{"_index":1460,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:25",{"_index":1459,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:31",{"_index":1897,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/utils/response/index.ts:33",{"_index":1898,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/utils/response/index.ts:50",{"_index":1100,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["src/utils/response/index.ts:52",{"_index":1103,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["src/utils/response/response.dto.ts",{"_index":1878,"title":{},"body":{"classes/ResponseDto.html":{},"coverage.html":{}}}],["src/utils/response/response.dto.ts:16",{"_index":1892,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:20",{"_index":1890,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:24",{"_index":1884,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:27",{"_index":1880,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:31",{"_index":1882,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:38",{"_index":1887,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:45",{"_index":1886,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:48",{"_index":1888,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:53",{"_index":1894,"title":{},"body":{"classes/ResponseDto.html":{}}}],["stack",{"_index":1638,"title":{},"body":{"classes/Logger.html":{}}}],["standard",{"_index":2095,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["start",{"_index":2196,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2198,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2200,"title":{},"body":{"index.html":{}}}],["started",{"_index":2189,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2191,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2104,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1611,"title":{},"body":{"classes/Logger.html":{},"classes/swaggerConfig.html":{}}}],["status",{"_index":539,"title":{},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"entities/Lesson.html":{},"injectables/LessonsService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"entities/User.html":{}}}],["status'})@get",{"_index":591,"title":{},"body":{"controllers/CategoryController.html":{}}}],["status/:slug",{"_index":793,"title":{},"body":{"controllers/CoursesController.html":{}}}],["status_codes",{"_index":1390,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["status_codes[status",{"_index":1817,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":1407,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["statuscode",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"interfaces/ValidationResponse.html":{}}}],["stay",{"_index":2222,"title":{},"body":{"index.html":{}}}],["storage",{"_index":624,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage('/category",{"_index":640,"title":{},"body":{"controllers/CategoryController.html":{}}}],["storage('/profile",{"_index":1760,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["storage('category",{"_index":633,"title":{},"body":{"controllers/CategoryController.html":{}}}],["storage('course",{"_index":829,"title":{},"body":{"controllers/CoursesController.html":{}}}],["storage('lesson",{"_index":1537,"title":{},"body":{"controllers/LessonsController.html":{}}}],["str",{"_index":2348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["str.replace(/\\s/g",{"_index":2349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":1677,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":93,"title":{},"body":{"entities/AnswerOption.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":1213,"title":{},"body":{"entities/Enroll.html":{},"injectables/EnrollsService.html":{}}}],["student.sub",{"_index":1302,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["studentenroll",{"_index":1290,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["studentenrollchangestatus",{"_index":1291,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["studentgetenrollscourses",{"_index":1292,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["sub",{"_index":349,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{}}}],["subject",{"_index":1686,"title":{},"body":{"injectables/MailService.html":{},"license.html":{}}}],["sublicense",{"_index":2255,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2268,"title":{},"body":{"license.html":{}}}],["success",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":583,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["summary",{"_index":1755,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1358,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["super(errors",{"_index":2099,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["support",{"_index":2214,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2296,"title":{},"body":{"modules.html":{}}}],["swaggerconfig",{"_index":2109,"title":{"classes/swaggerConfig.html":{}},"body":{"coverage.html":{},"classes/swaggerConfig.html":{}}}],["synchronize",{"_index":1198,"title":{},"body":{"modules/DbModule.html":{}}}],["syntax",{"_index":1415,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["t",{"_index":1113,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["table",{"_index":2132,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2131,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":1670,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":1673,"title":{},"body":{"modules/MailModule.html":{}}}],["terms",{"_index":2317,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["termsofservice",{"_index":2308,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["test",{"_index":2203,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2206,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2205,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2202,"title":{},"body":{"index.html":{}}}],["text",{"_index":92,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"classes/CreateQuizDto.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"miscellaneous/enumerations.html":{}}}],["text/plain",{"_index":1781,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["thanks",{"_index":2212,"title":{},"body":{"index.html":{}}}],["this._validationfilter(validationerror.children",{"_index":1421,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this._validationfilter(validationerrors",{"_index":1402,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this.authmiddleware.use",{"_index":353,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.create(createauthdto",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(forgetpassworddto",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.googlelogin(req",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithgoogle",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(resetpassworddto",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyotp(forgetpassworddto",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.buildroles([role.admin",{"_index":66,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.buildroles([role.guest",{"_index":67,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.categoryexist(createcategorydto.name",{"_index":678,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.create",{"_index":681,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.delete(id",{"_index":702,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.find",{"_index":692,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":694,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["this.categoryrepository.save",{"_index":699,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save(category",{"_index":685,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.changestatus(id",{"_index":649,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":635,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(status",{"_index":637,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(id",{"_index":639,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":646,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":643,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.checkemailexists(req.user.email",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkemailexists(user.email",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkphoneexists(user.phone",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('db_database",{"_index":1202,"title":{},"body":{"modules/DbModule.html":{}}}],["this.connecttodatabase",{"_index":1200,"title":{},"body":{"modules/DbModule.html":{}}}],["this.courseexist(createcoursedto.title",{"_index":887,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursepagination.run(coursesquery",{"_index":905,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.create",{"_index":895,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.createquerybuilder('course",{"_index":903,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.exists",{"_index":923,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.find",{"_index":924,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.findone",{"_index":909,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["this.courserepository.save",{"_index":914,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.save(course",{"_index":899,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.softdelete(id",{"_index":921,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursesservice.changestatus(slug",{"_index":854,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.create(createcoursedto",{"_index":830,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.findall(filters",{"_index":842,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.findmycourse(user",{"_index":844,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.findone(slug",{"_index":846,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.remove(id",{"_index":850,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.update(slug",{"_index":849,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.datasource.transaction(async",{"_index":1575,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.defaultservice.gethello",{"_index":175,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["this.emailexists(email",{"_index":2044,"title":{},"body":{"injectables/UserService.html":{}}}],["this.enrollrepository.create",{"_index":1307,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.createquerybuilder('enroll",{"_index":1311,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.findone",{"_index":1304,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.remove(enroll",{"_index":1309,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.save",{"_index":1317,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.save(enroll",{"_index":1308,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollsservice.instructorgetenrollscourses(user",{"_index":1269,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.studentenroll(courseid",{"_index":1273,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.studentenrollchangestatus(courseid",{"_index":1279,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.studentgetenrollscourses(user",{"_index":1265,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.unenrollcourse(courseid",{"_index":1276,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.filerequest",{"_index":1337,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["this.formaterrors(error.children",{"_index":1433,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this.formaterrors(r.message",{"_index":1404,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this.formatusername(req.user.firstname",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.formatusername(username",{"_index":2047,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hierarchies",{"_index":78,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.hierarchies.push(hierarchy",{"_index":77,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.i18n.t",{"_index":686,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserCategoryService.html":{}}}],["this.i18n.t('response.auth.invalid_credentials",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.auth.login_success",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.auth.otp_invalid",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.auth.user_not_found",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.category.category_exist",{"_index":680,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.i18n.t('response.category.category_fetch_successfully",{"_index":693,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.i18n.t('response.category.category_not_found",{"_index":695,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["this.i18n.t('response.course.course_created_successfully",{"_index":900,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.i18n.t('response.course.course_exist",{"_index":890,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.i18n.t('response.course.course_failed_to_create",{"_index":901,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.i18n.t('validation.user_register.email_exists",{"_index":2048,"title":{},"body":{"injectables/UserService.html":{}}}],["this.i18n.t('validation.user_register.user_fail",{"_index":690,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserService.html":{}}}],["this.i18n.t('validation.user_register.user_success",{"_index":2052,"title":{},"body":{"injectables/UserService.html":{}}}],["this.i18nservice.resolvelanguage(lang",{"_index":1485,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["this.i18nservice.translate('response.default_message",{"_index":172,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["this.id",{"_index":120,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["this.isemail(user?.email",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.decode(token",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":529,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["this.lessonrepository.create",{"_index":1581,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonrepository.createquerybuilder('lesson",{"_index":1589,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonrepository.delete(id",{"_index":1609,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonrepository.findone",{"_index":1600,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["this.lessonrepository.save",{"_index":1606,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonsservice.create(createlessondto",{"_index":1538,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.findall(slug",{"_index":1542,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.findone(lesson_slug",{"_index":1547,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.getalllessonbyinstructionn(course_slug",{"_index":1545,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.remove(id",{"_index":1550,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.update(id",{"_index":1549,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.limit",{"_index":1712,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["this.mailerservice.sendmail",{"_index":1685,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendforgotpasswordemail",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.matchroles(requiredroles",{"_index":368,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.page",{"_index":1714,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["this.pagination.run(lessonquery",{"_index":1596,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.priority",{"_index":76,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.prometheusservice.getmetrics",{"_index":1779,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["this.questionrepository.save(questions",{"_index":1873,"title":{},"body":{"injectables/QuizService.html":{}}}],["this.quizrepository.create",{"_index":1867,"title":{},"body":{"injectables/QuizService.html":{}}}],["this.quizrepository.save",{"_index":1875,"title":{},"body":{"injectables/QuizService.html":{}}}],["this.quizservice.createquiz(createquizdto",{"_index":1847,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":357,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.register",{"_index":1800,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.register.metrics",{"_index":1804,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.register.setdefaultlabels",{"_index":1801,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.request",{"_index":1125,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["this.responseservice.response",{"_index":166,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.response(result",{"_index":1146,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["this.responseservices.response",{"_index":361,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.usercategoryrepository.create",{"_index":1992,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryrepository.find",{"_index":1994,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryrepository.save(usercategory",{"_index":1993,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryrepository.softdelete(id",{"_index":1995,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryservice.create(payload",{"_index":1968,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["this.usercategoryservice.findall",{"_index":1970,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["this.usercategoryservice.remove",{"_index":1973,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["this.usernameexists",{"_index":2046,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usernameformat(username",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userpagination.run(q",{"_index":2068,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository",{"_index":2053,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.exists",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EnrollsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findoneorfail",{"_index":2080,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":2071,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.softdelete(id",{"_index":2072,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1743,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findall(filters",{"_index":1744,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":1745,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.getprofile(user",{"_index":1758,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1747,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":1746,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.updateprofile(updateuserdto",{"_index":1762,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.updaterole(id",{"_index":1752,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.userdetail(user.sub",{"_index":894,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.validateuser(user",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":360,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"interfaces/Request.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["throwerror",{"_index":1155,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["thumbnail",{"_index":743,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["thumbnail_url",{"_index":828,"title":{},"body":{"controllers/CoursesController.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["tilte",{"_index":1003,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["timestamp",{"_index":567,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"entities/Enroll.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"entities/Lesson.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["timestamp'})@type(undefined",{"_index":543,"title":{},"body":{"entities/Category.html":{}}}],["title",{"_index":121,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["tolowercase",{"_index":2079,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["topsecret",{"_index":727,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":2291,"title":{},"body":{"license.html":{}}}],["touch",{"_index":2223,"title":{},"body":{"index.html":{}}}],["transform",{"_index":1326,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["transform(value",{"_index":1330,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["transformer",{"_index":563,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["translation",{"_index":1416,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["transport",{"_index":1663,"title":{},"body":{"modules/MailModule.html":{}}}],["transports",{"_index":1616,"title":{},"body":{"classes/Logger.html":{}}}],["transports.console",{"_index":1633,"title":{},"body":{"classes/Logger.html":{}}}],["transports.dailyrotatefile",{"_index":1617,"title":{},"body":{"classes/Logger.html":{}}}],["true",{"_index":123,"title":{},"body":{"entities/AnswerOption.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/PrometheusModule.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["true})@exclude",{"_index":1938,"title":{},"body":{"entities/User.html":{}}}],["true})@isboolean()@isnotempty",{"_index":1891,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isemail()@isnotempty()@unique('email",{"_index":1930,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":1883,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isnumber",{"_index":1889,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isoptional()@isnumber",{"_index":1893,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isstring()@isnotempty",{"_index":548,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["true})@isstring()@isoptional",{"_index":1885,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isstring()@unique('slug",{"_index":769,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["try",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":2229,"title":{},"body":{"index.html":{}}}],["type",{"_index":38,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined",{"_index":558,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["type(undefined)@createdatecolumn({type",{"_index":1927,"title":{},"body":{"entities/User.html":{}}}],["type(undefined)@manytoone(undefined",{"_index":1214,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["type(undefined)@onetomany(undefined",{"_index":760,"title":{},"body":{"entities/Course.html":{}}}],["typealiases",{"_index":2323,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":112,"title":{},"body":{"entities/AnswerOption.html":{},"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"injectables/CoursesService.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"entities/Lesson.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/QuizModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":656,"title":{},"body":{"modules/CategoryModule.html":{}}}],["typeormmodule.forfeature([course",{"_index":863,"title":{},"body":{"modules/CoursesModule.html":{}}}],["typeormmodule.forfeature([enroll",{"_index":1287,"title":{},"body":{"modules/EnrollsModule.html":{}}}],["typeormmodule.forfeature([lesson",{"_index":1556,"title":{},"body":{"modules/LessonsModule.html":{}}}],["typeormmodule.forfeature([quiz",{"_index":1853,"title":{},"body":{"modules/QuizModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([usercategory",{"_index":1979,"title":{},"body":{"modules/UserCategoryModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1187,"title":{},"body":{"modules/DbModule.html":{}}}],["types",{"_index":1066,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":834,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{},"index.html":{}}}],["typesoutputpath",{"_index":1453,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["unauthorized",{"_index":365,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["unauthorizedexception",{"_index":340,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["unauthorizedexception(this.responseservices.response",{"_index":370,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":82,"title":{},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"entities/Course.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/ProfileDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isenum(lessontype",{"_index":1008,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["undefined})@isnotempty()@apiproperty({example",{"_index":928,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["undefined})@isnotempty()@maxlength(50",{"_index":1046,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty({message",{"_index":950,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["undefined})@isoptional",{"_index":995,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["undefined})@isoptional({message",{"_index":956,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{}}}],["undefined})@matches(/^[a",{"_index":1051,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@minlength(6",{"_index":1050,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unenrollcourse",{"_index":1240,"title":{},"body":{"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{}}}],["unenrollcourse(@user",{"_index":1275,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["unenrollcourse(user",{"_index":1255,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["unenrolled",{"_index":1310,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["unexpected",{"_index":1143,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["unique",{"_index":768,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{}}}],["unique('email",{"_index":1946,"title":{},"body":{"entities/User.html":{}}}],["unique('slug",{"_index":781,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["unit",{"_index":2201,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":367,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2307,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":836,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["update",{"_index":573,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":1548,"title":{},"body":{"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":599,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(slug",{"_index":815,"title":{},"body":{"controllers/CoursesController.html":{}}}],["updatecategorydto",{"_index":600,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecoursedto",{"_index":816,"title":{"classes/UpdateCourseDto.html":{}},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["updatecoursedto.featured",{"_index":917,"title":{},"body":{"injectables/CoursesService.html":{}}}],["updatecoursedto.isfree",{"_index":915,"title":{},"body":{"injectables/CoursesService.html":{}}}],["updatecoursedto})@useinterceptors(undefined)@patch(':slug",{"_index":818,"title":{},"body":{"controllers/CoursesController.html":{}}}],["updated",{"_index":919,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{}}}],["updated_at",{"_index":540,"title":{},"body":{"entities/Category.html":{},"entities/Enroll.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["updatedat",{"_index":131,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["updatedatecolumn",{"_index":111,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["updatedatecolumn({type",{"_index":555,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["updatedcategory",{"_index":698,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedcourse",{"_index":913,"title":{},"body":{"injectables/CoursesService.html":{}}}],["updatedenroll",{"_index":1316,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["updatedlesson",{"_index":1605,"title":{},"body":{"injectables/LessonsService.html":{}}}],["updateduser",{"_index":2070,"title":{},"body":{"injectables/UserService.html":{}}}],["updatelessondto",{"_index":1528,"title":{"classes/UpdateLessonDto.html":{}},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["updateprofile",{"_index":1723,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/UserService.html":{}}}],["updateprofile(@user",{"_index":1761,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["updateprofile(updateuserdto",{"_index":2034,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(user",{"_index":1731,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updatequizdto",{"_index":1842,"title":{"classes/UpdateQuizDto.html":{}},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["updaterole",{"_index":1997,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updaterole(@param('id",{"_index":1750,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["updaterole(id",{"_index":2008,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatestatus",{"_index":574,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatestatus(@param('id",{"_index":648,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatestatus(id",{"_index":604,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updateusercategorydto",{"_index":1919,"title":{"classes/UpdateUserCategoryDto.html":{}},"body":{"classes/UpdateUserCategoryDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1732,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/ProfileController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["uploadedfiles",{"_index":609,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["uploads",{"_index":2364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploads/${filename",{"_index":2345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":238,"title":{},"body":{"interfaces/AssociativeArray.html":{},"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"injectables/PaginateHelper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["url(url(req.url",{"_index":1711,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["usd",{"_index":783,"title":{},"body":{"entities/Course.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["usd'})@isstring()@isnotempty",{"_index":750,"title":{},"body":{"entities/Course.html":{}}}],["use",{"_index":517,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"modules/I18nConfigModule.html":{},"injectables/LanguageMiddleware.html":{},"license.html":{}}}],["use(req",{"_index":520,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"interfaces/Request.html":{}}}],["useclass",{"_index":1910,"title":{},"body":{"modules/SharedModule.html":{}}}],["used",{"_index":2312,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["usefactory",{"_index":1188,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{}}}],["useguards",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":627,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('google",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":610,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":33,"title":{"entities/User.html":{}},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"modules/MailModule.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"classes/UpdateUserCategoryDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibearerauth()@roles(rolesenum.all)@useguards(authguard",{"_index":1735,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user'})@isemail({allow_ip_domain",{"_index":1040,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isoptional",{"_index":1056,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isphonenumber('rw",{"_index":1054,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isstring({message",{"_index":1045,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ProfileDto.html":{}}}],["user'})@put(':id/role",{"_index":2010,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":2016,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator.ts",{"_index":2112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1738,"title":{},"body":{"controllers/ProfileController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":1039,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:112",{"_index":1052,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:128",{"_index":1768,"title":{},"body":{"classes/ProfileDto.html":{}}}],["user.dto.ts:139",{"_index":1766,"title":{},"body":{"classes/ProfileDto.html":{}}}],["user.dto.ts:150",{"_index":1767,"title":{},"body":{"classes/ProfileDto.html":{}}}],["user.dto.ts:153",{"_index":1467,"title":{},"body":{"classes/ImagePicDto.html":{}}}],["user.dto.ts:32",{"_index":1059,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":1047,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1043,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:83",{"_index":1055,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":1057,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{}}}],["user.profile_picture",{"_index":2086,"title":{},"body":{"injectables/UserService.html":{}}}],["user.role",{"_index":369,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["user.service",{"_index":1737,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":1972,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["user.then((res",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.usercategories",{"_index":1954,"title":{},"body":{"entities/UserCategory.html":{}}}],["user/entities/user.entity",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["user/user.service",{"_index":883,"title":{},"body":{"injectables/CoursesService.html":{}}}],["user?.profile_picture",{"_index":2082,"title":{},"body":{"injectables/UserService.html":{}}}],["usercategories",{"_index":541,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{},"injectables/UserCategoryService.html":{}}}],["usercategory",{"_index":557,"title":{"entities/UserCategory.html":{}},"body":{"entities/Category.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["usercategorycontroller",{"_index":1957,"title":{"controllers/UserCategoryController.html":{}},"body":{"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"coverage.html":{}}}],["usercategorymodule",{"_index":197,"title":{"modules/UserCategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserCategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["usercategoryrepository",{"_index":1983,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["usercategoryservice",{"_index":1964,"title":{"injectables/UserCategoryService.html":{}},"body":{"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":1742,"title":{"controllers/UserController.html":{}},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdetail",{"_index":893,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserService.html":{}}}],["userdetail(id",{"_index":2038,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":1971,"title":{},"body":{"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{}}}],["usermodule",{"_index":198,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["usernameexists",{"_index":2019,"title":{},"body":{"injectables/UserService.html":{}}}],["usernameexists(username",{"_index":2040,"title":{},"body":{"injectables/UserService.html":{}}}],["usernameformat",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["usernameformat(username",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpagination",{"_index":2020,"title":{},"body":{"injectables/UserService.html":{}}}],["userrepository",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EnrollsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":338,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["users",{"_index":1996,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/swaggerConfig.html":{}}}],["users.created_at",{"_index":2062,"title":{},"body":{"injectables/UserService.html":{}}}],["users.deleted_at",{"_index":2064,"title":{},"body":{"injectables/UserService.html":{}}}],["users.email",{"_index":2059,"title":{},"body":{"injectables/UserService.html":{}}}],["users.id",{"_index":2056,"title":{},"body":{"injectables/UserService.html":{}}}],["users.name",{"_index":2057,"title":{},"body":{"injectables/UserService.html":{}}}],["users.phone",{"_index":2060,"title":{},"body":{"injectables/UserService.html":{}}}],["users.role",{"_index":2063,"title":{},"body":{"injectables/UserService.html":{}}}],["users.status",{"_index":2061,"title":{},"body":{"injectables/UserService.html":{}}}],["users.username",{"_index":2058,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":867,"title":{"injectables/UserService.html":{}},"body":{"injectables/CoursesService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":106,"title":{},"body":{"entities/AnswerOption.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"modules/SharedModule.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["utils/paginate",{"_index":884,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["uuid",{"_index":105,"title":{},"body":{"entities/AnswerOption.html":{},"interfaces/AssociativeArray.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["uuidv4",{"_index":235,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["v1",{"_index":1162,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["v4",{"_index":234,"title":{},"body":{"interfaces/AssociativeArray.html":{}}}],["validate",{"_index":1347,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(_accesstoken",{"_index":1349,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":1471,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":1011,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["validateuser",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(user",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1434,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["validation.auth_login.otp_required",{"_index":943,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["validation.auth_login.password_required",{"_index":938,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["validation.auth_login.user_name",{"_index":936,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["validation.category_register.description_required",{"_index":961,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["validation.category_register.icon_url_required",{"_index":963,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["validation.category_register.name_required",{"_index":960,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["validation.courses.course_category_required",{"_index":985,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_current_price_required",{"_index":981,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_description_required",{"_index":979,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_is_featured_required",{"_index":984,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_is_free_required",{"_index":982,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_name_required",{"_index":978,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_price_required",{"_index":980,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_thumbnail_required",{"_index":983,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.user_category_register.category_id_required",{"_index":1036,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["validation.user_category_register.category_not_found",{"_index":1991,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["validation.user_register.address_required",{"_index":1090,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.bio_required",{"_index":1094,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.email_invalid",{"_index":1071,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.email_required",{"_index":1072,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.name_required",{"_index":1068,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.password_match",{"_index":1080,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.password_min",{"_index":1078,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.password_required",{"_index":1076,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.phone_invalid",{"_index":1074,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.phone_required",{"_index":1075,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.profile_pic_required",{"_index":1086,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.username_required",{"_index":1067,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validationerror",{"_index":1379,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["validationerror.constraints",{"_index":1412,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["validationerror.constraints[constraintkey",{"_index":1417,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["validationerrors",{"_index":1381,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["validationexception",{"_index":2088,"title":{"classes/ValidationException.html":{}},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["validationexception(formattederrors",{"_index":2094,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["validationexceptionfactory",{"_index":2093,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationresponse",{"_index":1389,"title":{"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":237,"title":{},"body":{"interfaces/AssociativeArray.html":{},"entities/Category.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{}}}],["value",{"_index":53,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"injectables/PaginateHelper.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["value[this.filerequest",{"_index":1338,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["variable",{"_index":2106,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2327,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":837,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["verifycallback",{"_index":1352,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["verifyotp",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyotp(@param('token",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyotp(otp",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyotp(token",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":611,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CustomResponseInterceptor.html":{},"properties.html":{},"classes/swaggerConfig.html":{}}}],["version('1",{"_index":630,"title":{},"body":{"controllers/CategoryController.html":{}}}],["version('1')@apiconsumes('multipart/form",{"_index":601,"title":{},"body":{"controllers/CategoryController.html":{}}}],["video",{"_index":1507,"title":{},"body":{"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["void",{"_index":45,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2275,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2271,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1449,"title":{},"body":{"modules/I18nConfigModule.html":{},"index.html":{}}}],["weakset",{"_index":1388,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{}}}],["website",{"_index":2227,"title":{},"body":{"index.html":{}}}],["where('course.creator.id",{"_index":1322,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["where('course.slug",{"_index":1591,"title":{},"body":{"injectables/LessonsService.html":{}}}],["where('courseid",{"_index":1579,"title":{},"body":{"injectables/LessonsService.html":{}}}],["where('enroll.student.id",{"_index":1313,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["where('lesson.slug",{"_index":1598,"title":{},"body":{"injectables/LessonsService.html":{}}}],["whether",{"_index":2288,"title":{},"body":{"license.html":{}}}],["willsoto/nestjs",{"_index":1788,"title":{},"body":{"modules/PrometheusModule.html":{},"dependencies.html":{}}}],["winston",{"_index":1646,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["winstonmodule",{"_index":1649,"title":{},"body":{"classes/Logger.html":{}}}],["winstonmodule.createlogger",{"_index":1612,"title":{},"body":{"classes/Logger.html":{}}}],["withdeleted",{"_index":2069,"title":{},"body":{"injectables/UserService.html":{}}}],["without",{"_index":2246,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":2193,"title":{},"body":{"index.html":{}}}],["yes",{"_index":877,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{}}}],["you'd",{"_index":2217,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1622,"title":{},"body":{"classes/Logger.html":{}}}],["z0",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/UserService.html":{}}}],["z]{2",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["za",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/UserService.html":{}}}],["zippedarchive",{"_index":1625,"title":{},"body":{"classes/Logger.html":{}}}],["zoom",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessContorlService.html":{"url":"injectables/AccessContorlService.html","title":"injectable - AccessContorlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessContorlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/access-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hierarchies\n                            \n                            \n                                    Private\n                                priority\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildRoles\n                            \n                            \n                                    Public\n                                getRole\n                            \n                            \n                                    Public\n                                isAuthorized\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/access-control.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildRoles(roles: Role[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/access-control.service.ts:24\n                        \n                    \n\n\n            \n                \n                        The buildRoles method allows for creating a role hierarchy between specified set of roles.\nRoles have to be specified from least privileged user to the most privileged one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                        Role[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array that contains a list of roles\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRole(undefined: IsAuthorizedParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/access-control.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IsAuthorizedParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Role\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthorized\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthorized(undefined: IsAuthorizedParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/access-control.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IsAuthorizedParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hierarchies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/shared/access-control.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/shared/access-control.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RolesEnum as Role } from '@/enums';\n\ninterface IsAuthorizedParams {\n  currentRole: Role;\n  requiredRole: Role;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority = 1;\n\n  constructor() {\n    this.buildRoles([Role.ADMIN]);\n    this.buildRoles([Role.GUEST, Role.USER, Role.ADMIN]);\n  }\n\n  /**\n   * The buildRoles method allows for creating a role hierarchy between specified set of roles.\n   * Roles have to be specified from least privileged user to the most privileged one\n   * @param roles Array that contains a list of roles\n   */\n  private buildRoles(roles: Role[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach((role) => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n\n      if (\n        priority !== undefined &&\n        requiredPriority !== undefined &&\n        priority \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AnswerOption.html":{"url":"entities/AnswerOption.html","title":"entity - AnswerOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AnswerOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/entities/quiz.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                question\n                            \n                            \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, question => question.options, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:74\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from \"@/utils\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, OneToMany, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { Lesson } from \"@/modules/lessons/entities/lesson.entity\";\n\nexport enum QuestionType {\n    SINGLE_CHOICE = 'single_choice',\n    MULTIPLE_CHOICE = 'multiple_choice',\n    TEXT = 'text',\n}\n\n@Entity()\nexport class Quiz {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @OneToMany(() => Question, (question) => question.quiz, { cascade: true })\n    questions: Question[];\n\n    @OneToOne(() => Lesson, (lesson) => lesson.quiz) // Bidirectional relationship\n    lesson: Lesson;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n@Entity()\nexport class Question {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    text: string;\n\n    @Column({ type: 'enum', enum: QuestionType })\n    type: QuestionType;\n\n    @ManyToOne(() => Quiz, (quiz) => quiz.questions, { onDelete: 'CASCADE' })\n    quiz: Quiz;\n\n    @OneToMany(() => AnswerOption, (option) => option.question, { cascade: true })\n    options: AnswerOption[];\n\n    @Column({ type: 'simple-array', nullable: true })\n    correctAnswers?: string[]; // For MCQs: [\"A\", \"C\"], for text: [\"exact answer\"]\n}\n\n@Entity()\nexport class AnswerOption {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    label: string; // e.g., \"A\", \"B\", \"C\"\n\n    @Column()\n    text: string;\n\n    @ManyToOne(() => Question, (question) => question.options, { onDelete: 'CASCADE' })\n    question: Question;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/default/default.module.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/default/default.module.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { ResponseService } from '@/utils';\nimport { Controller, Get, Injectable, Module } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class DefaultService {\n  constructor(\n    private readonly responseService: ResponseService,\n    private readonly I18nService: I18nService,\n  ) {}\n  getHello() {\n    const lang = I18nContext.current().lang;\n    return this.responseService.Response({\n      success: true,\n      statusCode: 200,\n      data: {\n        message: this.I18nService.translate('response.DEFAULT_MESSAGE', {\n          lang,\n        }),\n      },\n      message: this.I18nService.translate('response.DEFAULT_MESSAGE', { lang }),\n    });\n  }\n}\n\n@Controller('/')\n@ApiTags('App')\nclass AppController {\n  constructor(private readonly DefaultService: DefaultService) {}\n  @Get()\n  getHello() {\n    return this.DefaultService.getHello();\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  providers: [ResponseService, DefaultService],\n})\nexport class DefaultModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCoursesModule\n\nCoursesModule\n\nAppModule -->\n\nCoursesModule->AppModule\n\n\n\n\n\nDefaultModule\n\nDefaultModule\n\nAppModule -->\n\nDefaultModule->AppModule\n\n\n\n\n\nEnrollsModule\n\nEnrollsModule\n\nAppModule -->\n\nEnrollsModule->AppModule\n\n\n\n\n\nI18nConfigModule\n\nI18nConfigModule\n\nAppModule -->\n\nI18nConfigModule->AppModule\n\n\n\n\n\nLessonsModule\n\nLessonsModule\n\nAppModule -->\n\nLessonsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPrometheusModule\n\nPrometheusModule\n\nAppModule -->\n\nPrometheusModule->AppModule\n\n\n\n\n\nQuizModule\n\nQuizModule\n\nAppModule -->\n\nQuizModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUserCategoryModule\n\nUserCategoryModule\n\nAppModule -->\n\nUserCategoryModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CoursesModule\n                        \n                        \n                            DefaultModule\n                        \n                        \n                            EnrollsModule\n                        \n                        \n                            I18nConfigModule\n                        \n                        \n                            LessonsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PrometheusModule\n                        \n                        \n                            QuizModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UserCategoryModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { I18nConfigModule } from '@/configs';\nimport { UserModule, DefaultModule } from './modules';\nimport { LanguageMiddleware } from '@/middlewares';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MailModule } from './modules/mails/mail.module';\nimport { CategoryModule } from './modules/category/category.module';\nimport { UserCategoryModule } from './modules/user-category/user-category.module';\nimport { CoursesModule } from './modules/courses/courses.module';\nimport { SharedModule } from './shared';\nimport { PrometheusModule } from './modules/prometheus/prometheus.module';\nimport { EnrollsModule } from './modules/enrolls/enrolls.module';\nimport { LessonsModule } from './modules/lessons/lessons.module';\nimport { QuizModule } from './modules/quiz/quiz.module';\n\n\n@Module({\n  imports: [\n    SharedModule,\n    DefaultModule,\n    I18nConfigModule,\n    UserModule,\n    AuthModule,\n    MailModule,\n    CategoryModule,\n    UserCategoryModule,\n    CoursesModule,\n    PrometheusModule,\n    EnrollsModule,\n    LessonsModule,\n    QuizModule\n\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LanguageMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AssociativeArray.html":{"url":"interfaces/AssociativeArray.html","title":"interface - AssociativeArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AssociativeArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lib.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | boolean | number\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/lib.ts:16\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { SelectQueryBuilder } from 'typeorm';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isIn } from 'class-validator';\n\nexport const uuid = () => uuidv4();\n\nexport const url = (link: string) => {\n  const base = process.env.BACKEND_DOMAIN + '/' + process.env.PREFIX;\n\n  if (link.charAt(0) == '/') {\n    return base + link;\n  }\n  return base + '/' + link;\n};\n\nexport interface AssociativeArray {\n  [key: string]: string | boolean | number;\n}\n\nexport const filterQueryBuilderFromRequest = (\n  q: SelectQueryBuilder,\n  filters?: AssociativeArray,\n) => {\n  if (filters) {\n    const keys = Object.keys(filters);\n\n    const alias = q.alias;\n\n    for (const key of keys) {\n      const value = filters[key];\n\n      if (isIn(key, ['limit', 'offset', 'page'])) continue;\n\n      if (key === 'from') {\n        q.andWhere(`${alias}.createdAt >= '${value}'`);\n        continue;\n      }\n      if (key === 'to') {\n        q.andWhere(`${alias}.createdAt \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                forgetPassword\n                            \n                            \n                                    \n                                    \n                                google\n                            \n                            \n                                    \n                                    \n                                googleCallback\n                            \n                            \n                                    \n                                resetPassword\n                            \n                            \n                                    \n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAuthDto\n                                            \n                                                            CreateAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        forgetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgetPassword(forgetPasswordDto: ForgetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/forget-password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgetPasswordDto\n                                            \n                                                            ForgetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        google\n                        \n                    \n                \n            \n            \n                \n                        \n                    google()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        googleCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleCallback(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, resetPasswordDto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/reset-password/:token')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resetPasswordDto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(token: string, forgetPasswordDto: OTPDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/verify-otp/:token')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                forgetPasswordDto\n                                            \n                                                            OTPDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n  Get,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {\n  CreateAuthDto,\n  ForgetPasswordDto,\n  OTPDto,\n  ResetPasswordDto,\n} from './dto/create-auth.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) { }\n\n  @Post('/login')\n  create(@Body() createAuthDto: CreateAuthDto) {\n    return this.authService.create(createAuthDto);\n  }\n\n  @Get('/google')\n  @UseGuards(AuthGuard('google'))\n  google() {\n    return this.authService.loginWithGoogle();\n  }\n\n  @Get('/google/callback')\n  @UseGuards(AuthGuard('google'))\n  googleCallback(@Req() req) {\n    return this.authService.googleLogin(req);\n  }\n\n  @Post('/forget-password')\n  forgetPassword(@Body() forgetPasswordDto: ForgetPasswordDto) {\n    return this.authService.forgotPassword(forgetPasswordDto);\n  }\n\n  @Post('/verify-otp/:token')\n  verifyOtp(@Param('token') token: string, @Body() forgetPasswordDto: OTPDto) {\n    return this.authService.verifyOtp(forgetPasswordDto, token);\n  }\n\n  @Post('/reset-password/:token')\n  resetPassword(\n    @Param('token') token: string,\n    @Body() resetPasswordDto: ResetPasswordDto,\n  ) {\n    return this.authService.resetPassword(resetPasswordDto, token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                matchRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(responseServices: ResponseService, authMiddleware: AuthenticateMiddleware, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/guards/auth.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        responseServices\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authMiddleware\n                                                  \n                                                        \n                                                                        AuthenticateMiddleware\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/auth.guard.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchRoles\n                        \n                    \n                \n            \n            \n                \nmatchRoles(roles: Role[], userRole: Role)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/auth.guard.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                        Role[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ResponseService } from '@/utils';\nimport { Request, Response } from 'express';\n// import { Observable } from 'rxjs';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { ROLE_KEY } from '@/decorators';\nimport { RolesEnum as Role } from '@/enums';\n\nexport type AuthUserType = {\n  sub: string;\n  role: string;\n};\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly responseServices: ResponseService,\n    private authMiddleware: AuthenticateMiddleware,\n    private reflector: Reflector,\n  ) { }\n  matchRoles(roles: Role[], userRole: Role) {\n    return roles.some((role) => {\n      if (role === Role.ALL) return true;\n      return role === userRole;\n    });\n  }\n  async canActivate(context: ExecutionContext): Promise {\n    await this.authMiddleware.use(\n      context.switchToHttp().getRequest(),\n      context.switchToHttp().getResponse(),\n      () => { },\n    );\n    const requiredRoles = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      throw new UnauthorizedException(\n\n        this.responseServices.Response({\n          success: false,\n          data: null,\n          statusCode: 401,\n          message: 'Unauthorized',\n        })\n      );\n    }\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user as unknown as AuthUserType;\n    if (!user) {\n      throw this.responseServices.Response({\n        success: false,\n        data: null,\n        statusCode: 401,\n        message: 'Unauthorized',\n      });\n    }\n\n    if (!this.matchRoles(requiredRoles, user.role as Role)) {\n\n      throw new UnauthorizedException(this.responseServices.Response({\n        success: false,\n        data: null,\n        statusCode: 401,\n        message: 'Unauthorized',\n      }));\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from '@/strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { config } from '@/configs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { ResponseService } from '@/utils';\nimport { GoogleStrategy } from '@/strategy';\nimport { MailModule } from '../mails/mail.module';\n\n@Module({\n  imports: [\n    JwtModule.register({\n      secret: config().secret,\n      signOptions: { expiresIn: '1d' },\n      global: true,\n    }),\n    TypeOrmModule.forFeature([User]),\n    MailModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, ResponseService, GoogleStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkEmailExists\n                            \n                            \n                                    Async\n                                checkPhoneExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                formatUsername\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                            \n                                isEmail\n                            \n                            \n                                loginWithGoogle\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                usernameFormat\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService, i18n: I18nService, responseService: ResponseService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkEmailExists\n                        \n                    \n                \n            \n            \n                \ncheckEmailExists(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkPhoneExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkPhoneExists(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAuthDto: CreateAuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAuthDto\n                                            \n                                                            CreateAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(passwordDto: ForgetPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                passwordDto\n                                            \n                                                            ForgetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatUsername\n                        \n                    \n                \n            \n            \n                \nformatUsername(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:317\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin(req: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmail\n                        \n                    \n                \n            \n            \n                \nisEmail(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \nloginWithGoogle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { code: number; message: string; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(payload: ResetPasswordDto, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameFormat\n                        \n                    \n                \n            \n            \n                \nusernameFormat(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { email: string; phone?: undefined; } | { phone: string; email?: undefined; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(user: any, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(otp: OTPDto, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                otp\n                                            \n                                                            OTPDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  CreateAuthDto,\n  ForgetPasswordDto,\n  OTPDto,\n  ResetPasswordDto,\n} from './dto/create-auth.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@/modules/user/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseService } from '@/utils';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport * as bcrypt from 'bcrypt';\nimport { RolesEnum as Roles } from '@/enums';\nimport { MailService } from '../mails/mail.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly i18n: I18nService,\n    private readonly responseService: ResponseService,\n    private readonly mailService: MailService,\n  ) { }\n\n  async create(createAuthDto: CreateAuthDto) {\n    const lang = I18nContext.current().lang;\n\n    try {\n      const { username, password } = createAuthDto;\n      const user = this.usernameFormat(username);\n      if (this.isEmail(user?.email)) {\n        const emailExists = await this.checkEmailExists(user.email);\n        if (!emailExists) {\n          return this.responseService.Response({\n            data: null,\n            message: await this.i18n.t('response.AUTH.USER_NOT_FOUND', {\n              lang,\n            }),\n          });\n        }\n      }\n      const phoneExists = await this.checkPhoneExists(user.phone);\n      if (!phoneExists) {\n        return this.responseService.Response({\n          data: null,\n          message: await this.i18n.t('response.AUTH.USER_NOT_FOUND', {\n            lang,\n          }),\n        });\n      }\n      return this.validateUser(user, password);\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: errorMsg,\n      });\n    }\n  }\n\n  usernameFormat(username: string) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (emailRegex.test(username)) {\n      return {\n        email: username,\n      };\n    }\n    return {\n      phone: username,\n    };\n  }\n\n  async validateUser(user: any, password: string) {\n    const lang = I18nContext.current().lang;\n\n    const foundUser = await this.userRepository.findOne({\n      where: user,\n    });\n    if (!foundUser) {\n      return this.responseService.Response({\n        data: null,\n        message: await this.i18n.t('response.AUTH.USER_NOT_FOUND', {\n          lang,\n        }),\n      });\n    }\n    const isPasswordMatch = await bcrypt.compare(password, foundUser.password);\n    if (!isPasswordMatch) {\n      return this.responseService.Response({\n        data: null,\n        message: await this.i18n.t('response.AUTH.INVALID_CREDENTIALS', {\n          lang,\n        }),\n      });\n    }\n    const payload = { sub: foundUser.id, role: foundUser.role };\n    return this.responseService.Response({\n      data: this.jwtService.sign(payload),\n      statusCode: 200,\n      success: true,\n      message: await this.i18n.t('response.AUTH.LOGIN_SUCCESS', {\n        lang,\n      }),\n      key: 'access_token',\n    });\n  }\n\n  checkEmailExists(email: string): Promise {\n    return this.userRepository.exists({ where: { email } });\n  }\n  isEmail(username: string) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(username);\n  }\n  async checkPhoneExists(phone: string): Promise {\n    const user = this.userRepository.findOne({ where: { phone } });\n    return user.then((res) => {\n      return res ? true : false;\n    });\n  }\n\n  loginWithGoogle() {\n    return {\n      code: 200,\n      message: 'Login with Google',\n    };\n  }\n\n  async googleLogin(req: any) {\n    const lang = I18nContext.current().lang;\n    const emailExists = await this.checkEmailExists(req.user.email);\n    if (!emailExists) {\n      const userRole = Roles.USER;\n      const user = this.userRepository.create({\n        email: req.user.email,\n        name: req.user.firstName + ' ' + req.user.lastName,\n        role: userRole,\n        username: this.formatUsername(req.user.firstName),\n        password: await bcrypt.hash('password', 10),\n        profile_picture: req.user.picture,\n      });\n      await this.userRepository.save(user);\n    }\n    const user = await this.userRepository.findOne({\n      where: { email: req.user.email },\n    });\n    const payload = { sub: user.id, role: user.role };\n    return this.responseService.Response({\n      data: this.jwtService.sign(payload),\n      statusCode: 200,\n      success: true,\n      message: await this.i18n.t('response.AUTH.LOGIN_SUCCESS', {\n        lang,\n      }),\n      key: 'access_token',\n    });\n  }\n\n  async forgotPassword(passwordDto: ForgetPasswordDto) {\n    try {\n      const { username } = passwordDto;\n      const user = this.usernameFormat(username);\n      if (this.isEmail(user?.email)) {\n        const emailExists = this.checkEmailExists(user.email);\n        if (!emailExists) {\n          return this.responseService.Response({\n            data: null,\n            message: 'Email not found',\n          });\n        }\n      }\n      const phoneExists = await this.checkPhoneExists(user.phone);\n      if (!phoneExists) {\n        return this.responseService.Response({\n          data: null,\n          message: 'Phone number not found',\n          statusCode: 404,\n          success: false,\n        });\n      }\n      const existUser = await this.userRepository.findOne({ where: user });\n      if (!existUser) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n          statusCode: 404,\n          success: false,\n        });\n      }\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      await this.mailService.sendForgotPasswordEmail(\n        user.email,\n        otp,\n        existUser?.name,\n      );\n\n      const payload = {\n        otp,\n        exps: Math.floor(Date.now() / 1000) + 60 * 60,\n        id: existUser.id,\n      };\n\n      const token = this.jwtService.sign(payload);\n      return this.responseService.Response({\n        data: token,\n        message: 'Password reset link sent',\n        statusCode: 200,\n        success: true,\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: errorMsg,\n        statusCode: 500,\n        success: false,\n      });\n    }\n  }\n\n  async verifyOtp(otp: OTPDto, token: string) {\n    try {\n      const lang = I18nContext.current().lang;\n      const decoded = this.jwtService.decode(token) as any;\n      if (Number(decoded.otp) !== otp.otp) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.AUTH.OTP_INVALID', {\n            lang,\n          }),\n          statusCode: 400,\n          success: false,\n        });\n      }\n      if (decoded.exps \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticateMiddleware.html":{"url":"injectables/AuthenticateMiddleware.html","title":"injectable - AuthenticateMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticateMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/authenticate.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/middlewares/authenticate.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/authenticate.middleware.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport {\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Response, Request, NextFunction } from 'express';\nimport { ResponseService } from '@/utils';\n\n@Injectable()\nexport class AuthenticateMiddleware implements NestMiddleware {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly responseService: ResponseService,\n  ) { }\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const [bearer, token] = authHeader.split(' ');\n      if (bearer !== 'Bearer' || !token) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const user = await this.jwtService.verifyAsync(token, {\n        secret: 'secret',\n      });\n\n      req.user = user as User;\n    } catch (error) {\n      throw new UnauthorizedException(\n        this.responseService.Response({\n          success: false,\n          statusCode: 401,\n          message: 'Unauthorized',\n        }),\n      );\n    }\n    next();\n  }\n}\ninterface User {\n  sub: string;\n  iat: number;\n  exp: number;\n  readonly role: string;\n}\n\ndeclare module 'express' {\n  interface Request {\n    user?: User;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                created_at\n                            \n                            \n                                    \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                icon_url\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                updated_at\n                            \n                            \n                                    \n                                userCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        icon_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCategories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { uuid } from '@/utils';\n\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nimport { UserCategory } from '@/modules/user-category/entities/user-category.entity';\n\n@Entity('categories')\nexport class Category {\n  constructor() {\n    this.id = uuid();\n  }\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  icon_url: string;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  @Type(() => Date)\n  created_at: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  @Type(() => Date)\n  updated_at: Date;\n\n  @DeleteDateColumn({ type: 'timestamp' })\n  @Type(() => Date)\n  deleted_at: Date;\n\n  @Type(() => UserCategory)\n  userCategories: UserCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post()@Version('1')@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateCategoryDto})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status: boolean | string | undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiQuery({name: 'status', required: false, type: Boolean, description: 'Filter by status'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                        boolean | string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('category')@ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('1')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)@ApiBearerAuth()@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('category')@ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN)@Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFiles,\n  UseInterceptors,\n  Version,\n  UseGuards,\n  Query,\n  ParseUUIDPipe,\n} from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport {\n  ApiTags,\n  ApiAcceptedResponse,\n  ApiConsumes,\n  ApiBearerAuth,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { storage } from '@/utils';\nimport { AuthGuard } from '@/guards';\nimport { Roles } from '@/decorators';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post()\n  @Version('1')\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateCategoryDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('category') },\n    ),\n  )\n  create(\n    @Body() createCategoryDto: CreateCategoryDto,\n    @UploadedFiles()\n    files: {\n      icon_url: Express.Multer.File;\n    },\n  ) {\n    return this.categoryService.create(createCategoryDto, files);\n  }\n\n  @ApiQuery({\n    name: 'status',\n    required: false,\n    type: Boolean,\n    description: 'Filter by status',\n  })\n  @Get()\n  findAll(@Query('status') status: boolean | string | undefined) {\n    return this.categoryService.findAll(status);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.categoryService.findOne(id);\n  }\n\n  @Version('1')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('/category') },\n    ),\n  )\n  @ApiBearerAuth()\n  @Patch(':id')\n  update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n    @UploadedFiles()\n    files: {\n      icon_url: Express.Multer.File;\n    },\n  ) {\n    return this.categoryService.update(id, updateCategoryDto, files);\n  }\n\n  @ApiTags('category')\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Delete(':id')\n  remove(@Param('id', ParseUUIDPipe) id: string) {\n    return this.categoryService.remove(id);\n  }\n\n  @ApiTags('category')\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Patch(':id/status')\n  updateStatus(@Param('id') id: string) {\n    return this.categoryService.changeStatus(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_exports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService \n\nCategoryService \n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryService  -->\n\nCategoryModule->CategoryService \n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nCategoryModule -->\n\nResponseService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\nimport { ResponseService } from '@/utils';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoryController],\n  providers: [CategoryService, ResponseService],\n  exports: [CategoryService],\n})\nexport class CategoryModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                categoryExist\n                            \n                            \n                                    Async\n                                changeStatus\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository, responseService: ResponseService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/category/category.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        categoryExist\n                        \n                    \n                \n            \n            \n                \n                        \n                    categoryExist(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatus(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto, files: FilesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: boolean | string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        boolean | string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto, files: FilesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCategoryDto, FilesDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\nimport { Repository } from 'typeorm';\nimport { removeFile, ResponseService } from '@/utils';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n  ) { }\n  /*\n   *Create Category function\n   */\n  async create(createCategoryDto: CreateCategoryDto, files: FilesDto) {\n    try {\n      const lang = I18nContext.current().lang;\n      const categoryExist = await this.categoryExist(createCategoryDto.name);\n      if (categoryExist) {\n        removeFile(files.icon_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_EXIST', { lang }),\n        });\n      }\n      const category = this.categoryRepository.create({\n        name: createCategoryDto.name.toLowerCase(),\n        description: createCategoryDto.description,\n        icon_url: 'category/' + files.icon_url[0]?.filename as string,\n        status: false,\n      });\n      await this.categoryRepository.save(category);\n      return this.responseService.Response({\n        data: category,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_CREATED_SUCCESSFULLY',\n          { lang },\n        ),\n        key: 'category',\n        statusCode: 201,\n        success: true,\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      const lang = I18nContext.current().lang;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: await this.i18n.t('validation.USER_REGISTER.USER_FAIL', {\n          lang,\n        }),\n        success: false,\n        key: 'categories',\n      });\n    }\n  }\n\n  async findAll(filter: boolean | string | null) {\n    const lang = I18nContext.current().lang;\n    const categories = await this.categoryRepository.find({\n      where: filter ? { status: filter as boolean } : {},\n    });\n    return this.responseService.Response({\n      data: categories,\n      message: this.i18n.t('response.CATEGORY.CATEGORY_FETCH_SUCCESSFULLY', {\n        lang,\n      }),\n    });\n  }\n\n  async findOne(id: string) {\n    const lang = I18nContext.current().lang;\n    try {\n      const categoryExist = await this.categoryRepository.findOne({\n        where: { id },\n      });\n      if (!categoryExist) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      return this.responseService.Response({\n        data: category,\n        message: this.i18n.t('response.CATEGORY.CATEGORY_FETCH_SUCCESSFULLY', {\n          lang,\n        }),\n        key: 'category',\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n    files: FilesDto,\n  ) {\n    const lang = I18nContext.current().lang;\n    try {\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      if (!category) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      if (files.icon_url) {\n        removeFile(category.icon_url);\n      }\n\n      const updatedCategory = await this.categoryRepository.save({\n        ...category,\n        ...updateCategoryDto,\n        icon_url: files\n          ? ('category/' + files.icon_url[0]?.filename as string)\n          : category.icon_url,\n      });\n      return this.responseService.Response({\n        data: updatedCategory,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_UPDATED_SUCCESSFULLY',\n          {\n            lang,\n          },\n        ),\n        key: 'category',\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const lang = I18nContext.current().lang;\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      if (!category) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      removeFile(category.icon_url);\n      await this.categoryRepository.delete(id);\n      return this.responseService.Response({\n        data: null,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_DELETED_SUCCESSFULLY',\n          {\n            lang,\n          },\n        ),\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n  protected async categoryExist(name: string): Promise {\n    const exist = await this.categoryRepository.findOne({\n      where: {\n        name: name.toLowerCase(),\n      },\n    });\n    if (exist) {\n      return true;\n    }\n    return false;\n  }\n\n  async changeStatus(id: string) {\n    const lang = I18nContext.current().lang;\n    try {\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      if (!category) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      const updatedCategory = await this.categoryRepository.save({\n        ...category,\n        status: !category.status,\n      });\n      return this.responseService.Response({\n        data: updatedCategory,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_STATUS_UPDATED_SUCCESSFULLY',\n          {\n            lang,\n          },\n        ),\n        key: 'category',\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configs/config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            google\n                                        \n                                \n                                \n                                        \n                                            mail\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            prefix\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface Config {\n  prefix: string;\n  port: number;\n  secret: string;\n  google: {\n    clientId: string;\n    clientSecret: string;\n    callbackURL?: string;\n  };\n  mail: {\n    host: string;\n    auth: {\n      user: string;\n      pass: string;\n    };\n    port?: number;\n    from?: string;\n  };\n}\n\nexport const config = (): Config => ({\n  prefix: process.env.PREFIX || '!',\n  port: parseInt(process.env.PORT, 10) || 3000,\n  secret: process.env.JWT_SECRET || 'secret',\n  google: {\n    clientId: process.env.GOOGLE_CLIENT_ID || '',\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n    callbackURL:\n      process.env.GOOGLE_CALLBACK_URL ||\n      'http://localhost:3000/auth/google/callback',\n  },\n  mail: {\n    host: process.env.MAIL_HOST || 'smtp.gmail.com',\n    auth: {\n      user: process.env.MAIL_USER || '',\n      pass: process.env.MAIL_PASS || 'topsecret',\n    },\n    port: parseInt(process.env.MAIL_PORT, 10) || 587,\n    from:\n      `\"No Reply\" ${process.env.MAIL_FROM}` ||\n      '\"No Reply\" ',\n  },\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Course.html":{"url":"entities/Course.html","title":"entity - Course","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/entities/course.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                    \n                                    \n                                currency\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                enroll\n                            \n                            \n                                    \n                                featured\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isFree\n                            \n                            \n                                    \n                                    \n                                lessons\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                thumbnail\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, category => category.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'USD'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enroll\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Enroll\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, enroll => enroll.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isFree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lessons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Lesson[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@OneToMany(undefined, lesson => lesson.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})@IsString()@Unique('slug', ['slug'], {deferrable: 'INITIALLY DEFERRED'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:103\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToOne,\n  ManyToOne,\n  DeleteDateColumn,\n  Unique,\n  OneToMany,\n} from 'typeorm';\n\nimport { IsString, IsNotEmpty } from 'class-validator';\nimport { uuid } from '@/utils';\n\nimport { User } from '@/modules/user/entities/user.entity';\nimport { Category } from '@/modules/category/entities/category.entity';\nimport { Enroll } from '@/modules/enrolls/entities/enroll.entity';\nimport { Lesson } from '@/modules/lessons/entities/lesson.entity';\nimport { Type } from 'class-transformer';\n\n@Entity('courses')\nexport class Course {\n  constructor() {\n    this.id = uuid();\n  }\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @Column({\n    nullable: false,\n    unique: true,\n  })\n  @IsString()\n  @Unique('slug', ['slug'], {\n    deferrable: 'INITIALLY DEFERRED',\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: false,\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  thumbnail: string;\n\n  @Column('decimal', {\n    precision: 10,\n    scale: 2,\n  })\n  @IsString()\n  @IsNotEmpty()\n  price: string;\n\n  @Column({\n    type: 'enum',\n    enum: ['USD', 'EUR', 'RFW'],\n    default: 'USD',\n  })\n  @IsString()\n  @IsNotEmpty()\n  currency: string;\n\n  @Column({ nullable: false, default: false })\n  isFree: boolean;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({ nullable: false, default: false })\n  featured: boolean;\n\n  @ManyToOne(() => User, (user) => user.id)\n  creator: User;\n\n  @ManyToOne(() => Enroll, (enroll) => enroll.id)\n  enroll: Enroll;\n\n  @OneToOne(() => Category, (category) => category.id)\n  category: Category;\n\n  @Type(() => Lesson)\n  @OneToMany(() => Lesson, (lesson) => lesson.id)\n  lessons: Lesson[];\n\n  @CreateDateColumn({ type: 'timestamp', nullable: false })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', nullable: false })\n  updatedAt: Date;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CoursesController.html":{"url":"controllers/CoursesController.html","title":"controller - CoursesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CoursesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/courses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                courses\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                changeStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findMyCourse\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatus(slug: string, status: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@ApiQuery({name: 'status', required: true, type: Boolean})@Put('change-status/:slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCourseDto: CreateCourseDto, files: literal type, user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post()@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateCourseDto})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCourseDto\n                                            \n                                                            CreateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findMyCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMyCourse(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('my-course')@ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(slug: string, updateCourseDto: UpdateCourseDto, files: literal type, user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: UpdateCourseDto})@UseInterceptors(undefined)@Patch(':slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCourseDto\n                                            \n                                                            UpdateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  UseInterceptors,\n  UploadedFiles,\n  Put,\n  Query,\n  DefaultValuePipe,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { CoursesService } from './courses.service';\nimport { CreateCourseDto } from './dto/create-course.dto';\nimport { UpdateCourseDto } from './dto/update-course.dto';\nimport {\n  ApiAcceptedResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { RolesEnum } from '@/enums';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { AssociativeArray, storage } from '@/utils';\n\n@ApiTags('courses')\n@Controller('courses')\nexport class CoursesController {\n  constructor(private readonly coursesService: CoursesService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post()\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateCourseDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'thumbnail_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('course') },\n    ),\n  )\n  create(\n    @Body() createCourseDto: CreateCourseDto,\n    @UploadedFiles()\n    files: {\n      thumbnail_url: Express.Multer.File[];\n    },\n    @User() user: AuthUserType,\n  ) {\n    return this.coursesService.create(createCourseDto, files, user);\n  }\n\n  @Get()\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,) {\n    return this.coursesService.findAll(filters);\n  }\n\n  @Get('my-course')\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  findMyCourse(@User() user: AuthUserType) {\n    return this.coursesService.findMyCourse(user);\n  }\n  @Get(':slug')\n  findOne(@Param('slug') slug: string) {\n    return this.coursesService.findOne(slug);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: UpdateCourseDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'thumbnail_url',\n          maxCount: 1,\n        },\n      ],\n      { storage },\n    ),\n  )\n  @Patch(':slug')\n  update(\n    @Param('slug') slug: string,\n    @Body() updateCourseDto: UpdateCourseDto,\n    @UploadedFiles()\n    files: {\n      thumbnail_url: Express.Multer.File[];\n    },\n    @User() user: AuthUserType,\n  ) {\n    return this.coursesService.update(slug, updateCourseDto, files, user);\n  }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.coursesService.remove(id);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @ApiQuery({ name: 'status', required: true, type: Boolean })\n  @Put('change-status/:slug')\n  changeStatus(@Param('slug') slug: string, @Query('status') status: boolean) {\n    return this.coursesService.changeStatus(slug, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoursesModule.html":{"url":"modules/CoursesModule.html","title":"module - CoursesModule","body":"\n                   \n\n\n\n\n    Modules\n    CoursesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoursesModule\n\n\n\ncluster_CoursesModule_providers\n\n\n\ncluster_CoursesModule_imports\n\n\n\ncluster_CoursesModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nCoursesModule\n\nCoursesModule\n\nCoursesModule -->\n\nUserModule->CoursesModule\n\n\n\n\n\nCoursesService \n\nCoursesService \n\nCoursesService  -->\n\nCoursesModule->CoursesService \n\n\n\n\n\nCoursesService\n\nCoursesService\n\nCoursesModule -->\n\nCoursesService->CoursesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/courses/courses.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CoursesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CoursesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CoursesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CoursesService } from './courses.service';\nimport { CoursesController } from './courses.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Course } from './entities/course.entity';\nimport { UserModule } from '../user';\nimport { Category } from '../category/entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Course, Category]), UserModule],\n  controllers: [CoursesController],\n  providers: [CoursesService],\n  exports: [CoursesService],\n})\nexport class CoursesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CoursesService.html":{"url":"injectables/CoursesService.html","title":"injectable - CoursesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CoursesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/courses.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeStatus\n                            \n                            \n                                    Async\n                                courseExist\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findMyCourse\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(courseRepository: Repository, categoryRepository: Repository, responseService: ResponseService, i18n: I18nService, userService: UserService, coursePagination: PaginateHelper)\n                    \n                \n                        \n                            \n                                Defined in src/modules/courses/courses.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        courseRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        coursePagination\n                                                  \n                                                        \n                                                                        PaginateHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatus(id: string, status: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:241\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        courseExist\n                        \n                    \n                \n            \n            \n                \n                        \n                    courseExist(title: string, slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCourseDto: CreateCourseDto, files: FilesDto, user: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCourseDto\n                                            \n                                                            CreateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMyCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMyCourse(user: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:274\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCourseDto: UpdateCourseDto, files: FilesDto, user: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCourseDto\n                                            \n                                                            UpdateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCourseDto, FilesDto } from './dto/create-course.dto';\nimport { UpdateCourseDto } from './dto/update-course.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Course } from './entities/course.entity';\nimport { Repository } from 'typeorm';\nimport {\n  generateSlug, removeFile, ResponseService,\n  AssociativeArray,\n  filterQueryBuilderFromRequest,\n} from '@/utils';\nimport { I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { AuthUserType } from '@/guards';\nimport { UserService } from '../user/user.service';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { Category } from '../category/entities/category.entity';\n\n@Injectable()\nexport class CoursesService {\n  constructor(\n    @InjectRepository(Course)\n    private courseRepository: Repository,\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n    private readonly userService: UserService,\n    private readonly coursePagination: PaginateHelper,\n  ) { }\n\n  async create(\n    createCourseDto: CreateCourseDto,\n    files: FilesDto,\n    user: AuthUserType,\n  ) {\n    try {\n      const slug = generateSlug(createCourseDto.title);\n      const courseExist = await this.courseExist(createCourseDto.title, slug);\n      const category = await this.categoryRepository.findOne({\n        where: { id: createCourseDto.category_id },\n      });\n      if (!category) {\n        removeFile(files.thumbnail_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND'),\n        });\n      }\n      if (courseExist) {\n        removeFile(files.thumbnail_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.COURSE.COURSE_EXIST'),\n        });\n      }\n\n      const images = 'course/' + files.thumbnail_url[0]?.filename;\n      const userDetail = await this.userService.userDetail(user.sub);\n      const course = this.courseRepository.create({\n        ...createCourseDto,\n        price: createCourseDto.price.toString(),\n        slug,\n        thumbnail: images,\n        isFree: createCourseDto.isFree === 'true',\n        featured: createCourseDto.featured === 'true',\n        creator: userDetail,\n        category\n      });\n      await this.courseRepository.save(course);\n      return this.responseService.Response({\n        data: course,\n        message: this.i18n.t('response.COURSE.COURSE_CREATED_SUCCESSFULLY'),\n        key: 'course',\n        statusCode: 201,\n        success: true,\n      });\n    } catch (e) {\n      removeFile(files.thumbnail_url[0].filename);\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: this.i18n.t('response.COURSE.COURSE_FAILED_TO_CREATE'),\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async findAll(filter?: AssociativeArray) {\n    try {\n      const coursesQuery = this.courseRepository.createQueryBuilder('course');\n      filterQueryBuilderFromRequest(coursesQuery, filter);\n      const courses = await this.coursePagination.run(coursesQuery);\n\n      return this.responseService.Response({\n        data: courses,\n        message: 'Courses fetched successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch courses',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async findOne(slug: string) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { slug },\n        relations: ['creator'],\n      });\n      return this.responseService.Response({\n        data: course,\n        message: 'Course fetched successfully',\n        success: true,\n        key: 'course',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch course',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async update(\n    id: string,\n    updateCourseDto: UpdateCourseDto,\n    files: FilesDto,\n    user: AuthUserType,\n  ) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id },\n        relations: ['creator'],\n      });\n      if (!course) {\n        removeFile(files.thumbnail_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: 'Course not found',\n          success: false,\n          key: 'courses',\n        });\n      }\n      let images: string;\n      if (files.thumbnail_url) {\n        images = files.thumbnail_url[0]?.filename;\n      } else {\n        images = course.thumbnail;\n      }\n\n      const userDetail = await this.userService.userDetail(user.sub);\n      const updatedCourse = await this.courseRepository.save({\n        ...course,\n        ...updateCourseDto,\n        thumbnail: images,\n        creator: userDetail,\n        isFree: updateCourseDto.isFree\n          ? updateCourseDto.isFree === 'true'\n          : course.isFree,\n        featured: updateCourseDto.featured\n          ? updateCourseDto.featured === 'true'\n          : course.featured,\n      });\n      return this.responseService.Response({\n        data: updatedCourse,\n        message: 'Course updated successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      removeFile(files.thumbnail_url[0].filename);\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to update course',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id },\n        relations: ['creator'],\n      })\n      if (!course) {\n        return this.responseService.Response({\n          data: null,\n          message: 'Course not found',\n          success: false,\n          key: 'courses',\n        });\n      }\n      if (course.thumbnail) {\n        removeFile(course.thumbnail);\n      }\n      await this.courseRepository.softDelete(id);\n\n      return this.responseService.Response({\n        data: null,\n        message: 'Course deleted successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to delete course',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async courseExist(title: string, slug: string): Promise {\n    const course = await this.courseRepository.exists({\n      where: {\n        title,\n        slug,\n      },\n    });\n    return course;\n  }\n\n  async changeStatus(id: string, status: boolean) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id },\n      });\n      if (!course) {\n        return this.responseService.Response({\n          data: null,\n          message: 'Course not found',\n          success: false,\n          key: 'courses',\n        });\n      }\n      const updatedCourse = await this.courseRepository.save({\n        ...course,\n        status,\n      });\n      return this.responseService.Response({\n        data: updatedCourse,\n        message: 'Course status updated successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to update course status',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n  async findMyCourse(user: AuthUserType) {\n    try {\n      const creator = await this.userService.userDetail(user.sub);\n      const courses = await this.courseRepository.find({\n        where: { creator },\n      });\n\n      return this.responseService.Response({\n        data: courses,\n        message: 'Courses fetched successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch courses',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'example@example.com | 078888888'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon_url\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Category Description', description: 'The description of the category'})@IsString({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'The icon url of the category', type: 'string', format: 'binary'})@IsString({message: undefined})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Category Name', description: 'The name of the category'})@IsString({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCategoryDto {\n  @ApiProperty({\n    example: 'Category Name',\n    description: 'The name of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  name: string;\n\n  @ApiProperty({\n    example: 'Category Description',\n    description: 'The description of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The icon url of the category',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  icon_url?: Express.Multer.File;\n}\n\nexport class FilesDto {\n  icon_url: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCourseDto.html":{"url":"classes/CreateCourseDto.html","title":"class - CreateCourseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCourseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/dto/create-course.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                category_id\n                            \n                            \n                                    \n                                    \n                                    \n                                currency\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                featured\n                            \n                            \n                                    \n                                    \n                                isFree\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                thumbnail_url\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        category_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'category Id', description: 'The category of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'USD', description: 'The currency of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Course Description', description: 'The description of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, type: 'boolean'})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isFree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, type: 'boolean'})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 200, description: 'The price of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        thumbnail_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'the Thumbnail Image', type: 'string', format: 'binary'})@IsString({message: undefined})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Course Name', description: 'The name of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCourseDto {\n  @ApiProperty({\n    example: 'Course Name',\n    description: 'The name of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_NAME_REQUIRED',\n    ),\n  })\n  title: string;\n\n  @ApiProperty({\n    example: 'Course Description',\n    description: 'The description of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 200,\n    description: 'The price of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_PRICE_REQUIRED',\n    ),\n  })\n  price: string;\n\n  @ApiProperty({\n    example: 'USD',\n    description: 'The currency of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CURRENT_PRICE_REQUIRED',\n    ),\n  })\n  currency: string;\n\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FREE_REQUIRED',\n    ),\n  })\n  isFree: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'the Thumbnail Image',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  thumbnail_url: string;\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FEATURED_REQUIRED',\n    ),\n  })\n  featured: string;\n\n  @ApiProperty({\n    example: 'category Id',\n    description: 'The category of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CATEGORY_REQUIRED',\n    ),\n  })\n  category_id: string;\n}\n\nexport class FilesDto {\n  thumbnail_url: Express.Multer.File[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLessonDto.html":{"url":"classes/CreateLessonDto.html","title":"class - CreateLessonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLessonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/dto/create-lesson.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                content_url\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                contentMetadata\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isPublished\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                thumbnail\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        content_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'the File content ', type: 'string', format: 'binary'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contentMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isPublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, type: 'boolean'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'the thumbnail', type: 'string', format: 'binary'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lesson Title', description: 'Leason tilte must be listed'})@IsString()@IsNotEmpty({message: 'Lesson title is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LessonType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: LessonType, default: undefined})@IsEnum(LessonType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsEnum, ValidateIf } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { LessonType } from '../entities/lesson.entity';\n\nexport class CreateLessonDto {\n    @ApiProperty({\n        example: 'Lesson Title',\n        description: 'Leason tilte must be listed'\n    })\n    @IsString()\n    @IsNotEmpty({\n        message: 'Lesson title is required'\n    })\n    title: string;\n\n    @ApiProperty()\n    @IsString()\n    @IsOptional()\n    description?: string;\n\n    @ApiProperty({\n        enum: LessonType,\n        default: LessonType.PDF\n    })\n    @IsEnum(LessonType)\n    type: LessonType;\n\n    @ApiProperty({\n        example: {\n            \"user\": \"john\"\n        }\n    })\n    @IsOptional()\n    contentMetadata?: Record;\n    @ApiProperty({\n        example: false,\n        type: 'boolean'\n    })\n    @IsOptional()\n    isPublished?: boolean;\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the File content ',\n        type: 'string',\n        format: 'binary',\n\n    })\n    @IsOptional()\n    content_url?: string\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the thumbnail',\n        type: 'string',\n        format: 'binary',\n    })\n    @IsOptional()\n    thumbnail?: string\n}\n\nexport class FilesDTO {\n    content_url: Express.Multer.File;\n    thumbnail: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuizDto.html":{"url":"classes/CreateQuizDto.html","title":"class - CreateQuizDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuizDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/dto/create-quiz.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                questions\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Quiz Description', description: 'Quiz description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/dto/create-quiz.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/dto/create-quiz.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Quiz Title', description: 'Quiz title must be listed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/dto/create-quiz.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { QuestionType } from '../entities/quiz.entity';\n\nexport class CreateQuizDto {\n  @ApiProperty({\n    example: 'Quiz Title',\n    description: 'Quiz title must be listed',\n  })\n  title: string;\n  @ApiProperty({\n    example: 'Quiz Description',\n    description: 'Quiz description',\n  })\n  description?: string;\n  @ApiProperty({\n    example: [\n      {\n        text: 'Question 1',\n        type: QuestionType.SINGLE_CHOICE,\n        options: [\n          { text: 'Option A', isCorrect: true },\n          { text: 'Option B', isCorrect: false },\n          { text: 'Option C', isCorrect: false },\n          { text: 'Option D', isCorrect: false },\n        ],\n      },\n      {\n        text: 'Question 2',\n        type: QuestionType.TEXT,\n        correctAnswers: ['Answer 1'],\n      },\n    ],\n  })\n  questions: {\n    text: string;\n    type: QuestionType;\n    options?: {\n      text: string;\n      isCorrect: boolean;\n    }[];\n    correctAnswers?: string[];\n  }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCategoryDto.html":{"url":"classes/CreateUserCategoryDto.html","title":"class - CreateUserCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/dto/create-user-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                categoryId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({})@IsArray()@IsString({each: true, message: undefined})@IsNotEmpty({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/dto/create-user-category.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsArray } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateUserCategoryDto {\n  @ApiProperty({})\n  @IsArray()\n  @IsString({\n    each: true,\n    message: i18nValidationMessage(\n      'validation.USER_CATEGORY_REGISTER.CATEGORY_ID_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_CATEGORY_REGISTER.CATEGORY_ID_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_CATEGORY_REGISTER.CATEGORY_ID_REQUIRED',\n    ),\n  })\n  categoryId: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'example@example.com', description: 'The email of the user'})@IsEmail({allow_ip_domain: false, allow_utf8_local_part: true, require_tld: true}, {message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', description: 'The name of the user'})@IsString({message: undefined})@IsNotEmpty()@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'johndoe', description: 'The password '})@IsString()@IsNotEmpty({message: undefined})@MinLength(6, {message: undefined})@Matches(/^[a-zA-Z0-9]+$/, {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+250788888888', description: 'The phone number of the user'})@IsPhoneNumber('RW', {message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Default value : Roles.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user', description: 'The role of the user'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john_doe', description: 'The username of the user'})@IsString({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n  IsPhoneNumber,\n  IsOptional,\n} from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { RolesEnum as Roles } from '@/enums';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john_doe',\n    description: 'The username of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The name of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @MaxLength(50)\n  name: string;\n\n  @ApiProperty({\n    example: 'example@example.com',\n    description: 'The email of the user',\n  })\n  @IsEmail(\n    {\n      allow_ip_domain: false,\n      allow_utf8_local_part: true,\n      require_tld: true,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.USER_REGISTER.EMAIL_INVALID',\n      ),\n    },\n  )\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.EMAIL_REQUIRED',\n    ),\n  })\n  email: string;\n  @ApiProperty({\n    example: '+250788888888',\n    description: 'The phone number of the user',\n  })\n  @IsPhoneNumber('RW', {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_INVALID',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_REQUIRED',\n    ),\n  })\n  phone: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'The role of the user',\n  })\n  @IsOptional()\n  role: Roles = Roles.USER;\n\n  @ApiProperty({\n    example: 'johndoe',\n    description: 'The password ',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_REQUIRED',\n    ),\n  })\n  @MinLength(6, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MIN',\n    ),\n  })\n  @Matches(/^[a-zA-Z0-9]+$/, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MATCH',\n    ),\n  })\n  password: string;\n}\n\n\nexport class ProfileDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The profile picture of the user',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PROFILE_PIC_REQUIRED',\n    ),\n  })\n  profile_picture?: Express.Multer.File;\n\n  @ApiProperty({\n    example: 'Kigali, Rwanda',\n    description: 'The address of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.ADDRESS_REQUIRED',\n    ),\n  })\n  address: string;\n\n  @ApiProperty({\n    example: 'I am a software engineer',\n    description: 'The bio of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.BIO_REQUIRED',\n    ),\n  })\n  bio: string;\n}\nexport class ImagePicDto {\n  profile_picture: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomExceptionFilter.html":{"url":"classes/CustomExceptionFilter.html","title":"class - CustomExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/response/index.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/response/index.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomResponseInterceptor.html":{"url":"classes/CustomResponseInterceptor.html","title":"class - CustomResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/response.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/response.interceptor.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, NestInterceptor } from '@nestjs/common';\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nexport class CustomResponseInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    const request = context.switchToHttp().getRequest();\n    const response = context.switchToHttp().getResponse();\n    const statusCode = response.statusCode;\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        statusCode,\n        success: true,\n        message: statusCode >= 400 ? 'Error' : 'Success',\n        error: statusCode >= 400 ? response.message : null,\n        timestamp: Date.now(),\n        version: 'v1',\n        path: request.url,\n      })),\n      catchError((err) => {\n        const statusCode = err instanceof HttpException ? err.getStatus() : 500;\n        const errorResponse = {\n          statusCode,\n          message: err.message || 'Internal server error',\n          error: err.name || 'Error',\n          timestamp: Date.now(),\n          version: 'v1',\n          path: request.url,\n          data: {},\n        };\n        return throwError(() => new HttpException(errorResponse, statusCode));\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configs/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        connectToDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    connectToDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/configs/db.module.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { config } from './config';\nimport { Logger } from '@/utils';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [config],\n      envFilePath: ['.env', '.env.development', '.env.production'],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DbModule {\n  constructor(private readonly configService: ConfigService) {\n    this.connectToDatabase();\n  }\n\n  private async connectToDatabase() {\n    const databaseName = this.configService.get('DB_DATABASE');\n    const connection = TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE'),\n      }),\n      inject: [ConfigService],\n    });\n\n    try {\n      await connection;\n      Logger.logger.log(`Database is connected successfully 🌏🔥`);\n    } catch (error) {\n      const message = (error as Error).message;\n      Logger.logger.error(`Failed to connect to ${databaseName} database`, {\n        error: message,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DefaultModule.html":{"url":"modules/DefaultModule.html","title":"module - DefaultModule","body":"\n                   \n\n\n\n\n    Modules\n    DefaultModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DefaultModule\n\n\n\ncluster_DefaultModule_providers\n\n\n\n\nDefaultService\n\nDefaultService\n\n\n\nDefaultModule\n\nDefaultModule\n\nDefaultModule -->\n\nDefaultService->DefaultModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nDefaultModule -->\n\nResponseService->DefaultModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/default/default.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DefaultService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ResponseService } from '@/utils';\nimport { Controller, Get, Injectable, Module } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class DefaultService {\n  constructor(\n    private readonly responseService: ResponseService,\n    private readonly I18nService: I18nService,\n  ) {}\n  getHello() {\n    const lang = I18nContext.current().lang;\n    return this.responseService.Response({\n      success: true,\n      statusCode: 200,\n      data: {\n        message: this.I18nService.translate('response.DEFAULT_MESSAGE', {\n          lang,\n        }),\n      },\n      message: this.I18nService.translate('response.DEFAULT_MESSAGE', { lang }),\n    });\n  }\n}\n\n@Controller('/')\n@ApiTags('App')\nclass AppController {\n  constructor(private readonly DefaultService: DefaultService) {}\n  @Get()\n  getHello() {\n    return this.DefaultService.getHello();\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  providers: [ResponseService, DefaultService],\n})\nexport class DefaultModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DefaultService.html":{"url":"injectables/DefaultService.html","title":"injectable - DefaultService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DefaultService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/default/default.module.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(responseService: ResponseService, I18nService: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/default/default.module.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        I18nService\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/default/default.module.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ResponseService } from '@/utils';\nimport { Controller, Get, Injectable, Module } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class DefaultService {\n  constructor(\n    private readonly responseService: ResponseService,\n    private readonly I18nService: I18nService,\n  ) {}\n  getHello() {\n    const lang = I18nContext.current().lang;\n    return this.responseService.Response({\n      success: true,\n      statusCode: 200,\n      data: {\n        message: this.I18nService.translate('response.DEFAULT_MESSAGE', {\n          lang,\n        }),\n      },\n      message: this.I18nService.translate('response.DEFAULT_MESSAGE', { lang }),\n    });\n  }\n}\n\n@Controller('/')\n@ApiTags('App')\nclass AppController {\n  constructor(private readonly DefaultService: DefaultService) {}\n  @Get()\n  getHello() {\n    return this.DefaultService.getHello();\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  providers: [ResponseService, DefaultService],\n})\nexport class DefaultModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Enroll.html":{"url":"entities/Enroll.html","title":"entity - Enroll","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Enroll\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/enrolls/entities/enroll.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                course\n                            \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                student\n                            \n                            \n                                    \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        course\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Course\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ManyToOne(undefined, course => course.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        student\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, ManyToOne, JoinColumn, JoinTable } from \"typeorm\";\nimport { User } from \"@/modules/user/entities/user.entity\";\nimport { Course } from '@/modules/courses/entities/course.entity';\nimport { Type } from \"class-transformer\";\nimport { uuid } from \"@/utils\";\nimport \"reflect-metadata\";\n\n@Entity('enrolles')\nexport class Enroll {\n    constructor(partial: Partial) {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Type(() => Course)\n    @ManyToOne(() => Course, course => course.id)\n    course: Course;\n\n    @Type(() => User)\n    @ManyToOne(() => User, user => user.id)\n    student: User;\n\n    @Column({ default: true })\n    status: boolean;\n\n    @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n    created_at: Date;\n    @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n    updated_at: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    deleted_at: Date;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EnrollsController.html":{"url":"controllers/EnrollsController.html","title":"controller - EnrollsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EnrollsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/enrolls/enrolls.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                enrolls\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                changeStatusCourse\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                enrollCourse\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getInstructorEnrollsCourses\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getStudentEnrollsCourses\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                unenrollCourse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        changeStatusCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatusCourse(user: AuthUserType, courseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@Patch('/:courseId/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        enrollCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    enrollCourse(user: AuthUserType, courseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@UseGuards(AuthGuard)@Post('/:courseId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getInstructorEnrollsCourses\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInstructorEnrollsCourses(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR, RolesEnum.MENTOR)@UseGuards(AuthGuard)@Get('instructor')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getStudentEnrollsCourses\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStudentEnrollsCourses(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@Get('courses')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        unenrollCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    unenrollCourse(user: AuthUserType, courseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@Put('/:courseId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Patch, Post, Put, UseGuards } from '@nestjs/common';\nimport { EnrollsService } from './enrolls.service';\nimport { Roles, User } from '@/decorators';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('enrolls')\n@Controller('enrolls')\nexport class EnrollsController {\n  constructor(private readonly enrollsService: EnrollsService) { }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @Get('courses')\n  getStudentEnrollsCourses(@User() user: AuthUserType) {\n    return this.enrollsService.studentGetEnrollsCourses(user);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR, RolesEnum.MENTOR)\n  @UseGuards(AuthGuard)\n  @Get('instructor')\n  getInstructorEnrollsCourses(@User() user: AuthUserType) {\n    return this.enrollsService.instructorGetEnrollsCourses(user);\n  }\n\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  @Post('/:courseId')\n  enrollCourse(@User() user: AuthUserType, @Param('courseId') courseId: string) {\n    return this.enrollsService.studentEnroll(courseId, user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @Put('/:courseId')\n  unenrollCourse(@User() user: AuthUserType, @Param('courseId') courseId: string) {\n    return this.enrollsService.unenrollCourse(courseId, user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @Patch('/:courseId/status')\n  changeStatusCourse(@User() user: AuthUserType, @Param('courseId') courseId: string) {\n    return this.enrollsService.studentEnrollChangeStatus(courseId, user);\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnrollsModule.html":{"url":"modules/EnrollsModule.html","title":"module - EnrollsModule","body":"\n                   \n\n\n\n\n    Modules\n    EnrollsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EnrollsModule\n\n\n\ncluster_EnrollsModule_providers\n\n\n\ncluster_EnrollsModule_exports\n\n\n\n\nEnrollsService \n\nEnrollsService \n\n\n\nEnrollsModule\n\nEnrollsModule\n\nEnrollsService  -->\n\nEnrollsModule->EnrollsService \n\n\n\n\n\nEnrollsService\n\nEnrollsService\n\nEnrollsModule -->\n\nEnrollsService->EnrollsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/enrolls/enrolls.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EnrollsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EnrollsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EnrollsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EnrollsService } from './enrolls.service';\nimport { EnrollsController } from './enrolls.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Enroll } from './entities/enroll.entity';\nimport { Course } from '../courses/entities/course.entity';\nimport { User } from '../user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Enroll, User, Course])],\n  controllers: [EnrollsController],\n  providers: [EnrollsService],\n  exports: [EnrollsService],\n})\nexport class EnrollsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EnrollsService.html":{"url":"injectables/EnrollsService.html","title":"injectable - EnrollsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EnrollsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/enrolls/enrolls.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                instructorGetEnrollsCourses\n                            \n                            \n                                studentEnroll\n                            \n                            \n                                studentEnrollChangeStatus\n                            \n                            \n                                studentGetEnrollsCourses\n                            \n                            \n                                unenrollCourse\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(enrollRepository: Repository, userRepository: Repository, courseRepository: Repository, responseService: ResponseService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/enrolls/enrolls.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        enrollRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        courseRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        instructorGetEnrollsCourses\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        studentEnroll\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        studentEnrollChangeStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        studentGetEnrollsCourses\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unenrollCourse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Enroll } from './entities/enroll.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Course } from '../courses/entities/course.entity';\nimport { ResponseService } from '@/utils';\nimport { AuthUserType } from '@/guards';\nimport { I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\n@Injectable()\nexport class EnrollsService {\n    constructor(\n        @InjectRepository(Enroll)\n        private enrollRepository: Repository,\n        @InjectRepository(User)\n        private userRepository: Repository,\n        @InjectRepository(Course)\n        private courseRepository: Repository,\n        private readonly responseService: ResponseService,\n        private readonly i18n: I18nService,\n\n    ) { }\n\n    studentEnroll = async (courseId: string, student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const existUserEnrolled = await this.enrollRepository.findOne({\n                where: {\n                    course: { id: courseId },\n                    student: user,\n                }\n            })\n            if (existUserEnrolled) {\n                return this.responseService.Response({\n                    message: 'You have already enrolled in this course',\n                    data: null\n                })\n            }\n            const course = await this.courseRepository.findOne({\n                where: { id: courseId }\n            })\n            if (!course) {\n                return this.responseService.Response({\n                    message: 'Course not found',\n                    data: null\n                })\n            }\n            const enroll = this.enrollRepository.create({\n                course,\n                student: user\n            })\n            await this.enrollRepository.save(enroll)\n            return this.responseService.Response({\n                message: 'Enrolled successfully',\n                data: enroll,\n                key: 'enroll'\n            })\n\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n\n    unenrollCourse = async (courseId: string, student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const enroll = await this.enrollRepository.findOne({\n                where: {\n                    course: { id: courseId },\n                    student: user\n                }\n            })\n            if (!enroll) {\n                return this.responseService.Response({\n                    message: 'You have not enrolled in this course',\n                    data: null\n                })\n            }\n            await this.enrollRepository.remove(enroll)\n            return this.responseService.Response({\n                message: 'Unenrolled successfully',\n                data: null\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n    studentEnrollChangeStatus = async (courseId: string, student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const enroll = await this.enrollRepository.createQueryBuilder('enroll')\n                .leftJoinAndSelect('enroll.course', 'course')\n                .where('enroll.student.id = :id',\n                    { id: user.id })\n                .andWhere('course.id = :courseId', { courseId })\n                .getOne()\n\n            if (!enroll) {\n                return this.responseService.Response({\n                    message: 'You have not enrolled in this course',\n                    data: null\n                })\n            }\n            const updatedEnroll = await this.enrollRepository.save({\n                ...enroll,\n                status: !enroll.status\n            })\n            return this.responseService.Response({\n                message: 'Enroll status updated successfully',\n                data: updatedEnroll,\n                key: 'enroll'\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n    studentGetEnrollsCourses = async (student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const enrolls = await this.enrollRepository.createQueryBuilder('enroll')\n                .leftJoinAndSelect('enroll.course', 'course')\n                .where('enroll.student.id = :id',\n                    { id: user.id })\n                .getMany()\n            return this.responseService.Response({\n                message: 'Enrolls fetched successfully',\n                data: enrolls,\n                key: 'enrolls'\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n\n\n    instructorGetEnrollsCourses = async (instructor: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: instructor.sub }\n            })\n            const enrolls = await this.enrollRepository.createQueryBuilder('enroll')\n                .leftJoinAndSelect('enroll.course', 'course')\n                .where('course.creator.id = :id',\n                    { id: user.id })\n                .getMany()\n            return this.responseService.Response({\n                message: 'Enrolls fetched successfully',\n                data: enrolls,\n                key: 'enrolls'\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileRequestFilter.html":{"url":"injectables/FileRequestFilter.html","title":"injectable - FileRequestFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileRequestFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/file-request.filter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileRequest: string)\n                    \n                \n                        \n                            \n                                Defined in src/filters/file-request.filter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileRequest\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/file-request.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  Inject,\n} from '@nestjs/common';\n\n@Injectable()\nexport class FileRequestFilter implements PipeTransform {\n  constructor(@Inject('FILE_REQUEST') private readonly fileRequest: string) {}\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (metadata.type === 'body' && metadata.data === this.fileRequest) {\n      const file = value[this.fileRequest];\n      if (file) {\n        value[this.fileRequest] = file[0];\n      }\n    }\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesDTO.html":{"url":"classes/FilesDTO.html","title":"class - FilesDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/dto/create-lesson.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content_url\n                            \n                            \n                                thumbnail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsEnum, ValidateIf } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { LessonType } from '../entities/lesson.entity';\n\nexport class CreateLessonDto {\n    @ApiProperty({\n        example: 'Lesson Title',\n        description: 'Leason tilte must be listed'\n    })\n    @IsString()\n    @IsNotEmpty({\n        message: 'Lesson title is required'\n    })\n    title: string;\n\n    @ApiProperty()\n    @IsString()\n    @IsOptional()\n    description?: string;\n\n    @ApiProperty({\n        enum: LessonType,\n        default: LessonType.PDF\n    })\n    @IsEnum(LessonType)\n    type: LessonType;\n\n    @ApiProperty({\n        example: {\n            \"user\": \"john\"\n        }\n    })\n    @IsOptional()\n    contentMetadata?: Record;\n    @ApiProperty({\n        example: false,\n        type: 'boolean'\n    })\n    @IsOptional()\n    isPublished?: boolean;\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the File content ',\n        type: 'string',\n        format: 'binary',\n\n    })\n    @IsOptional()\n    content_url?: string\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the thumbnail',\n        type: 'string',\n        format: 'binary',\n    })\n    @IsOptional()\n    thumbnail?: string\n}\n\nexport class FilesDTO {\n    content_url: Express.Multer.File;\n    thumbnail: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesDto.html":{"url":"classes/FilesDto.html","title":"class - FilesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                icon_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        icon_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCategoryDto {\n  @ApiProperty({\n    example: 'Category Name',\n    description: 'The name of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  name: string;\n\n  @ApiProperty({\n    example: 'Category Description',\n    description: 'The description of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The icon url of the category',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  icon_url?: Express.Multer.File;\n}\n\nexport class FilesDto {\n  icon_url: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesDto-1.html":{"url":"classes/FilesDto-1.html","title":"class - FilesDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/dto/create-course.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                thumbnail_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        thumbnail_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:108\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCourseDto {\n  @ApiProperty({\n    example: 'Course Name',\n    description: 'The name of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_NAME_REQUIRED',\n    ),\n  })\n  title: string;\n\n  @ApiProperty({\n    example: 'Course Description',\n    description: 'The description of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 200,\n    description: 'The price of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_PRICE_REQUIRED',\n    ),\n  })\n  price: string;\n\n  @ApiProperty({\n    example: 'USD',\n    description: 'The currency of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CURRENT_PRICE_REQUIRED',\n    ),\n  })\n  currency: string;\n\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FREE_REQUIRED',\n    ),\n  })\n  isFree: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'the Thumbnail Image',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  thumbnail_url: string;\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FEATURED_REQUIRED',\n    ),\n  })\n  featured: string;\n\n  @ApiProperty({\n    example: 'category Id',\n    description: 'The category of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CATEGORY_REQUIRED',\n    ),\n  })\n  category_id: string;\n}\n\nexport class FilesDto {\n  thumbnail_url: Express.Multer.File[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgetPasswordDto.html":{"url":"classes/ForgetPasswordDto.html","title":"class - ForgetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'email or Phone Number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/google.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/strategy/google.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/strategy/google.strategy.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\n\nimport { config } from '@/configs';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: config().google.clientId,\n      clientSecret: config().google.clientSecret,\n      callbackURL: config().google.callbackURL,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ) {\n    const { name, emails, photos } = profile;\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n    };\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/bad-request.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/filters/bad-request.filter.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/filters/bad-request.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/bad-request.filter.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/bad-request.filter.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[], seen)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/bad-request.filter.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                seen\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    new WeakSet()\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport { STATUS_CODES } from 'http';\nimport * as _ from 'lodash';\n\ninterface ValidationResponse {\n  data: Record;\n}\n\n@Catch(BadRequestException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(public reflector: Reflector) { }\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const response = ctx.getResponse();\n    let statusCode = exception.getStatus();\n    const r = exception.getResponse();\n\n    if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n      statusCode = HttpStatus.UNPROCESSABLE_ENTITY;\n      const validationErrors = r.message;\n      this._validationFilter(validationErrors);\n    }\n    const formattedErrors = this.formatErrors(r.message);\n    r.statusCode = statusCode;\n    r.error = STATUS_CODES[statusCode];\n\n    throw response.status(statusCode).json(formattedErrors);\n  }\n\n  private _validationFilter(validationErrors: ValidationError[]) {\n    for (const validationError of validationErrors) {\n      for (const [constraintKey, constraint] of Object.entries(\n        validationError.constraints,\n      )) {\n        if (!constraint) {\n          // convert error message to error.fields.{key} syntax for i18n translation\n          validationError.constraints[constraintKey] =\n            'error.fields.' + _.snakeCase(constraintKey);\n        }\n      }\n      if (!_.isEmpty(validationError.children)) {\n        this._validationFilter(validationError.children);\n      }\n    }\n  }\n\n  private formatErrors(\n    errors: ValidationError[],\n    seen = new WeakSet(),\n  ): ValidationResponse {\n    const errMsg = {};\n\n    if (_.isArray(errors) && errors.length === 0) {\n      errors.forEach((error: ValidationError) => {\n        if (seen.has(error)) {\n          return;\n        }\n        seen.add(error);\n\n        if (error.constraints) {\n          errMsg[error.property] = Object.values(error.constraints);\n        } else if (error.children && error.children.length > 0) {\n          errMsg[error.property] = this.formatErrors(error.children);\n        } else {\n          errMsg[error.property] = ['Unknown validation error'];\n        }\n      });\n      const formattedErrors = {\n        data: errMsg,\n      };\n      return formattedErrors;\n    } else if (!_.isEmpty(errors)) {\n      if (_.isString(errors)) {\n        errMsg['error'] = errors;\n        return {\n          data: errMsg,\n        };\n      }\n    } else {\n      return { data: {} };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/I18nConfigModule.html":{"url":"modules/I18nConfigModule.html","title":"module - I18nConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    I18nConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configs/i18n.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {\n  I18nModule,\n  AcceptLanguageResolver,\n  QueryResolver,\n  HeaderResolver,\n  CookieResolver,\n} from 'nestjs-i18n';\nimport * as path from 'path';\nimport { ConfigService } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    I18nModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        fallbackLanguage: configService.getOrThrow('FALLBACK_LANGUAGE'),\n        loaderOptions: {\n          path: path.join(__dirname, '../i18n/'),\n          watch: configService.get('I18N_WATCH'),\n        },\n        logging: configService.get('I18N_LOGGING'),\n        typesOutputPath: path.join(\n          __dirname,\n          '../../src/generated/i18n.generated.ts',\n        ),\n      }),\n      resolvers: [\n        {\n          use: QueryResolver,\n          options: ['lang'],\n        },\n        new HeaderResolver(['x-lang']),\n        new CookieResolver(),\n        AcceptLanguageResolver,\n      ],\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class I18nConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IRequest.html":{"url":"classes/IRequest.html","title":"class - IRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(IResponseData)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IResponseData.html":{"url":"classes/IResponseData.html","title":"class - IResponseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IResponseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                message\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                            \n                                    Optional\n                                requestId\n                            \n                            \n                                statusCode\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'data'\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : HttpStatus.OK\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Date.now()\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImagePicDto.html":{"url":"classes/ImagePicDto.html","title":"class - ImagePicDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImagePicDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profile_picture\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:153\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n  IsPhoneNumber,\n  IsOptional,\n} from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { RolesEnum as Roles } from '@/enums';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john_doe',\n    description: 'The username of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The name of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @MaxLength(50)\n  name: string;\n\n  @ApiProperty({\n    example: 'example@example.com',\n    description: 'The email of the user',\n  })\n  @IsEmail(\n    {\n      allow_ip_domain: false,\n      allow_utf8_local_part: true,\n      require_tld: true,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.USER_REGISTER.EMAIL_INVALID',\n      ),\n    },\n  )\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.EMAIL_REQUIRED',\n    ),\n  })\n  email: string;\n  @ApiProperty({\n    example: '+250788888888',\n    description: 'The phone number of the user',\n  })\n  @IsPhoneNumber('RW', {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_INVALID',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_REQUIRED',\n    ),\n  })\n  phone: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'The role of the user',\n  })\n  @IsOptional()\n  role: Roles = Roles.USER;\n\n  @ApiProperty({\n    example: 'johndoe',\n    description: 'The password ',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_REQUIRED',\n    ),\n  })\n  @MinLength(6, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MIN',\n    ),\n  })\n  @Matches(/^[a-zA-Z0-9]+$/, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MATCH',\n    ),\n  })\n  password: string;\n}\n\n\nexport class ProfileDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The profile picture of the user',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PROFILE_PIC_REQUIRED',\n    ),\n  })\n  profile_picture?: Express.Multer.File;\n\n  @ApiProperty({\n    example: 'Kigali, Rwanda',\n    description: 'The address of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.ADDRESS_REQUIRED',\n    ),\n  })\n  address: string;\n\n  @ApiProperty({\n    example: 'I am a software engineer',\n    description: 'The bio of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.BIO_REQUIRED',\n    ),\n  })\n  bio: string;\n}\nexport class ImagePicDto {\n  profile_picture: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IsAuthorizedParams.html":{"url":"interfaces/IsAuthorizedParams.html","title":"interface - IsAuthorizedParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IsAuthorizedParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/access-control.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentRole\n                                        \n                                \n                                \n                                        \n                                            requiredRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentRole:         Role\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requiredRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requiredRole:         Role\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RolesEnum as Role } from '@/enums';\n\ninterface IsAuthorizedParams {\n  currentRole: Role;\n  requiredRole: Role;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority = 1;\n\n  constructor() {\n    this.buildRoles([Role.ADMIN]);\n    this.buildRoles([Role.GUEST, Role.USER, Role.ADMIN]);\n  }\n\n  /**\n   * The buildRoles method allows for creating a role hierarchy between specified set of roles.\n   * Roles have to be specified from least privileged user to the most privileged one\n   * @param roles Array that contains a list of roles\n   */\n  private buildRoles(roles: Role[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach((role) => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n\n      if (\n        priority !== undefined &&\n        requiredPriority !== undefined &&\n        priority \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/strategy/jwt.strategy.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/strategy/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secret: 'secret',\n      secretOrKey: 'secret',\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.sub, role: payload.role };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguageMiddleware.html":{"url":"injectables/LanguageMiddleware.html","title":"injectable - LanguageMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguageMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/language.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(i18nService: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/middlewares/language.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i18nService\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/language.middleware.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class LanguageMiddleware implements NestMiddleware {\n  constructor(private readonly i18nService: I18nService) {}\n  use(req: Request, res: Response, next: NextFunction) {\n    const lang = req.headers['x-lang'] as string;\n    this.i18nService.resolveLanguage(lang);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Lesson.html":{"url":"entities/Lesson.html","title":"entity - Lesson","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Lesson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/entities/lesson.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                contentMetadata\n                            \n                            \n                                    \n                                    Optional\n                                contentUrl\n                            \n                            \n                                    \n                                    \n                                course\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                position\n                            \n                            \n                                    \n                                    Optional\n                                quiz\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                thumbnail\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contentMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contentUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        course\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Course\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ManyToOne(undefined, course => course.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        quiz\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Quiz\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})@IsString()@Unique('slug', ['slug'], {deferrable: 'INITIALLY DEFERRED'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LessonType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: LessonType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:68\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, ManyToOne, Unique, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, OneToOne, } from \"typeorm\";\nimport { uuid } from \"@/utils\";\nimport { Type } from \"class-transformer\";\nimport { Course } from \"@/modules/courses/entities/course.entity\";\nimport { IsString } from \"class-validator\";\nimport { Quiz } from \"@/modules/quiz/entities/quiz.entity\";\n\nexport enum LessonType {\n    VIDEO = 'video',\n    PDF = 'pdf',\n    QUIZ = 'quiz',\n    ARTICLE = 'article',\n}\n\n@Entity()\nexport class Lesson {\n    constructor(partial: Partial) {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column({\n        nullable: false,\n        unique: true,\n    })\n    @IsString()\n    @Unique('slug', ['slug'], {\n        deferrable: 'INITIALLY DEFERRED'\n    })\n    slug: string;\n\n    @Type(() => Course)\n    @ManyToOne(() => Course, course => course.id)\n    course: Course;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @Column({ type: 'enum', enum: LessonType })\n    type: LessonType;\n\n    @Column({ type: 'int' })\n    position: number;\n\n    @Column({ nullable: true })\n    contentUrl?: string;\n\n    @Column({ nullable: true })\n    thumbnail?: string\n\n    @Column({ type: 'jsonb', nullable: true })\n    contentMetadata?: Record\n\n    @Column({ nullable: false, default: true })\n    status: boolean;\n\n    @OneToOne(() => Quiz, { nullable: true }) // Only if lesson is a quiz\n    quiz?: Quiz;\n\n    @CreateDateColumn({ type: 'timestamp', nullable: false })\n    createdAt: Date;\n\n    @UpdateDateColumn({ type: 'timestamp', nullable: false })\n    updatedAt: Date;\n\n    @DeleteDateColumn({ type: 'timestamp', nullable: true })\n    deletedAt: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LessonsController.html":{"url":"controllers/LessonsController.html","title":"controller - LessonsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LessonsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/lessons.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lessons\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOneInstructor\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLessonDto: CreateLessonDto, courseId: string, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post()@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateLessonDto})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLessonDto\n                                            \n                                                            CreateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(slug: string, page: number, limit: number, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(lesson_slug: string, course_slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':lesson_slug/:course_slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lesson_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                course_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findOneInstructor\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneInstructor(course_slug: string, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Get(':course_slug/instructor')@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                course_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLessonDto: UpdateLessonDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Patch(':id')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLessonDto\n                                            \n                                                            UpdateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, UseInterceptors, ParseUUIDPipe, UploadedFiles, Query, DefaultValuePipe, ParseIntPipe } from '@nestjs/common';\nimport { LessonsService } from './lessons.service';\nimport { CreateLessonDto } from './dto/create-lesson.dto';\nimport { UpdateLessonDto } from './dto/update-lesson.dto';\nimport {\n  ApiAcceptedResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { RolesEnum } from '@/enums';\n\n\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { AssociativeArray, storage } from '@/utils';\n\n\n@ApiTags('Lesson')\n@Controller('lessons')\nexport class LessonsController {\n  constructor(private readonly lessonsService: LessonsService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post()\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateLessonDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'content_url',\n          maxCount: 1,\n        },\n        {\n          name: 'thumbnail'\n        }\n      ],\n      { storage: storage('lesson') },\n    ),\n  )\n  create(@Body() createLessonDto: CreateLessonDto,\n    @Param('courseId') courseId: string,\n    @UploadedFiles()\n    files: {\n      content_url: Express.Multer.File,\n      thumbnail: Express.Multer.File\n    }\n  ) {\n    return this.lessonsService.create(createLessonDto, courseId, files);\n  }\n\n  @Get(':slug')\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(@Param('slug') slug: string,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,\n  ) {\n    const { slug: _, ...filteredFilters } = filters; // Exclude 'slug' from filters\n    return this.lessonsService.findAll(slug, filteredFilters);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Get(':course_slug/instructor')\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findOneInstructor(\n    @Param('course_slug') course_slug: string,\n    @Query() filters: AssociativeArray,\n  ) {\n    const { course_slug: _, ...filteredFilters } = filters; // Exclude 'course_slug' from filters\n    return this.lessonsService.getAllLessonByInstructionn(course_slug, filteredFilters);\n  }\n\n  @Get(':lesson_slug/:course_slug')\n  findOne(@Param('lesson_slug') lesson_slug: string,\n    @Param('course_slug') course_slug: string) {\n    return this.lessonsService.findOne(lesson_slug, course_slug);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Patch(':id')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'content_url',\n          maxCount: 1,\n        },\n        {\n          name: 'thumbnail'\n        }\n      ],\n      { storage: storage('lesson') },\n    ),\n  )\n  update(@Param('id') id: string, @Body() updateLessonDto: UpdateLessonDto,\n    @UploadedFiles()\n    files: {\n      content_url: Express.Multer.File,\n      thumbnail: Express.Multer.File\n    }\n  ) {\n    return this.lessonsService.update(id, updateLessonDto, files);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.lessonsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LessonsModule.html":{"url":"modules/LessonsModule.html","title":"module - LessonsModule","body":"\n                   \n\n\n\n\n    Modules\n    LessonsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LessonsModule\n\n\n\ncluster_LessonsModule_providers\n\n\n\n\nLessonsService\n\nLessonsService\n\n\n\nLessonsModule\n\nLessonsModule\n\nLessonsModule -->\n\nLessonsService->LessonsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/lessons/lessons.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LessonsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LessonsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LessonsService } from './lessons.service';\nimport { LessonsController } from './lessons.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Lesson } from './entities/lesson.entity';\nimport { Quiz } from '../quiz/entities/quiz.entity';\nimport { Course } from '../courses/entities/course.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Lesson, Quiz, Course])],\n  controllers: [LessonsController],\n  providers: [LessonsService],\n})\nexport class LessonsModule {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LessonsService.html":{"url":"injectables/LessonsService.html","title":"injectable - LessonsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LessonsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/lessons.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAllLessonByInstructionn\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lessonRepository: Repository, courseRepository: Repository, quizzesRepository: Repository, dataSource: DataSource, responseService: ResponseService, pagination: PaginateHelper)\n                    \n                \n                        \n                            \n                                Defined in src/modules/lessons/lessons.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lessonRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        courseRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        quizzesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagination\n                                                  \n                                                        \n                                                                        PaginateHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLessonDto: CreateLessonDto, courseId: string, files: FilesDTO, quizId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLessonDto\n                                            \n                                                            CreateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                quizId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(slug: string, filters?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(lesson_slug: string, course_slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lesson_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                course_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllLessonByInstructionn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllLessonByInstructionn(slug: string, filters?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLessonDto: UpdateLessonDto, files: FilesDTO, quizId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLessonDto\n                                            \n                                                            UpdateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                quizId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateLessonDto, FilesDTO } from './dto/create-lesson.dto';\nimport { UpdateLessonDto } from './dto/update-lesson.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Lesson } from './entities/lesson.entity';\nimport { DataSource, Repository } from 'typeorm';\nimport { Course } from '../courses/entities/course.entity';\nimport { Quiz } from '../quiz/entities/quiz.entity';\nimport { AssociativeArray, filterQueryBuilderFromRequest, generateSlug, removeFile, ResponseService } from '@/utils';\nimport { PaginateHelper } from '@/utils/paginate';\n\n@Injectable()\nexport class LessonsService {\n  constructor(\n    @InjectRepository(Lesson)\n    private lessonRepository: Repository,\n    @InjectRepository(Course)\n    private courseRepository: Repository,\n    @InjectRepository(Quiz)\n    private quizzesRepository: Repository,\n    private dataSource: DataSource,\n    private readonly responseService: ResponseService,\n    private readonly pagination: PaginateHelper,\n  ) { }\n  async create(createLessonDto: CreateLessonDto, courseId: string, files: FilesDTO, quizId?: string) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id: courseId },\n      });\n\n      if (!course) {\n        this.responseService.Response({\n          message: 'Course not found',\n          statusCode: 404,\n        });\n      }\n\n      this.dataSource.transaction(async (manager) => {\n        await manager.getRepository(Lesson)\n          .createQueryBuilder()\n          .update()\n          .set({ position: () => `\"position\" + 1` })\n          .where('courseId = :courseId', { courseId })\n          .execute();\n        const lesson = this.lessonRepository.create({\n          ...createLessonDto,\n          contentUrl: `lesson/${files.content_url[0]?.filename}`,\n          thumbnail: `lesson/${files.thumbnail[0]?.filename}`,\n          course,\n          slug: generateSlug(createLessonDto.title),\n          position: 1,\n        });\n        const savedLesson = await manager.save(lesson);\n        return this.responseService.Response({\n          message: 'Lesson created successfully',\n          statusCode: 201,\n          data: savedLesson,\n        });\n      })\n\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async findAll(slug: string, filters?: AssociativeArray) {\n    try {\n      const lessonQuery = this.lessonRepository.createQueryBuilder('lesson')\n        .leftJoinAndSelect('lesson.course', 'course')\n        .where('course.slug = :slug', { slug })\n        .andWhere('lesson.status = :status', { status: true })\n        .orderBy('lesson.position', 'ASC');\n      filterQueryBuilderFromRequest(lessonQuery, filters);\n\n      const lessons = await this.pagination.run(lessonQuery);\n\n      return this.responseService.Response({\n        message: 'Lessons fetched successfully',\n        data: lessons,\n        key: 'lessons',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async findOne(lesson_slug: string, course_slug: string) {\n    try {\n      const lesson = await this.lessonRepository.createQueryBuilder('lesson')\n        .leftJoinAndSelect('lesson.course', 'course')\n        .leftJoinAndSelect('course.creator', 'instructor')\n        .where('lesson.slug = :lesson_slug', { lesson_slug })\n        .andWhere('course.slug = :course_slug', { course_slug })\n        .getOne();\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n      }\n      return this.responseService.Response({\n        message: 'Lesson fetched successfully',\n        data: lesson,\n        key: 'lesson',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async update(id: string, updateLessonDto: UpdateLessonDto, files: FilesDTO, quizId?: string) {\n    try {\n      const lesson = await this.lessonRepository.findOne({\n        where: { id },\n      });\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n      }\n      if (files.content_url) {\n        removeFile(lesson.contentUrl);\n\n      }\n      if (files.thumbnail) {\n        removeFile(lesson.thumbnail);\n      }\n      const updatedLesson = await this.lessonRepository.save({\n        ...lesson,\n        ...updateLessonDto,\n        contentUrl: files.content_url ? `lesson/${files.content_url[0]?.filename}` : lesson.contentUrl,\n        thumbnail: files.thumbnail ? `lesson/${files.thumbnail[0]?.filename}` : lesson.thumbnail,\n      });\n      return this.responseService.Response({\n        message: 'Lesson updated successfully',\n        data: updatedLesson,\n        key: 'lesson',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const lesson = await this.lessonRepository.findOne({\n        where: { id },\n      });\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n\n      }\n      removeFile(lesson.contentUrl);\n      removeFile(lesson.thumbnail);\n      await this.lessonRepository.delete(id);\n      return this.responseService.Response({\n        message: 'Lesson deleted successfully',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n    }\n  }\n\n  async getAllLessonByInstructionn(slug: string, filters?: AssociativeArray) {\n    {\n      try {\n        const lessonQuery = this.lessonRepository.createQueryBuilder('lesson')\n          .leftJoinAndSelect('lesson.course', 'course')\n          .where('course.slug = :slug', { slug })\n          .orderBy('lesson.position', 'ASC');\n        filterQueryBuilderFromRequest(lessonQuery, filters);\n\n        const lessons = await this.pagination.run(lessonQuery);\n\n        return this.responseService.Response({\n          message: 'Lessons fetched successfully',\n          data: lessons,\n          key: 'lessons',\n          statusCode: 200,\n        });\n      } catch (error) {\n        const errorMessage = (error as Error).message;\n        return this.responseService.Response({\n          message: errorMessage,\n          statusCode: 500,\n        });\n\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : WinstonModule.createLogger({\n    level: 'info',\n    format: format.combine(format.timestamp(), format.json()),\n    transports: [\n      new transports.DailyRotateFile({\n        level: 'error',\n        filename: 'logs/%DATE%-error.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: true,\n        maxSize: '20m',\n        maxFiles: '14d',\n        handleExceptions: true,\n        json: true,\n      }),\n      new transports.DailyRotateFile({\n        filename: 'logs/%DATE%-info.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: false,\n        maxFiles: '14d',\n      }),\n      new transports.Console({\n        level: 'debug',\n        format: format.combine(\n          format.timestamp(),\n          format.json(),\n          format.errors({ stack: true }),\n          format.splat(),\n          format.colorize({\n            all: true,\n          }),\n          format.printf(\n            (info) => `${info.timestamp} ${info.level}: ${info.message}`,\n          ),\n        ),\n      }),\n    ],\n  })\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { format, transports } from 'winston';\nimport 'winston-daily-rotate-file';\nimport { WinstonModule } from 'nest-winston';\n\nexport class Logger {\n  public static logger = WinstonModule.createLogger({\n    level: 'info',\n    format: format.combine(format.timestamp(), format.json()),\n    transports: [\n      new transports.DailyRotateFile({\n        level: 'error',\n        filename: 'logs/%DATE%-error.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: true,\n        maxSize: '20m',\n        maxFiles: '14d',\n        handleExceptions: true,\n        json: true,\n      }),\n      new transports.DailyRotateFile({\n        filename: 'logs/%DATE%-info.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: false,\n        maxFiles: '14d',\n      }),\n      new transports.Console({\n        level: 'debug',\n        format: format.combine(\n          format.timestamp(),\n          format.json(),\n          format.errors({ stack: true }),\n          format.splat(),\n          format.colorize({\n            all: true,\n          }),\n          format.printf(\n            (info) => `${info.timestamp} ${info.level}: ${info.message}`,\n          ),\n        ),\n      }),\n    ],\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/mails/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { join } from 'path';\nimport { config } from '@/configs/config';\n\n@Module({\n  imports: [\n    MailerModule.forRoot({\n      transport: {\n        host: config().mail.host,\n        secure: false,\n        auth: {\n          user: config().mail.auth.user,\n          pass: config().mail.auth.pass,\n        },\n      },\n      defaults: {\n        from: config().mail.from,\n      },\n      template: {\n        dir: join(__dirname, '../../templates/'),\n        adapter: new HandlebarsAdapter(), // or new PugAdapter() or new EjsAdapter()\n        options: {\n          strict: true,\n        },\n      },\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/mails/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendForgotPasswordEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/mails/mail.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendForgotPasswordEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendForgotPasswordEmail(email: string, otp: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/mails/mail.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\n\n@Injectable()\nexport class MailService {\n  constructor(private readonly mailerService: MailerService) {}\n  async sendForgotPasswordEmail(email: string, otp: string, name: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Forgot Password',\n      template: './forgot-password',\n      context: {\n        name,\n        otp,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OTPDto.html":{"url":"classes/OTPDto.html","title":"class - OTPDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OTPDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                otp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({allowNaN: false, allowInfinity: false, maxDecimalPlaces: 0}, {message: undefined})@IsNotEmpty()@ApiProperty({example: 1234})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginateHelper.html":{"url":"injectables/PaginateHelper.html","title":"injectable - PaginateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/paginate.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                limit\n                            \n                            \n                                    Private\n                                page\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLimit\n                            \n                            \n                                getPage\n                            \n                            \n                                    Async\n                                run\n                            \n                            \n                                setLimit\n                            \n                            \n                                setPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request)\n                    \n                \n                        \n                            \n                                Defined in src/utils/paginate.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getLimit\n                        \n                    \n                \n            \n            \n                \ngetLimit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPage\n                        \n                    \n                \n            \n            \n                \ngetPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(query: SelectQueryBuilder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        SelectQueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLimit\n                        \n                    \n                \n            \n            \n                \nsetLimit(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPage\n                        \n                    \n                \n            \n            \n                \nsetPage(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/utils/paginate.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/utils/paginate.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope, Inject } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport {\n  Pagination,\n  paginate,\n  PaginationTypeEnum,\n} from 'nestjs-typeorm-paginate';\nimport { SelectQueryBuilder } from 'typeorm';\nimport { url } from './lib';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PaginateHelper {\n  private limit = 10;\n  private page = 1;\n\n  constructor(@Inject(REQUEST) private readonly req: Request) {\n    try {\n      const iurl = new URL(url(req.url));\n      this.limit = +iurl.searchParams.get('limit') || 10;\n      this.page = +iurl.searchParams.get('page') || 1;\n    } catch (error) {}\n  }\n\n  setLimit(limit: number) {\n    this.limit = limit;\n  }\n\n  getLimit() {\n    return this.limit;\n  }\n\n  setPage(page: number) {\n    this.page = page;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  async run(query: SelectQueryBuilder): Promise> {\n    return paginate(query, {\n      limit: this.limit,\n      page: this.page,\n      paginationType: PaginationTypeEnum.TAKE_AND_SKIP,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getError\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getError\n                        \n                    \n                \n            \n            \n                \n                        \n                    getError()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/debug-sentry')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiBearerAuth()@Roles(RolesEnum.ALL)@UseGuards(AuthGuard)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(user: AuthUserType, updateUserDto: ProfileDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)@ApiOperation({summary: 'Update user'})@ApiBearerAuth()@Roles(RolesEnum.ALL)@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            ProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  UseGuards,\n  UseInterceptors,\n  UploadedFiles,\n  Put,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto, ProfileDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags, ApiQuery, ApiBearerAuth, ApiOperation, ApiConsumes } from '@nestjs/swagger';\nimport { AssociativeArray, storage } from '@/utils';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { RolesEnum } from '@/enums';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) { }\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Get()\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,\n  ) {\n    return this.userService.findAll(filters);\n  }\n\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @ApiQuery({\n    name: 'role',\n    required: true,\n    enum: RolesEnum,\n    description: 'Role to assign to the user',\n  })\n  @Put(':id/role')\n  updateRole(@Param('id') id: string, @Query('role') role: RolesEnum) {\n    return this.userService.updateRole(id, role);\n  }\n}\n\n@ApiTags('Profile')\n@Controller('profile')\nexport class ProfileController {\n\n  constructor(private readonly userService: UserService) { }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  @Get('')\n  getProfile(@User() user: AuthUserType) {\n    return this.userService.getProfile(user);\n  }\n\n  @Patch('profile')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('/profile') },\n    ),\n  )\n  @ApiOperation({ summary: 'Update user' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  updateProfile(@User() user: AuthUserType, @Body() updateUserDto: ProfileDto,\n    @UploadedFiles()\n    files: {\n      profile_picture: Express.Multer.File;\n    }) {\n    return this.userService.updateProfile(updateUserDto, user, files);\n  }\n\n  @Get(\"/debug-sentry\")\n  getError() {\n    throw new Error(\"My first Sentry error!\");\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileDto.html":{"url":"classes/ProfileDto.html","title":"class - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                profile_picture\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Kigali, Rwanda', description: 'The address of the user'})@IsString({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'I am a software engineer', description: 'The bio of the user'})@IsString({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'The profile picture of the user', type: 'string', format: 'binary'})@IsString({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:128\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n  IsPhoneNumber,\n  IsOptional,\n} from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { RolesEnum as Roles } from '@/enums';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john_doe',\n    description: 'The username of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The name of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @MaxLength(50)\n  name: string;\n\n  @ApiProperty({\n    example: 'example@example.com',\n    description: 'The email of the user',\n  })\n  @IsEmail(\n    {\n      allow_ip_domain: false,\n      allow_utf8_local_part: true,\n      require_tld: true,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.USER_REGISTER.EMAIL_INVALID',\n      ),\n    },\n  )\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.EMAIL_REQUIRED',\n    ),\n  })\n  email: string;\n  @ApiProperty({\n    example: '+250788888888',\n    description: 'The phone number of the user',\n  })\n  @IsPhoneNumber('RW', {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_INVALID',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_REQUIRED',\n    ),\n  })\n  phone: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'The role of the user',\n  })\n  @IsOptional()\n  role: Roles = Roles.USER;\n\n  @ApiProperty({\n    example: 'johndoe',\n    description: 'The password ',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_REQUIRED',\n    ),\n  })\n  @MinLength(6, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MIN',\n    ),\n  })\n  @Matches(/^[a-zA-Z0-9]+$/, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MATCH',\n    ),\n  })\n  password: string;\n}\n\n\nexport class ProfileDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The profile picture of the user',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PROFILE_PIC_REQUIRED',\n    ),\n  })\n  profile_picture?: Express.Multer.File;\n\n  @ApiProperty({\n    example: 'Kigali, Rwanda',\n    description: 'The address of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.ADDRESS_REQUIRED',\n    ),\n  })\n  address: string;\n\n  @ApiProperty({\n    example: 'I am a software engineer',\n    description: 'The bio of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.BIO_REQUIRED',\n    ),\n  })\n  bio: string;\n}\nexport class ImagePicDto {\n  profile_picture: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PrometheusController.html":{"url":"controllers/PrometheusController.html","title":"controller - PrometheusController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PrometheusController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                metrics\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMetrics(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { PrometheusService } from './prometheus.service';\n\n\n@Controller('metrics')\nexport class PrometheusController {\n  constructor(private readonly prometheusService: PrometheusService) { }\n\n  @Get()\n  async getMetrics(@Res() res: Response) {\n    const metrics = await this.prometheusService.getMetrics();\n    res.setHeader('Content-Type', 'text/plain');\n    res.send(metrics);\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrometheusModule.html":{"url":"modules/PrometheusModule.html","title":"module - PrometheusModule","body":"\n                   \n\n\n\n\n    Modules\n    PrometheusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrometheusModule\n\n\n\ncluster_PrometheusModule_providers\n\n\n\n\nPrometheusService\n\nPrometheusService\n\n\n\nPrometheusModule\n\nPrometheusModule\n\nPrometheusModule -->\n\nPrometheusService->PrometheusModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrometheusService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PrometheusController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrometheusService } from './prometheus.service';\nimport { PrometheusController } from './prometheus.controller';\nimport { PrometheusModule as PrometheusModules } from '@willsoto/nestjs-prometheus';\n@Module({\n  imports: [\n    PrometheusModules.register({\n      defaultMetrics: {\n        enabled: true,\n      },\n      global: true,\n\n    })\n  ],\n  controllers: [PrometheusController],\n  providers: [PrometheusService,],\n})\nexport class PrometheusModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrometheusService.html":{"url":"injectables/PrometheusService.html","title":"injectable - PrometheusService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrometheusService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                register\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/prometheus/prometheus.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMetrics\n                        \n                    \n                \n            \n            \n                \ngetMetrics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        register\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Registry\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as client from 'prom-client';\n\n@Injectable()\nexport class PrometheusService {\n  private readonly register: client.Registry;\n\n  constructor() {\n    this.register = new client.Registry();\n    this.register.setDefaultLabels({ app: 'nestjs-prometheus' });\n    client.collectDefaultMetrics({ register: this.register });\n  }\n\n  getMetrics(): Promise {\n    return this.register.metrics();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/query-fail.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/filters/query-fail.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/filters/query-fail.filter.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/query-fail.filter.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Response } from 'express';\nimport { QueryFailedError } from 'typeorm';\nimport { STATUS_CODES } from 'http';\n\n@Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n  constructor(public reflector: Reflector) {}\n\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status =\n      exception.constraint && exception.constraint.startsWith('UQ')\n        ? HttpStatus.CONFLICT\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    response.status(status).json({\n      statusCode: status,\n      error: STATUS_CODES[status],\n      message: exception.message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Question.html":{"url":"entities/Question.html","title":"entity - Question","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/entities/quiz.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                correctAnswers\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                options\n                            \n                            \n                                    \n                                quiz\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        correctAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-array', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnswerOption[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, option => option.question, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quiz\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Quiz\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, quiz => quiz.questions, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QuestionType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QuestionType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:50\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from \"@/utils\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, OneToMany, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { Lesson } from \"@/modules/lessons/entities/lesson.entity\";\n\nexport enum QuestionType {\n    SINGLE_CHOICE = 'single_choice',\n    MULTIPLE_CHOICE = 'multiple_choice',\n    TEXT = 'text',\n}\n\n@Entity()\nexport class Quiz {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @OneToMany(() => Question, (question) => question.quiz, { cascade: true })\n    questions: Question[];\n\n    @OneToOne(() => Lesson, (lesson) => lesson.quiz) // Bidirectional relationship\n    lesson: Lesson;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n@Entity()\nexport class Question {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    text: string;\n\n    @Column({ type: 'enum', enum: QuestionType })\n    type: QuestionType;\n\n    @ManyToOne(() => Quiz, (quiz) => quiz.questions, { onDelete: 'CASCADE' })\n    quiz: Quiz;\n\n    @OneToMany(() => AnswerOption, (option) => option.question, { cascade: true })\n    options: AnswerOption[];\n\n    @Column({ type: 'simple-array', nullable: true })\n    correctAnswers?: string[]; // For MCQs: [\"A\", \"C\"], for text: [\"exact answer\"]\n}\n\n@Entity()\nexport class AnswerOption {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    label: string; // e.g., \"A\", \"B\", \"C\"\n\n    @Column()\n    text: string;\n\n    @ManyToOne(() => Question, (question) => question.options, { onDelete: 'CASCADE' })\n    question: Question;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Quiz.html":{"url":"entities/Quiz.html","title":"entity - Quiz","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Quiz\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/entities/quiz.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lesson\n                            \n                            \n                                    \n                                questions\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lesson\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Lesson\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, lesson => lesson.quiz)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, question => question.quiz, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from \"@/utils\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, OneToMany, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { Lesson } from \"@/modules/lessons/entities/lesson.entity\";\n\nexport enum QuestionType {\n    SINGLE_CHOICE = 'single_choice',\n    MULTIPLE_CHOICE = 'multiple_choice',\n    TEXT = 'text',\n}\n\n@Entity()\nexport class Quiz {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @OneToMany(() => Question, (question) => question.quiz, { cascade: true })\n    questions: Question[];\n\n    @OneToOne(() => Lesson, (lesson) => lesson.quiz) // Bidirectional relationship\n    lesson: Lesson;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n@Entity()\nexport class Question {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    text: string;\n\n    @Column({ type: 'enum', enum: QuestionType })\n    type: QuestionType;\n\n    @ManyToOne(() => Quiz, (quiz) => quiz.questions, { onDelete: 'CASCADE' })\n    quiz: Quiz;\n\n    @OneToMany(() => AnswerOption, (option) => option.question, { cascade: true })\n    options: AnswerOption[];\n\n    @Column({ type: 'simple-array', nullable: true })\n    correctAnswers?: string[]; // For MCQs: [\"A\", \"C\"], for text: [\"exact answer\"]\n}\n\n@Entity()\nexport class AnswerOption {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    label: string; // e.g., \"A\", \"B\", \"C\"\n\n    @Column()\n    text: string;\n\n    @ManyToOne(() => Question, (question) => question.options, { onDelete: 'CASCADE' })\n    question: Question;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuizController.html":{"url":"controllers/QuizController.html","title":"controller - QuizController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuizController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/quiz.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                quiz\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                createQuiz\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        createQuiz\n                        \n                    \n                \n            \n            \n                \n                        \n                    createQuiz(createQuizDto: CreateQuizDto, lessonId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post(':lessonId')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateQuizDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/quiz/quiz.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuizDto\n                                            \n                                                            CreateQuizDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lessonId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { QuizService } from './quiz.service';\nimport { CreateQuizDto } from './dto/create-quiz.dto';\nimport { UpdateQuizDto } from './dto/update-quiz.dto';\nimport { ApiAcceptedResponse, ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@/guards';\nimport { Roles } from '@/decorators';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('Quiz')\n@Controller('quiz')\nexport class QuizController {\n  constructor(private readonly quizService: QuizService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post(':lessonId')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateQuizDto,\n  })\n  createQuiz(\n    @Body() createQuizDto: CreateQuizDto,\n    @Param('lessonId') lessonId: string,) {\n    return this.quizService.createQuiz(createQuizDto, lessonId);\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuizModule.html":{"url":"modules/QuizModule.html","title":"module - QuizModule","body":"\n                   \n\n\n\n\n    Modules\n    QuizModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuizModule\n\n\n\ncluster_QuizModule_providers\n\n\n\n\nQuizService\n\nQuizService\n\n\n\nQuizModule\n\nQuizModule\n\nQuizModule -->\n\nQuizService->QuizModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/quiz/quiz.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuizService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuizController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuizService } from './quiz.service';\nimport { QuizController } from './quiz.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerOption, Question, Quiz } from './entities/quiz.entity';\nimport { Lesson } from '../lessons/entities/lesson.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Quiz, AnswerOption, Question, Lesson])],\n  controllers: [QuizController],\n  providers: [QuizService],\n})\nexport class QuizModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuizService.html":{"url":"injectables/QuizService.html","title":"injectable - QuizService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuizService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/quiz.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuiz\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(quizRepository: Repository, lessonRepository: Repository, questionRepository: Repository, answerOptionRepository: Repository, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/quiz/quiz.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quizRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lessonRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createQuiz\n                        \n                    \n                \n            \n            \n                \n                        \n                    createQuiz(createQuizDto: CreateQuizDto, lessonId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quiz/quiz.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuizDto\n                                            \n                                                            CreateQuizDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lessonId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateQuizDto } from './dto/create-quiz.dto';\nimport { UpdateQuizDto } from './dto/update-quiz.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  Quiz,\n  Question,\n  QuestionType,\n  AnswerOption,\n} from './entities/quiz.entity';\nimport { Repository } from 'typeorm';\nimport { Lesson } from '../lessons/entities/lesson.entity';\nimport { ResponseService } from '@/utils';\n\n@Injectable()\nexport class QuizService {\n  constructor(\n    @InjectRepository(Quiz)\n    private quizRepository: Repository,\n    @InjectRepository(Lesson)\n    private lessonRepository: Repository,\n    @InjectRepository(Question)\n    private questionRepository: Repository,\n    @InjectRepository(AnswerOption)\n    private answerOptionRepository: Repository,\n    // @InjectRepository(Answer)\n    // private answerRepository: Repository,\n\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async createQuiz(createQuizDto: CreateQuizDto, lessonId: string) {\n    try {\n      const lesson = await this.lessonRepository.findOne({\n        where: { id: lessonId },\n      });\n\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n      }\n\n      const options = createQuizDto.questions.map((question) => ({\n        text: question.options,\n        isCorrect: question.correctAnswers,\n      }));\n\n      const quiz = this.quizRepository.create({\n        title: createQuizDto.title,\n        description: createQuizDto.description,\n        lesson: lesson,\n      });\n\n      const questions = createQuizDto.questions.map((question) => ({\n        text: question.text,\n        type: question.type,\n        correctAnswers: question.correctAnswers,\n      }));\n      const savedQuestions = await this.questionRepository.save(questions);\n\n      const savedQuiz = await this.quizRepository.save({\n        ...quiz,\n        questions: savedQuestions,\n      });\n\n      return this.responseService.Response({\n        message: 'Quiz created successfully',\n        statusCode: 201,\n        data: savedQuiz,\n      });\n    } catch (error) {\n      this.responseService.Response({\n        message: 'Error creating quiz',\n        statusCode: 500,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/authenticate.middleware.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport {\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Response, Request, NextFunction } from 'express';\nimport { ResponseService } from '@/utils';\n\n@Injectable()\nexport class AuthenticateMiddleware implements NestMiddleware {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly responseService: ResponseService,\n  ) { }\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const [bearer, token] = authHeader.split(' ');\n      if (bearer !== 'Bearer' || !token) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const user = await this.jwtService.verifyAsync(token, {\n        secret: 'secret',\n      });\n\n      req.user = user as User;\n    } catch (error) {\n      throw new UnauthorizedException(\n        this.responseService.Response({\n          success: false,\n          statusCode: 401,\n          message: 'Unauthorized',\n        }),\n      );\n    }\n    next();\n  }\n}\ninterface User {\n  sub: string;\n  iat: number;\n  exp: number;\n  readonly role: string;\n}\n\ndeclare module 'express' {\n  interface Request {\n    user?: User;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDto.html":{"url":"classes/ResponseDto.html","title":"class - ResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                data\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                key\n                            \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                method\n                            \n                            \n                                    \n                                    \n                                    \n                                path\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    \n                                statusCode\n                            \n                            \n                                    \n                                    \n                                    \n                                success\n                            \n                            \n                                    \n                                    \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, readOnly: true})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsOptional,\n} from 'class-validator';\nimport { HttpStatus } from '@nestjs/common';\nimport { Exclude } from 'class-transformer';\n\nexport class ResponseDto {\n  @ApiProperty({ required: true, readOnly: true })\n  @IsBoolean()\n  @IsNotEmpty()\n  success: boolean;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  statusCode: HttpStatus;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  message: string;\n\n  @ApiProperty({ required: false })\n  data?: Record;\n\n  @Exclude()\n  @ApiProperty({ required: false })\n  key?: string;\n\n  @ApiProperty({\n    required: true,\n  })\n  @IsString()\n  @IsOptional()\n  path: any;\n\n  @ApiProperty({\n    required: true,\n  })\n  @IsString()\n  @IsOptional()\n  method: string;\n\n  @ApiProperty({ required: false })\n  requestId?: string;\n\n  @ApiProperty({ required: true })\n  @IsOptional()\n  @IsNumber()\n  timestamp: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                Response\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/utils/response/index.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        Response\n                        \n                    \n                \n            \n            \n                \n                        \n                    Response(result: IRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/response/index.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                            IRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ResponseDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_imports\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nDbModule\n\nDbModule\n\n\n\nSharedModule\n\nSharedModule\n\nSharedModule -->\n\nDbModule->SharedModule\n\n\n\n\n\nAuthenticateMiddleware \n\nAuthenticateMiddleware \n\nAuthenticateMiddleware  -->\n\nSharedModule->AuthenticateMiddleware \n\n\n\n\n\nPaginateHelper \n\nPaginateHelper \n\nPaginateHelper  -->\n\nSharedModule->PaginateHelper \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nSharedModule->ResponseService \n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nSharedModule -->\n\nAuthenticateMiddleware->SharedModule\n\n\n\n\n\nPaginateHelper\n\nPaginateHelper\n\nSharedModule -->\n\nPaginateHelper->SharedModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nSharedModule -->\n\nResponseService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            PaginateHelper\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            PaginateHelper\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DbModule } from '@/configs';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { ResponseService, CustomExceptionFilter } from '@/utils';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { Global, Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\nimport { SentryGlobalFilter, SentryModule } from '@sentry/nestjs/setup';\n\n@Global()\n@Module({\n  imports: [DbModule,\n    SentryModule.forRoot()\n  ],\n  controllers: [],\n  providers: [ResponseService, AuthenticateMiddleware,\n    PaginateHelper,\n    {\n      provide: APP_FILTER,\n      useClass: SentryGlobalFilter\n    },\n\n  ],\n  exports: [ResponseService, AuthenticateMiddleware, PaginateHelper],\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/dto/update-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCourseDto.html":{"url":"classes/UpdateCourseDto.html","title":"class - UpdateCourseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCourseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/dto/update-course.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCourseDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCourseDto } from './create-course.dto';\n\nexport class UpdateCourseDto extends PartialType(CreateCourseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLessonDto.html":{"url":"classes/UpdateLessonDto.html","title":"class - UpdateLessonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLessonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/dto/update-lesson.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateLessonDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateLessonDto } from './create-lesson.dto';\n\nexport class UpdateLessonDto extends PartialType(CreateLessonDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuizDto.html":{"url":"classes/UpdateQuizDto.html","title":"class - UpdateQuizDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuizDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/dto/update-quiz.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateQuizDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuizDto } from './create-quiz.dto';\n\nexport class UpdateQuizDto extends PartialType(CreateQuizDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCategoryDto.html":{"url":"classes/UpdateUserCategoryDto.html","title":"class - UpdateUserCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/dto/update-user-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserCategoryDto } from './create-user-category.dto';\n\nexport class UpdateUserCategoryDto extends PartialType(CreateUserCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                created_at\n                            \n                            \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                    \n                                refresh_token\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updated_at\n                            \n                            \n                                    \n                                userCategories\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})@IsEmail()@IsNotEmpty()@Unique('email', ['email'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()@MinLength(6)@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Roles, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCategories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryColumn,\n  Unique,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { Exclude, Type } from 'class-transformer';\nimport { RolesEnum as Roles } from '../../../enums';\nimport { uuid } from '@/utils';\nimport { UserCategory } from '@/modules/user-category/entities/user-category.entity';\n\n@Entity('users')\nexport class User {\n  constructor() {\n    this.id = uuid();\n  }\n  @PrimaryColumn()\n  id: string;\n\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Column({ nullable: false, unique: true })\n  @IsEmail()\n  @IsNotEmpty()\n  @Unique('email', ['email'])\n  email: string;\n\n  @Column({ nullable: false, unique: true })\n  username: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  phone: string;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: Roles,\n    default: Roles.USER,\n  })\n  role: Roles;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  profile_picture: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  bio: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  @Exclude()\n  password: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  refresh_token: string;\n\n  @Type(() => Date)\n  @CreateDateColumn({ type: 'timestamp', nullable: false })\n  created_at: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', nullable: false })\n  updated_at: Date;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deleted_at: Date;\n\n  @Type(() => UserCategory)\n  userCategories: UserCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserCategory.html":{"url":"entities/UserCategory.html","title":"entity - UserCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/entities/user-category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updated_at\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.userCategories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCategories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from '@/utils';\nimport {\n  Entity,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  PrimaryColumn,\n  DeleteDateColumn,\n} from 'typeorm';\nimport { User } from '@/modules/user/entities/user.entity';\nimport { Category } from '@/modules/category/entities/category.entity';\n\n@Entity('user_categories')\nexport class UserCategory {\n  constructor() {\n    this.id = uuid();\n  }\n  @PrimaryColumn()\n  id: string;\n\n  @ManyToOne(() => User, (user) => user.userCategories)\n  user: User;\n\n  @ManyToOne(() => Category, (category) => category.userCategories)\n  category: Category;\n\n  @CreateDateColumn({ type: 'timestamp', nullable: false })\n  created_at: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', nullable: false })\n  updated_at: Date;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deleted_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCategoryController.html":{"url":"controllers/UserCategoryController.html","title":"controller - UserCategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/user-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user-category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserCategoryDto: CreateUserCategoryDto, user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserCategoryDto\n                                            \n                                                            CreateUserCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { UserCategoryService } from './user-category.service';\nimport { CreateUserCategoryDto } from './dto/create-user-category.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { User, Roles } from '@/decorators';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('user-category')\n@ApiBearerAuth()\n@UseGuards(AuthGuard)\n@Roles(RolesEnum.ADMIN, RolesEnum.USER)\n@Controller('user-category')\nexport class UserCategoryController {\n  constructor(private readonly userCategoryService: UserCategoryService) { }\n\n  @Post()\n  create(\n    @Body() createUserCategoryDto: CreateUserCategoryDto,\n    @User() user: AuthUserType,\n  ) {\n    const payload: CreateUserCategoryDto & AuthUserType = {\n      ...createUserCategoryDto,\n      ...user,\n    };\n    return this.userCategoryService.create(payload);\n  }\n\n  @Get()\n  findAll(@User() user: AuthUserType) {\n    return this.userCategoryService.findAll({\n      userId: user.sub,\n    });\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userCategoryService.remove({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserCategoryModule.html":{"url":"modules/UserCategoryModule.html","title":"module - UserCategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    UserCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserCategoryModule\n\n\n\ncluster_UserCategoryModule_exports\n\n\n\ncluster_UserCategoryModule_providers\n\n\n\n\nUserCategoryService \n\nUserCategoryService \n\n\n\nUserCategoryModule\n\nUserCategoryModule\n\nUserCategoryService  -->\n\nUserCategoryModule->UserCategoryService \n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nUserCategoryModule -->\n\nAuthenticateMiddleware->UserCategoryModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserCategoryModule -->\n\nResponseService->UserCategoryModule\n\n\n\n\n\nUserCategoryService\n\nUserCategoryService\n\nUserCategoryModule -->\n\nUserCategoryService->UserCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user-category/user-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserCategoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserCategoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserCategoryService } from './user-category.service';\nimport { UserCategoryController } from './user-category.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserCategory } from './entities/user-category.entity';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { ResponseService } from '@/utils';\nimport { User } from '../user/entities/user.entity';\nimport { Category } from '../category/entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserCategory, User, Category])],\n  controllers: [UserCategoryController],\n  providers: [UserCategoryService, AuthenticateMiddleware, ResponseService],\n  exports: [UserCategoryService],\n})\nexport class UserCategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCategoryService.html":{"url":"injectables/UserCategoryService.html","title":"injectable - UserCategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/user-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCategoryRepository: Repository, userRepository: Repository, categoryRepository: Repository, responseService: ResponseService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user-category/user-category.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCategoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserCategoryDto } from './dto/create-user-category.dto';\nimport { UserCategory } from './entities/user-category.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ResponseService } from '@/utils';\nimport { I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { AuthUserType } from '@/guards';\nimport { User } from '../user/entities/user.entity';\nimport { Category } from '../category/entities/category.entity';\n\n@Injectable()\nexport class UserCategoryService {\n  constructor(\n    @InjectRepository(UserCategory)\n    private userCategoryRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(Category)\n    private readonly categoryRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n  ) { }\n  async create({\n    categoryId,\n    sub: userId,\n  }: CreateUserCategoryDto & AuthUserType) {\n    try {\n      for (const id of categoryId) {\n        const category = await this.categoryRepository.findOne({\n          where: { id },\n        });\n        if (!category) {\n          return this.responseService.Response({\n            data: null,\n            message: await this.i18n.t(\n              'validation.USER_CATEGORY_REGISTER.CATEGORY_NOT_FOUND',\n            ),\n            success: false,\n            key: 'category',\n          });\n        }\n\n        const user = await this.userRepository.findOne({\n          where: { id: userId },\n        });\n        const userCategory = this.userCategoryRepository.create({\n          user: user,\n          category,\n        });\n        await this.userCategoryRepository.save(userCategory);\n      }\n      const userCategory = await this.userCategoryRepository.find({\n        where: { user: { id: userId } },\n        relations: ['category'],\n      });\n      return this.responseService.Response({\n        data: userCategory,\n        message: 'User category created successfully',\n        success: true,\n        key: 'userCategories',\n        statusCode: 201,\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to create user category',\n        success: false,\n        key: 'userCategory',\n      });\n    }\n  }\n\n  async findAll({ userId }: { userId: string }) {\n    try {\n      const userCategories = await this.userCategoryRepository.find({\n        where: { user: { id: userId } },\n        relations: ['category'],\n      });\n      return this.responseService.Response({\n        data: userCategories,\n        message: 'User categories fetched successfully',\n        success: true,\n        key: 'userCategories',\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch user categories',\n        success: false,\n        key: 'userCategories',\n      });\n    }\n  }\n\n  async remove({ id }: { id: string }) {\n    try {\n      await this.userCategoryRepository.softDelete(id);\n      return this.responseService.Response({\n        data: null,\n        message: 'User category deleted successfully',\n        success: true,\n        key: 'userCategory',\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to delete user category',\n        success: false,\n        key: 'userCategory',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN)@Get()@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(id: string, role: RolesEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@ApiQuery({name: 'role', required: true, enum: RolesEnum, description: 'Role to assign to the user'})@Put(':id/role')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            RolesEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  UseGuards,\n  UseInterceptors,\n  UploadedFiles,\n  Put,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto, ProfileDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags, ApiQuery, ApiBearerAuth, ApiOperation, ApiConsumes } from '@nestjs/swagger';\nimport { AssociativeArray, storage } from '@/utils';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { RolesEnum } from '@/enums';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) { }\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Get()\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,\n  ) {\n    return this.userService.findAll(filters);\n  }\n\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @ApiQuery({\n    name: 'role',\n    required: true,\n    enum: RolesEnum,\n    description: 'Role to assign to the user',\n  })\n  @Put(':id/role')\n  updateRole(@Param('id') id: string, @Query('role') role: RolesEnum) {\n    return this.userService.updateRole(id, role);\n  }\n}\n\n@ApiTags('Profile')\n@Controller('profile')\nexport class ProfileController {\n\n  constructor(private readonly userService: UserService) { }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  @Get('')\n  getProfile(@User() user: AuthUserType) {\n    return this.userService.getProfile(user);\n  }\n\n  @Patch('profile')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('/profile') },\n    ),\n  )\n  @ApiOperation({ summary: 'Update user' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  updateProfile(@User() user: AuthUserType, @Body() updateUserDto: ProfileDto,\n    @UploadedFiles()\n    files: {\n      profile_picture: Express.Multer.File;\n    }) {\n    return this.userService.updateProfile(updateUserDto, user, files);\n  }\n\n  @Get(\"/debug-sentry\")\n  getError() {\n    throw new Error(\"My first Sentry error!\");\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nUserModule -->\n\nAuthenticateMiddleware->UserModule\n\n\n\n\n\nPaginateHelper\n\nPaginateHelper\n\nUserModule -->\n\nPaginateHelper->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            PaginateHelper\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { ProfileController, UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { ResponseService } from '@/utils';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { JwtService } from '@nestjs/jwt';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController, ProfileController],\n  providers: [\n    UserService,\n    AuthenticateMiddleware,\n    JwtService,\n    ResponseService,\n    PaginateHelper,\n  ],\n  exports: [UserService],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                emailExists\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                formatUsername\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                userDetail\n                            \n                            \n                                    Async\n                                usernameExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, responseService: ResponseService, i18n: I18nService, userPagination: PaginateHelper)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userPagination\n                                                  \n                                                        \n                                                                        PaginateHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emailExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailExists(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filters?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatUsername\n                        \n                    \n                \n            \n            \n                \nformatUsername(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(authUser: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:241\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authUser\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(updateUserDto: ProfileDto, authUser: AuthUserType, imageProfile: ImagePicDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            ProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authUser\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                imageProfile\n                                            \n                                                            ImagePicDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(id: string, role: Roles)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:261\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            Roles\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userDetail\n                        \n                    \n                \n            \n            \n                \n                        \n                    userDetail(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        usernameExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    usernameExists(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto, ImagePicDto, ProfileDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport {\n  AssociativeArray,\n  filterQueryBuilderFromRequest,\n  getUploadPath,\n  removeFile,\n  ResponseService,\n} from '@/utils';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport * as bcrypt from 'bcrypt';\nimport { RolesEnum as Roles } from '@/enums';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { AuthUserType } from '@/guards';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n    private readonly userPagination: PaginateHelper,\n  ) { }\n  async create(createUserDto: CreateUserDto) {\n    try {\n      const lang = I18nContext.current().lang;\n      const { email, password, phone, username, role } = createUserDto;\n      const isEmailExists = await this.emailExists(email);\n      const isUsernameExists = await this.usernameExists(\n        this.formatUsername(username),\n      );\n      if (isUsernameExists) {\n        return this.responseService.Response({\n          data: null,\n          message: await this.i18n.t('validation.USER_REGISTER.EMAIL_EXISTS', {\n            lang,\n          }),\n        });\n      }\n      if (isEmailExists) {\n        return this.responseService.Response({\n          data: null,\n          message: await this.i18n.t('validation.USER_REGISTER.EMAIL_EXISTS', {\n            lang,\n          }),\n        });\n      }\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const UserRole = Roles[role];\n      const user = this.userRepository.create({\n        ...createUserDto,\n        phone,\n        username: this.formatUsername(username),\n        password: hashedPassword,\n        role: UserRole,\n      });\n\n      await this.userRepository.save(user);\n      return this.responseService.Response({\n        data: user,\n        key: 'users',\n        message: await this.i18n.t('validation.USER_REGISTER.USER_SUCCESS', {\n          lang,\n        }),\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      const lang = I18nContext.current().lang;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: await this.i18n.t('validation.USER_REGISTER.USER_FAIL', {\n          lang,\n        }),\n      });\n    }\n  }\n\n  async findAll(filters?: AssociativeArray) {\n    try {\n      const q = this.userRepository\n        .createQueryBuilder('users')\n        .select([\n          'users.id',\n          'users.name',\n          'users.username',\n          'users.email',\n          'users.phone',\n          'users.status',\n          'users.created_at',\n          'users.role',\n          'users.deleted_at',\n        ])\n        .orderBy('users.created_at', 'DESC');\n      filterQueryBuilderFromRequest(q, filters);\n\n      const users = await this.userPagination.run(q);\n      return this.responseService.Response({\n        data: users,\n        key: 'users',\n        message: 'Users fetched successfully',\n      });\n    } catch (error) { }\n  }\n\n  async findOne(id: string) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id },\n        withDeleted: true,\n      });\n      return this.responseService.Response({\n        data: user,\n        key: 'users',\n        message: 'User fetched successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not found',\n      });\n    }\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id },\n        withDeleted: true,\n      });\n      if (!user) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n        });\n      }\n      const updatedUser = await this.userRepository.save({\n        ...user,\n        ...updateUserDto,\n      });\n      return this.responseService.Response({\n        data: updatedUser,\n        key: 'users',\n        message: 'User updated successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not updated',\n      });\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      await this.userRepository.softDelete(id);\n      return this.responseService.Response({\n        data: null,\n        message: 'User deleted successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not deleted',\n      });\n    }\n  }\n\n  async emailExists(email: string): Promise {\n    const exists = await this.userRepository.exists({\n      where: { email },\n      withDeleted: true,\n    });\n    return exists;\n  }\n\n  async usernameExists(username: string): Promise {\n    const exists = await this.userRepository.exists({\n      where: { username },\n      withDeleted: true,\n    });\n    return exists;\n  }\n\n  formatUsername(name: string): string {\n    if (!name) return '';\n    return name\n      .replace(/' '/g, '_')\n      .replace(/[^a-zA-Z0-9_]/g, '')\n      .replace(/\\s/g, '')\n      .toLowerCase();\n  }\n\n  async userDetail(id: string) {\n    const user = await this.userRepository.findOneOrFail({\n      where: { id },\n      withDeleted: true,\n    });\n    return user;\n  }\n\n  async updateProfile(updateUserDto: ProfileDto, authUser: AuthUserType, imageProfile: ImagePicDto) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id: authUser.sub },\n        withDeleted: true,\n      });\n      if (!user) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n        });\n      }\n      if (user?.profile_picture) {\n        removeFile(user.profile_picture);\n      }\n      const updatedUser = await this.userRepository.save({\n        ...user,\n        ...updateUserDto,\n        profile_picture: imageProfile?.profile_picture[0]?.filename || null,\n      });\n\n      return this.responseService.Response({\n        data: updatedUser,\n        key: 'users',\n        message: 'User updated successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not updated',\n      });\n    }\n\n  }\n  async getProfile(authUser: AuthUserType) {\n    try {\n      const user = await this.userRepository.findOneOrFail({\n        where: { id: authUser?.sub },\n        withDeleted: true,\n      });\n      user.profile_picture = user.profile_picture ? getUploadPath(user.profile_picture) : null;\n      return this.responseService.Response({\n        data: user,\n        key: 'users',\n        message: 'User fetched successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not found',\n      });\n    }\n  }\n\n  async updateRole(id: string, role: Roles) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id },\n        withDeleted: true,\n      });\n      if (!user) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n        });\n      }\n      const updatedUser = await this.userRepository.save({\n        ...user,\n        role,\n      });\n      return this.responseService.Response({\n        data: updatedUser,\n        key: 'users',\n        message: 'User updated successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not updated',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/validation.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BadRequestException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: ValidationResponse)\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/validation.exception.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                        ValidationResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ValidationResponse\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/validation.exception.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, ValidationError } from '@nestjs/common';\n\nexport const ValidationExceptionFactory = (errors: ValidationError[]) => {\n  const formattedErrors = formatErrors(errors);\n  return new ValidationException(formattedErrors);\n};\n\ninterface ValidationResponse {\n  [key: string]: string[] | ValidationResponse;\n}\nfunction formatErrors(\n  errors: ValidationError[],\n  seen = new WeakSet(),\n): ValidationResponse {\n  const errorResponse: ValidationResponse = {};\n  errors.forEach((error: ValidationError) => {\n    if (seen.has(error)) {\n      return;\n    }\n    seen.add(error);\n    if (error.constraints) {\n      // Standard validation errors\n      errorResponse[error.property] = Object.values(error.constraints);\n    } else if (error.children && error.children.length > 0) {\n      // Nested errors\n      errorResponse[error.property] = formatErrors(error.children);\n    } else {\n      errorResponse[error.property] = ['Unknown validation error'];\n    }\n  });\n  return errorResponse;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public errors: ValidationResponse) {\n    super(errors);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationResponse.html":{"url":"interfaces/ValidationResponse.html","title":"interface - ValidationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/bad-request.filter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport { STATUS_CODES } from 'http';\nimport * as _ from 'lodash';\n\ninterface ValidationResponse {\n  data: Record;\n}\n\n@Catch(BadRequestException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(public reflector: Reflector) { }\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const response = ctx.getResponse();\n    let statusCode = exception.getStatus();\n    const r = exception.getResponse();\n\n    if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n      statusCode = HttpStatus.UNPROCESSABLE_ENTITY;\n      const validationErrors = r.message;\n      this._validationFilter(validationErrors);\n    }\n    const formattedErrors = this.formatErrors(r.message);\n    r.statusCode = statusCode;\n    r.error = STATUS_CODES[statusCode];\n\n    throw response.status(statusCode).json(formattedErrors);\n  }\n\n  private _validationFilter(validationErrors: ValidationError[]) {\n    for (const validationError of validationErrors) {\n      for (const [constraintKey, constraint] of Object.entries(\n        validationError.constraints,\n      )) {\n        if (!constraint) {\n          // convert error message to error.fields.{key} syntax for i18n translation\n          validationError.constraints[constraintKey] =\n            'error.fields.' + _.snakeCase(constraintKey);\n        }\n      }\n      if (!_.isEmpty(validationError.children)) {\n        this._validationFilter(validationError.children);\n      }\n    }\n  }\n\n  private formatErrors(\n    errors: ValidationError[],\n    seen = new WeakSet(),\n  ): ValidationResponse {\n    const errMsg = {};\n\n    if (_.isArray(errors) && errors.length === 0) {\n      errors.forEach((error: ValidationError) => {\n        if (seen.has(error)) {\n          return;\n        }\n        seen.add(error);\n\n        if (error.constraints) {\n          errMsg[error.property] = Object.values(error.constraints);\n        } else if (error.children && error.children.length > 0) {\n          errMsg[error.property] = this.formatErrors(error.children);\n        } else {\n          errMsg[error.property] = ['Unknown validation error'];\n        }\n      });\n      const formattedErrors = {\n        data: errMsg,\n      };\n      return formattedErrors;\n    } else if (!_.isEmpty(errors)) {\n      if (_.isString(errors)) {\n        errMsg['error'] = errors;\n        return {\n          data: errMsg,\n        };\n      }\n    } else {\n      return { data: {} };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationResponse-1.html":{"url":"interfaces/ValidationResponse-1.html","title":"interface - ValidationResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/validation.exception.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    [] | ValidationResponse\n\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/validation.exception.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, ValidationError } from '@nestjs/common';\n\nexport const ValidationExceptionFactory = (errors: ValidationError[]) => {\n  const formattedErrors = formatErrors(errors);\n  return new ValidationException(formattedErrors);\n};\n\ninterface ValidationResponse {\n  [key: string]: string[] | ValidationResponse;\n}\nfunction formatErrors(\n  errors: ValidationError[],\n  seen = new WeakSet(),\n): ValidationResponse {\n  const errorResponse: ValidationResponse = {};\n  errors.forEach((error: ValidationError) => {\n    if (seen.has(error)) {\n      return;\n    }\n    seen.add(error);\n    if (error.constraints) {\n      // Standard validation errors\n      errorResponse[error.property] = Object.values(error.constraints);\n    } else if (error.children && error.children.length > 0) {\n      // Nested errors\n      errorResponse[error.property] = formatErrors(error.children);\n    } else {\n      errorResponse[error.property] = ['Unknown validation error'];\n    }\n  });\n  return errorResponse;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public errors: ValidationResponse) {\n    super(errors);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/configs/config.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/configs/config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configs/swagger.ts\n            \n            class\n            swaggerConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/decorators/auth-user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/logout.decorator.ts\n            \n            variable\n            LogoutDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/roles.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/bad-request.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/filters/bad-request.filter.ts\n            \n            interface\n            ValidationResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/filters/file-request.filter.ts\n            \n            injectable\n            FileRequestFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/query-fail.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/generated/i18n.generated.ts\n            \n            type alias\n            I18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/i18n.generated.ts\n            \n            type alias\n            I18nTranslations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/guards/auth.guard.ts\n            \n            type alias\n            AuthUserType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/response.interceptor.ts\n            \n            class\n            CustomResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/authenticate.middleware.ts\n            \n            injectable\n            AuthenticateMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middlewares/authenticate.middleware.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middlewares/authenticate.middleware.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/middlewares/language.middleware.ts\n            \n            injectable\n            LanguageMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            ForgetPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            OTPDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/category/dto/create-category.dto.ts\n            \n            class\n            FilesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/category/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/courses/courses.controller.ts\n            \n            controller\n            CoursesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/courses/courses.service.ts\n            \n            injectable\n            CoursesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/courses/dto/create-course.dto.ts\n            \n            class\n            CreateCourseDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/courses/dto/create-course.dto.ts\n            \n            class\n            FilesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/courses/dto/update-course.dto.ts\n            \n            class\n            UpdateCourseDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/courses/entities/course.entity.ts\n            \n            entity\n            Course\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/default/default.module.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/default/default.module.ts\n            \n            injectable\n            DefaultService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/enrolls/enrolls.controller.ts\n            \n            controller\n            EnrollsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/enrolls/enrolls.service.ts\n            \n            injectable\n            EnrollsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/enrolls/entities/enroll.entity.ts\n            \n            entity\n            Enroll\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/lessons/dto/create-lesson.dto.ts\n            \n            class\n            CreateLessonDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/lessons/dto/create-lesson.dto.ts\n            \n            class\n            FilesDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/lessons/dto/update-lesson.dto.ts\n            \n            class\n            UpdateLessonDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/lessons/entities/lesson.entity.ts\n            \n            entity\n            Lesson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/lessons/lessons.controller.ts\n            \n            controller\n            LessonsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/lessons/lessons.service.ts\n            \n            injectable\n            LessonsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/mails/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/prometheus/prometheus.controller.ts\n            \n            controller\n            PrometheusController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/prometheus/prometheus.service.ts\n            \n            injectable\n            PrometheusService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/quiz/dto/create-quiz.dto.ts\n            \n            class\n            CreateQuizDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/quiz/dto/update-quiz.dto.ts\n            \n            class\n            UpdateQuizDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/entities/quiz.entity.ts\n            \n            entity\n            AnswerOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/entities/quiz.entity.ts\n            \n            entity\n            Question\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/entities/quiz.entity.ts\n            \n            entity\n            Quiz\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/quiz.controller.ts\n            \n            controller\n            QuizController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/quiz/quiz.service.ts\n            \n            injectable\n            QuizService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user-category/dto/create-user-category.dto.ts\n            \n            class\n            CreateUserCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/user-category/dto/update-user-category.dto.ts\n            \n            class\n            UpdateUserCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user-category/entities/user-category.entity.ts\n            \n            entity\n            UserCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user-category/user-category.controller.ts\n            \n            controller\n            UserCategoryController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user-category/user-category.service.ts\n            \n            injectable\n            UserCategoryService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            ImagePicDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            ProfileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/shared/access-control.service.ts\n            \n            injectable\n            AccessContorlService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/shared/access-control.service.ts\n            \n            interface\n            IsAuthorizedParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/exceptions/validation.exception.ts\n            \n            class\n            ValidationException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/exceptions/validation.exception.ts\n            \n            interface\n            ValidationResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/exceptions/validation.exception.ts\n            \n            function\n            formatErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/exceptions/validation.exception.ts\n            \n            variable\n            ValidationExceptionFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/strategy/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            getFileName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            getUploadPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            removeFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            removeWhiteSpace\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            storage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            interface\n            AssociativeArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/lib.ts\n            \n            variable\n            filterQueryBuilderFromRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/lib.ts\n            \n            variable\n            url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/lib.ts\n            \n            variable\n            uuid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/paginate.ts\n            \n            injectable\n            PaginateHelper\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            class\n            CustomExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            class\n            IRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            class\n            IResponseData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/response/response.dto.ts\n            \n            class\n            ResponseDto\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @sentry/cli : ^2.42.2\n        \n            @sentry/nestjs : ^9.5.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            bcrypt : ^5.1.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            handlebars : ^4.7.8\n        \n            helmet : ^7.1.0\n        \n            multer : ^1.4.5-lts.1\n        \n            nest-winston : ^1.9.4\n        \n            nestjs-i18n : ^10.4.0\n        \n            nestjs-typeorm-paginate : ^4.0.4\n        \n            nodemailer : ^6.9.14\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.11.5\n        \n            postgres : ^3.4.4\n        \n            prom-client : ^15.1.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^9.0.1\n        \n            winston : ^3.13.0\n        \n            winston-daily-rotate-file : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LessonType   (src/.../lesson.entity.ts)\n                        \n                        \n                            QuestionType   (src/.../quiz.entity.ts)\n                        \n                        \n                            RolesEnum   (src/.../roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/lessons/entities/lesson.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        LessonType\n                    \n                \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n                        \n                            \n                                 PDF\n                            \n                        \n                        \n                            \n                                Value : pdf\n                            \n                        \n                        \n                            \n                                 QUIZ\n                            \n                        \n                        \n                            \n                                Value : quiz\n                            \n                        \n                        \n                            \n                                 ARTICLE\n                            \n                        \n                        \n                            \n                                Value : article\n                            \n                        \n            \n        \n\n    src/modules/quiz/entities/quiz.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QuestionType\n                    \n                \n                        \n                            \n                                 SINGLE_CHOICE\n                            \n                        \n                        \n                            \n                                Value : single_choice\n                            \n                        \n                        \n                            \n                                 MULTIPLE_CHOICE\n                            \n                        \n                        \n                            \n                                Value : multiple_choice\n                            \n                        \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n            \n        \n\n    src/enums/roles.ts\n    \n        \n            \n                \n                    \n                        \n                        RolesEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 GUEST\n                            \n                        \n                        \n                            \n                                Value : guest\n                            \n                        \n                        \n                            \n                                 MENTOR\n                            \n                        \n                        \n                            \n                                Value : mentor\n                            \n                        \n                        \n                            \n                                 INSTRUCTOR\n                            \n                        \n                        \n                            \n                                Value : instructor\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            formatErrors   (src/.../validation.exception.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/exceptions/validation.exception.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatErrors\n                        \n                    \n                \n            \n            \n                \nformatErrors(errors, seen)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                seen\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    new WeakSet()\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 NDACYAYISENGA Fabrice\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoursesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DefaultModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnrollsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        I18nConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LessonsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrometheusModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuizModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_exports\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CoursesModule\n\n\n\ncluster_CoursesModule_exports\n\n\n\ncluster_CoursesModule_providers\n\n\n\ncluster_DefaultModule\n\n\n\ncluster_DefaultModule_providers\n\n\n\ncluster_EnrollsModule\n\n\n\ncluster_EnrollsModule_exports\n\n\n\ncluster_EnrollsModule_providers\n\n\n\ncluster_LessonsModule\n\n\n\ncluster_LessonsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PrometheusModule\n\n\n\ncluster_PrometheusModule_providers\n\n\n\ncluster_QuizModule\n\n\n\ncluster_QuizModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_imports\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_UserCategoryModule\n\n\n\ncluster_UserCategoryModule_exports\n\n\n\ncluster_UserCategoryModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCategoryService \n\nCategoryService \n\nCategoryService  -->\n\nCategoryModule->CategoryService \n\n\n\n\n\nCoursesModule\n\nCoursesModule\n\nAppModule -->\n\nCoursesModule->AppModule\n\n\n\n\n\nCoursesService \n\nCoursesService \n\nCoursesService  -->\n\nCoursesModule->CoursesService \n\n\n\n\n\nDefaultModule\n\nDefaultModule\n\nAppModule -->\n\nDefaultModule->AppModule\n\n\n\n\n\nEnrollsModule\n\nEnrollsModule\n\nAppModule -->\n\nEnrollsModule->AppModule\n\n\n\n\n\nEnrollsService \n\nEnrollsService \n\nEnrollsService  -->\n\nEnrollsModule->EnrollsService \n\n\n\n\n\nI18nConfigModule\n\nI18nConfigModule\n\nAppModule -->\n\nI18nConfigModule->AppModule\n\n\n\n\n\nLessonsModule\n\nLessonsModule\n\nAppModule -->\n\nLessonsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nPrometheusModule\n\nPrometheusModule\n\nAppModule -->\n\nPrometheusModule->AppModule\n\n\n\n\n\nQuizModule\n\nQuizModule\n\nAppModule -->\n\nQuizModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nAuthenticateMiddleware \n\nAuthenticateMiddleware \n\nAuthenticateMiddleware  -->\n\nSharedModule->AuthenticateMiddleware \n\n\n\n\n\nPaginateHelper \n\nPaginateHelper \n\nPaginateHelper  -->\n\nSharedModule->PaginateHelper \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nSharedModule->ResponseService \n\n\n\n\n\nUserCategoryModule\n\nUserCategoryModule\n\nAppModule -->\n\nUserCategoryModule->AppModule\n\n\n\n\n\nUserCategoryService \n\nUserCategoryService \n\nUserCategoryService  -->\n\nUserCategoryModule->UserCategoryService \n\n\n\n\n\nUserModule\n\nUserModule\n\nCoursesModule -->\n\nUserModule->CoursesModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\nCategoryModule -->\n\nResponseService->CategoryModule\n\n\n\nDefaultModule -->\n\nResponseService->DefaultModule\n\n\n\nSharedModule -->\n\nResponseService->SharedModule\n\n\n\nUserCategoryModule -->\n\nResponseService->UserCategoryModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nCoursesService\n\nCoursesService\n\nCoursesModule -->\n\nCoursesService->CoursesModule\n\n\n\n\n\nDefaultService\n\nDefaultService\n\nDefaultModule -->\n\nDefaultService->DefaultModule\n\n\n\n\n\nEnrollsService\n\nEnrollsService\n\nEnrollsModule -->\n\nEnrollsService->EnrollsModule\n\n\n\n\n\nLessonsService\n\nLessonsService\n\nLessonsModule -->\n\nLessonsService->LessonsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPrometheusService\n\nPrometheusService\n\nPrometheusModule -->\n\nPrometheusService->PrometheusModule\n\n\n\n\n\nQuizService\n\nQuizService\n\nQuizModule -->\n\nQuizService->QuizModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nSharedModule -->\n\nDbModule->SharedModule\n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nSharedModule -->\n\nAuthenticateMiddleware->SharedModule\n\n\n\nUserCategoryModule -->\n\nAuthenticateMiddleware->UserCategoryModule\n\n\n\nUserModule -->\n\nAuthenticateMiddleware->UserModule\n\n\n\n\n\nPaginateHelper\n\nPaginateHelper\n\nSharedModule -->\n\nPaginateHelper->SharedModule\n\n\n\nUserModule -->\n\nPaginateHelper->UserModule\n\n\n\n\n\nUserCategoryService\n\nUserCategoryService\n\nUserCategoryModule -->\n\nUserCategoryService->UserCategoryModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/swaggerConfig.html":{"url":"classes/swaggerConfig.html","title":"class - swaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  swaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configs/swagger.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                description\n                            \n                            \n                                    Static\n                                    Readonly\n                                termsOfService\n                            \n                            \n                                    Static\n                                    Readonly\n                                title\n                            \n                            \n                                    Static\n                                    Readonly\n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Application for E-Learning API. This API is used to manage the application's users, courses, lessons, and other resources.\"\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        termsOfService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Terms of service'\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Application for E-Learning API'\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0.0'\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class swaggerConfig {\n  public static readonly title = 'Application for E-Learning API';\n  public static readonly version = '1.0.0';\n  public static readonly description =\n    \"Application for E-Learning API. This API is used to manage the application's users, courses, lessons, and other resources.\";\n  public static readonly termsOfService = 'Terms of service';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthUserType   (src/.../auth.guard.ts)\n                        \n                        \n                            I18nPath   (src/.../i18n.generated.ts)\n                        \n                        \n                            I18nTranslations   (src/.../i18n.generated.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/guards/auth.guard.ts\n    \n    \n        \n            \n                \n                    \n                    AuthUserType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/generated/i18n.generated.ts\n    \n    \n        \n            \n                \n                    \n                    I18nPath\n                \n            \n            \n                \n                            Path\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    I18nTranslations\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            config   (src/.../config.ts)\n                        \n                        \n                            filterQueryBuilderFromRequest   (src/.../lib.ts)\n                        \n                        \n                            generateSlug   (src/.../helper.ts)\n                        \n                        \n                            getFileName   (src/.../helper.ts)\n                        \n                        \n                            getUploadPath   (src/.../helper.ts)\n                        \n                        \n                            LogoutDecorator   (src/.../logout.decorator.ts)\n                        \n                        \n                            removeFile   (src/.../helper.ts)\n                        \n                        \n                            removeWhiteSpace   (src/.../helper.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            storage   (src/.../helper.ts)\n                        \n                        \n                            url   (src/.../lib.ts)\n                        \n                        \n                            User   (src/.../auth-user.decorator.ts)\n                        \n                        \n                            uuid   (src/.../lib.ts)\n                        \n                        \n                            ValidationExceptionFactory   (src/.../validation.exception.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configs/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): Config => ({\n  prefix: process.env.PREFIX || '!',\n  port: parseInt(process.env.PORT, 10) || 3000,\n  secret: process.env.JWT_SECRET || 'secret',\n  google: {\n    clientId: process.env.GOOGLE_CLIENT_ID || '',\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n    callbackURL:\n      process.env.GOOGLE_CALLBACK_URL ||\n      'http://localhost:3000/auth/google/callback',\n  },\n  mail: {\n    host: process.env.MAIL_HOST || 'smtp.gmail.com',\n    auth: {\n      user: process.env.MAIL_USER || '',\n      pass: process.env.MAIL_PASS || 'topsecret',\n    },\n    port: parseInt(process.env.MAIL_PORT, 10) || 587,\n    from:\n      `\"No Reply\" ${process.env.MAIL_FROM}` ||\n      '\"No Reply\" ',\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/lib.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        filterQueryBuilderFromRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  q: SelectQueryBuilder,\n  filters?: AssociativeArray,\n) => {\n  if (filters) {\n    const keys = Object.keys(filters);\n\n    const alias = q.alias;\n\n    for (const key of keys) {\n      const value = filters[key];\n\n      if (isIn(key, ['limit', 'offset', 'page'])) continue;\n\n      if (key === 'from') {\n        q.andWhere(`${alias}.createdAt >= '${value}'`);\n        continue;\n      }\n      if (key === 'to') {\n        q.andWhere(`${alias}.createdAt \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (link: string) => {\n  const base = process.env.BACKEND_DOMAIN + '/' + process.env.PREFIX;\n\n  if (link.charAt(0) == '/') {\n    return base + link;\n  }\n  return base + '/' + link;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => uuidv4()\n                    \n                \n\n\n        \n    \n\n    src/utils/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (title: string) => {\n  return title\n    .toLowerCase()\n    .replace(/ /g, '-')\n    .replace(/[^\\w-]+/g, '');\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFileName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (file: Express.Multer.File, dir?: string | undefined) => {\n  const name = file.originalname.split('.')[0];\n  const ext = file.originalname.split('.')[1];\n\n  return `${removeWhiteSpace(name)}-${Date.now()}.${ext}`;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUploadPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (fileName: string) => {\n  const regix = new RegExp(/https?:\\/\\//);\n  if (regix.test(fileName)) {\n    return fileName;\n  }\n  return `${process.env.BACKEND_DOMAIN}/uploads/${fileName}`;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (fileName: string) => {\n  const filePath = path.join(__dirname, `../../uploads/${fileName}`);\n  if (!fs.existsSync(filePath)) {\n    return;\n  }\n  fs.unlink(filePath, (err) => {\n    if (err) {\n      throw err;\n    }\n  });\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeWhiteSpace\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string) => {\n  return str.replace(/\\s/g, '').toLowerCase();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (dir?: string | undefined) => diskStorage({\n  destination: (\n    req: Express.Request,\n    file: Express.Multer.File,\n    cb: (error: Error | null, destination: string) => void,\n  ) => {\n    // if (file.size > 1024 * 1024 * 5) {\n    //   return cb(new Error('File is too large'), null);\n    // } else if (!file.mimetype.match(/\\/(jpg|jpeg|png|gif)$/)) {\n    //   return cb(new Error('Only image files are allowed!'), null);\n    // }\n    const distination = path.join(__dirname, '../../uploads', dir || '');\n    if (!fs.existsSync(distination)) {\n      fs.mkdirSync(distination);\n    }\n    cb(null, distination);\n  },\n  filename: (req, file, cb) => {\n    cb(null, getFileName(file, dir));\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/decorators/logout.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LogoutDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (req: Request, res: Response) => {\n  req.user = null;\n  res.status(200).json({\n    success: true,\n    message: 'Logout successfully',\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...role: Role[]) => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n\n        \n    \n\n    src/decorators/auth-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user as AuthUserType;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/shared/exceptions/validation.exception.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationExceptionFactory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (errors: ValidationError[]) => {\n  const formattedErrors = formatErrors(errors);\n  return new ValidationException(formattedErrors);\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
