var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessContorlService.html",[0,0.776,1,3.219]],["body/injectables/AccessContorlService.html",[0,1.035,1,4.294,2,1.569,3,0.113,4,0.103,5,0.072,6,6.376,7,3.353,8,0.347,9,1.274,10,2.681,11,5.836,12,6.834,13,1.412,14,6.296,15,3.77,16,5.787,17,5.836,18,1.66,19,0.77,20,5.787,21,5.093,22,3.718,23,4.186,24,3.278,25,5.093,26,4.635,27,6.296,28,5.093,29,6.296,30,4.635,31,3.226,32,6.296,33,1.308,34,5.093,35,1.577,36,0.01,37,1.218,38,0.67,39,1.218,40,1.291,41,4.971,42,5.093,43,5.093,44,1.577,45,2.184,46,4.186,47,5.762,48,4.186,49,4.186,50,4.186,51,1.771,52,2.233,53,2.528,54,4.186,55,1.44,56,2.704,57,0.2,58,0.551,59,1.716,60,1.771,61,1.771,62,5.093,63,5.093,64,0.113,65,0.153,66,3.684,67,3.684,68,3.684,69,3.684,70,2.184,71,1.702,72,4.635,73,1.363,74,3.684,75,3.684,76,5.093,77,3.684,78,3.684,79,3.684,80,5.093,81,3.684,82,2.801,83,0.006,84,0.006]],["title/entities/AnswerOption.html",[85,1.725,86,2.699]],["body/entities/AnswerOption.html",[3,0.111,4,0.101,5,0.071,8,0.34,9,1.258,18,1.644,19,0.703,36,0.01,38,0.72,40,1.267,41,2.855,57,0.227,64,0.191,65,0.24,83,0.006,84,0.006,85,2.822,86,4.414,87,2.143,88,2.855,89,2.428,90,5.259,91,5.016,92,4.786,93,1.115,94,1.92,95,4.225,96,4.108,97,4.921,98,4.108,99,3.048,100,4.238,101,5.259,102,5.974,103,4.108,104,4.108,105,3.434,106,1.083,107,3.385,108,4.084,109,4.872,110,3.969,111,3.385,112,1.539,113,3.484,114,3.048,115,3.565,116,4.562,117,4.238,118,4.238,119,3.368,120,3.72,121,1.919,122,3.236,123,1.604,124,3.291,125,2.855,126,3.291,127,3.291,128,3.291,129,2.855,130,3.236,131,2.855,132,3.291,133,3.048,134,3.291,135,2.555,136,3.291,137,2.855,138,3.291,139,3.969,140,3.291,141,3.048,142,3.291,143,3.048]],["title/controllers/AppController.html",[144,1.452,145,3.015]],["body/controllers/AppController.html",[0,1.202,3,0.141,4,0.128,5,0.09,8,0.434,10,2.188,13,1.64,18,1.312,19,0.519,36,0.01,44,1.246,57,0.28,58,0.69,64,0.181,65,0.271,71,1.246,83,0.007,84,0.007,94,1.417,106,1.381,123,1.184,144,2.248,145,5.155,146,2.312,147,3.887,148,2.535,149,6.482,150,5.239,151,2.548,152,1.726,153,2.63,154,1.246,155,1.853,156,1.907,157,3.435,158,4.028,159,1.616,160,1.706,161,5.131,162,1.81,163,4.396,164,3.435,165,1.682,166,2.535,167,2.216,168,1.853,169,3.259,170,1.706,171,1.558,172,5.382,173,4.196,174,1.963,175,4.196,176,2.288,177,3.259]],["title/modules/AppModule.html",[152,1.115,178,3.219]],["body/modules/AppModule.html",[3,0.113,4,0.103,5,0.072,13,1.022,19,0.415,35,0.996,36,0.01,37,0.769,38,0.373,39,0.769,44,0.996,45,2.184,57,0.297,58,0.551,64,0.113,65,0.153,83,0.006,84,0.006,152,1.704,176,1.829,177,4.83,178,6.675,179,2.372,180,1.829,181,1.956,182,1.956,183,1.829,184,1.956,185,3.684,186,3.684,187,5.396,188,5.396,189,5.396,190,5.396,191,5.396,192,5.396,193,5.091,194,5.396,195,5.396,196,5.396,197,5.396,198,5.091,199,2.704,200,1.89,201,1.89,202,4.186,203,2.704,204,4.186,205,5.787,206,7.154,207,4.186,208,4.186,209,5.787,210,3.106,211,3.106,212,2.909,213,4.186,214,4.186,215,4.186,216,3.353,217,2.909,218,4.186,219,4.186,220,4.186,221,2.745,222,4.186,223,4.186,224,4.186,225,4.186,226,1.89,227,4.186,228,4.186]],["title/interfaces/AssociativeArray.html",[61,1.835,229,2.263]],["body/interfaces/AssociativeArray.html",[3,0.138,4,0.125,5,0.088,19,0.507,36,0.01,51,2.8,53,2.891,55,2.277,57,0.253,61,2.165,64,0.209,65,0.187,71,2.019,83,0.007,84,0.007,93,1.058,105,3.203,112,1.917,165,1.657,229,3.827,230,3.183,231,4.099,232,4.503,233,3.509,234,5.117,235,5.301,236,5.117,237,5.824,238,5.117,239,1.81,240,3.355,241,5.876,242,6.456,243,4.503,244,4.099,245,4.503,246,3.355,247,4.099,248,3.922,249,5.824,250,4.503,251,4.099,252,4.503,253,4.503,254,4.503,255,3.183,256,4.503,257,3.183,258,5.824,259,5.824]],["title/classes/Auth.html",[65,0.159,260,2.699]],["body/classes/Auth.html",[3,0.185,4,0.168,5,0.119,36,0.009,64,0.185,65,0.252,83,0.009,84,0.009,260,4.934,261,1.861,262,6.053]],["title/controllers/AuthController.html",[144,1.452,263,3.219]],["body/controllers/AuthController.html",[3,0.115,4,0.104,5,0.073,8,0.353,13,1.429,19,0.774,35,1.797,36,0.01,37,1.387,38,0.643,39,1.387,44,1.857,57,0.261,58,0.561,64,0.115,65,0.156,70,2.222,83,0.007,84,0.007,93,1.028,94,2.112,144,1.426,146,1.466,148,2.062,153,2.139,154,1.013,162,1.04,165,1.955,174,1.596,260,2.65,263,4.346,264,3.749,265,2.329,266,5.857,267,4.725,268,5.857,269,5.89,270,5.154,271,3.749,272,4.627,273,5.857,274,4.26,275,4.26,276,4.899,277,5.857,278,2.835,279,4.26,280,4.26,281,4.26,282,4.26,283,4.26,284,4.26,285,4.163,286,4.26,287,4.74,288,5.857,289,5.857,290,4.26,291,5.793,292,4.26,293,4.271,294,5.857,295,5.857,296,4.26,297,2.413,298,3.792,299,2.413,300,4.388,301,3.749,302,1.924,303,3.749,304,2.139,305,3.161,306,4.26,307,4.26,308,3.161,309,4.26,310,4.26,311,5.857,312,4.26,313,4.26,314,4.26,315,4.26,316,4.26,317,4.26,318,4.26,319,4.26,320,4.26,321,4.26]],["title/guards/AuthGuard.html",[304,2.178,322,3.475]],["body/guards/AuthGuard.html",[0,1.021,3,0.111,4,0.101,5,0.071,8,0.34,10,2.138,13,1.394,18,1.43,19,0.651,22,3.789,31,1.633,33,1.291,35,1.562,36,0.01,37,1.206,38,0.633,39,1.206,44,1.359,57,0.279,58,0.541,59,1.684,60,1.738,64,0.154,65,0.15,71,1.562,73,1.86,83,0.006,84,0.006,93,0.752,94,1.111,106,1.083,123,1.291,151,2.31,162,1.003,165,1.777,167,2.777,168,2.323,170,2.138,171,1.522,212,2.855,226,1.855,304,2.868,323,1.988,324,3.291,325,2.777,326,7.096,327,5.712,328,4.108,329,6.566,330,4.02,331,5.876,332,4.108,333,5.712,334,5.712,335,5.684,336,4.108,337,3.291,338,3.385,339,5.712,340,5.684,341,4.108,342,4.575,343,2.143,344,2.579,345,1.855,346,1.539,347,3.615,348,3.291,349,3.291,350,2.668,351,2.855,352,4.108,353,4.108,354,1.919,355,4.108,356,5.026,357,3.615,358,5.712,359,4.108,360,4.108,361,4.108,362,3.891,363,5.712,364,1.602,365,3.178,366,5.259,367,5.259,368,3.615,369,1.919,370,4.108,371,3.615,372,4.108]],["title/modules/AuthModule.html",[152,1.115,187,3.015]],["body/modules/AuthModule.html",[3,0.131,4,0.119,5,0.084,33,1.096,36,0.01,57,0.298,58,0.639,64,0.131,65,0.177,83,0.007,84,0.007,106,1.279,123,1.096,146,2.199,151,2.64,152,1.836,176,3.123,179,1.988,180,2.119,181,2.266,182,2.266,183,2.119,184,3.34,187,6.129,193,5.316,199,2.986,200,2.19,201,2.19,203,2.986,210,3.599,263,5.304,300,5.699,301,4.268,373,4.268,374,4.85,375,4.268,376,4.268,377,5.634,378,5.634,379,4.85,380,4.85,381,5.119,382,4.85,383,3.18,384,2.874,385,2.747,386,1.988,387,3.37,388,4.85,389,4.85,390,3.18,391,4.85,392,4.85,393,4.85,394,4.85,395,3.599,396,4.268]],["title/injectables/AuthService.html",[0,0.776,300,2.845]],["body/injectables/AuthService.html",[0,0.588,2,0.747,3,0.054,4,0.049,5,0.034,8,0.165,10,1.753,13,0.802,18,0.823,19,0.723,22,1.895,31,0.793,33,1.545,35,1.703,36,0.01,37,1.361,38,0.639,39,1.315,44,1.703,55,1.131,57,0.247,58,0.263,59,0.818,60,0.844,64,0.054,65,0.073,71,1.984,82,1.591,83,0.004,84,0.004,89,0.649,93,1.08,106,0.526,112,0.747,123,1.1,151,1.996,155,0.705,156,0.726,157,1.307,158,2.643,159,0.615,160,1.585,162,1.188,163,4.155,164,3.191,165,1.994,166,3.53,167,2.593,168,2.169,169,3.028,170,2.374,171,1.742,200,0.9,233,1.436,241,1.597,265,1.307,267,1.307,269,2.894,270,2.894,271,2.894,272,3.435,276,2.885,278,2.967,285,1.24,287,2.487,291,4.548,293,2.885,300,2.156,302,0.9,303,1.755,325,3.344,338,2.885,340,2.634,351,2.285,354,3.595,364,1.314,365,3.101,369,2.708,371,1.755,383,1.307,386,0.818,397,1.755,398,3.288,399,3.288,400,3.288,401,2.894,402,3.288,403,2.285,404,4.868,405,3.288,406,3.288,407,1.755,408,2.885,409,4.548,410,4.019,411,1.994,412,2.44,413,3.288,414,1.994,415,3.216,416,3.288,417,1.994,418,3.147,419,1.994,420,3.288,421,1.994,422,3.288,423,1.755,424,1.994,425,3.288,426,1.994,427,3.288,428,1.994,429,3.197,430,1.994,431,3.288,432,1.994,433,1.994,434,3.899,435,3.288,436,1.994,437,3.288,438,1.994,439,3.288,440,1.994,441,3.191,442,1.48,443,1.182,444,2.634,445,1.994,446,1.48,447,2.107,448,3.288,449,3.288,450,5.1,451,3.288,452,4.196,453,4.868,454,3.288,455,1.994,456,1.307,457,1.629,458,4.027,459,1.949,460,3.288,461,4.027,462,3.382,463,3.288,464,2.285,465,3.288,466,3.288,467,3.288,468,3.612,469,3.288,470,1.994,471,1.994,472,1.994,473,1.994,474,1.994,475,4.196,476,3.288,477,3.288,478,1.755,479,1.994,480,1.24,481,1.994,482,1.994,483,1.386,484,1.755,485,3.288,486,1.994,487,1.994,488,1.994,489,1.994,490,1.083,491,1.182,492,1.994,493,1.755,494,1.48,495,2.751,496,2.44,497,3.288,498,1.994,499,1.994,500,1.994,501,1.994,502,1.994,503,1.994,504,1.994,505,1.994,506,1.755,507,3.288,508,1.994,509,1.994,510,1.386,511,1.994,512,1.994,513,1.994,514,1.994,515,1.994,516,1.755,517,1.994]],["title/injectables/AuthenticateMiddleware.html",[0,0.776,330,2.458]],["body/injectables/AuthenticateMiddleware.html",[0,1.076,2,1.661,3,0.12,4,0.109,5,0.076,8,0.367,10,1.959,13,1.468,18,1.507,19,0.597,22,2.001,33,1.785,35,1.431,36,0.01,37,1.105,38,0.537,39,1.105,44,1.054,55,2.07,57,0.253,58,0.584,61,2.545,64,0.12,65,0.162,71,1.625,73,2.224,83,0.007,84,0.007,93,0.792,106,1.168,151,2.631,152,1.139,162,1.667,166,3.306,167,2.89,168,2.417,171,1.584,226,2.001,285,2.757,291,4.465,325,2.89,330,3.409,342,5.869,344,3.459,345,3.309,346,2.255,351,3.08,354,2.071,362,4.049,364,1.667,366,5.472,367,5.472,383,2.906,390,3.945,409,5.863,447,2.225,456,1.762,457,1.483,480,4.249,518,3.55,519,4.181,520,4.432,521,4.432,522,4.465,523,3.979,524,5.437,525,4.432,526,4.465,527,5.295,528,3.9,529,6.012,530,3.9,531,3.9,532,3.55,533,3.9,534,3.9,535,3.9]],["title/entities/Category.html",[85,1.725,536,1.779]],["body/entities/Category.html",[3,0.117,4,0.106,5,0.074,8,0.358,9,1.302,18,1.082,19,0.822,36,0.01,37,1.238,38,0.782,40,2.08,51,2.502,52,2.282,57,0.262,64,0.117,65,0.247,83,0.007,84,0.007,85,1.718,87,2.254,89,2.195,93,1.077,94,2.243,95,3.82,97,4.5,105,2.862,106,1.139,107,3.505,111,3.505,112,1.619,120,2.448,122,3.82,123,1.638,130,4.697,216,3.461,239,1.529,364,1.443,536,2.425,537,3.803,538,5.003,539,5.003,540,4.194,541,2.852,542,5.003,543,5.401,544,3.206,545,6.743,546,4.321,547,3.003,548,4.321,549,5.003,550,5.205,551,4.321,552,4.321,553,4.321,554,3.461,555,4.321,556,4.321,557,3.003,558,4.321,559,4.51,560,3.803,561,4.321,562,4.11,563,2.973,564,2.883,565,2.688,566,3.206,567,3.206,568,4.321,569,3.385]],["title/controllers/CategoryController.html",[144,1.452,570,3.219]],["body/controllers/CategoryController.html",[3,0.09,4,0.081,5,0.057,8,0.275,13,1.197,19,0.713,31,1.321,35,1.71,36,0.01,37,1.431,38,0.74,39,1.32,40,1.799,44,1.71,51,2.906,56,2.292,57,0.274,58,0.438,59,1.362,60,1.406,64,0.09,65,0.122,70,1.734,82,2.823,83,0.005,84,0.005,89,2.485,93,1.1,94,2.012,106,0.876,144,1.112,146,1.143,148,1.608,153,1.668,154,0.79,162,0.811,165,1.8,170,1.597,174,1.245,265,2.319,297,2.779,298,3.304,299,1.883,302,1.501,304,1.668,323,1.608,346,1.245,364,1.197,536,1.362,540,4.006,541,2.906,570,3.64,571,2.925,572,2.559,573,2.907,574,2.664,575,3.167,576,4.906,577,2.925,578,4.625,579,4.144,580,3.816,581,2.309,582,3.323,583,2.662,584,2.664,585,2.463,586,3.052,587,3.323,588,3.323,589,3.323,590,3.323,591,2.907,592,3.93,593,3.323,594,3.323,595,2.466,596,3.93,597,3.323,598,1.883,599,3.323,600,3.323,601,2.067,602,5.303,603,3.323,604,3.323,605,3.323,606,3.323,607,3.323,608,3.323,609,2.067,610,1.883,611,4.052,612,4.052,613,2.466,614,2.179,615,5.667,616,3.824,617,2.466,618,3.217,619,1.734,620,3.64,621,2.309,622,4.071,623,3.409,624,4.052,625,2.179,626,3.628,627,5.832,628,3.323,629,3.456,630,3.456,631,2.309,632,4.906,633,3.409,634,3.409,635,3.323,636,2.215,637,3.323,638,3.323,639,3.323,640,2.662,641,3.323,642,3.323,643,2.466,644,3.323,645,3.323,646,2.179,647,2.179,648,3.323,649,3.323,650,3.323,651,3.323]],["title/modules/CategoryModule.html",[152,1.115,188,3.015]],["body/modules/CategoryModule.html",[3,0.15,4,0.136,5,0.096,36,0.01,57,0.291,58,0.733,64,0.15,65,0.204,83,0.008,84,0.008,106,1.467,146,2.402,151,2.738,152,1.96,176,3.333,179,2.281,180,2.431,181,2.6,182,2.6,183,2.431,184,3.564,188,6.05,199,3.262,200,2.512,201,2.512,203,2.6,385,3.152,386,2.281,536,2.281,570,5.661,616,5.811,617,4.129,652,4.897,653,4.897,654,4.897,655,5.564,656,4.897,657,4.897,658,5.564]],["title/injectables/CategoryService.html",[0,0.776,616,2.845]],["body/injectables/CategoryService.html",[0,0.641,2,0.83,3,0.06,4,0.054,5,0.038,8,0.183,10,1.469,13,0.874,18,0.897,19,0.662,35,1.587,36,0.01,37,1.33,38,0.595,39,1.225,40,0.683,44,1.525,51,2.193,57,0.238,58,0.292,64,0.06,65,0.081,71,1.954,83,0.004,84,0.004,89,2.305,93,1.062,106,0.584,112,0.83,123,0.81,151,2.087,155,0.784,156,0.806,157,1.452,158,2.815,159,0.683,160,1.688,162,0.874,163,4.745,164,4.203,165,1.989,166,3.772,167,2.996,168,2.439,170,2.538,171,1.87,233,2.486,265,1.794,302,1,325,3.435,338,2.123,354,3.506,364,1.767,365,3.632,369,2.845,386,0.908,408,3.072,443,1.313,447,2.858,456,2.263,457,1.734,458,2.49,459,1.313,496,3.846,510,3.602,536,3.307,540,2.229,541,1.909,572,1.869,573,2.123,574,1.946,575,2.45,577,3.153,578,3.54,579,3.481,592,3.614,595,2.659,598,2.03,601,1.378,602,4.637,616,2.349,618,2.349,619,1.155,657,1.949,659,1.949,660,4.512,661,6.09,662,2.87,663,2.215,664,2.215,665,2.87,666,3.583,667,2.215,668,3.153,669,2.215,670,3.103,671,2.215,672,3.153,673,2.215,674,2.215,675,2.215,676,2.215,677,1.452,678,1.774,679,1.644,680,2.215,681,2.215,682,2.215,683,2.215,684,2.215,685,2.215,686,3.583,687,2.215,688,4.562,689,2.215,690,1.539,691,4.643,692,1.949,693,3.614,694,2.215,695,3.583,696,4.878,697,4.562,698,2.215,699,3.583,700,5.183,701,3.583,702,2.215,703,2.215,704,2.215,705,2.215,706,3.583,707,2.215,708,2.215,709,2.215]],["title/interfaces/Config.html",[61,1.835,384,2.571]],["body/interfaces/Config.html",[3,0.133,4,0.121,5,0.085,8,0.41,9,1.426,33,1.463,36,0.01,38,0.76,55,2.634,61,2.094,64,0.133,71,1.177,83,0.007,84,0.007,93,1.154,148,3.847,230,3.078,244,3.964,260,4.029,267,5.211,384,4.538,390,5.346,490,3.517,580,4.538,710,3.964,711,6.995,712,6.655,713,5.188,714,5.188,715,5.188,716,3.378,717,5.188,718,4.355,719,4.355,720,4.355,721,4.355,722,4.355,723,4.355,724,4.355,725,4.355,726,4.355,727,4.355,728,4.355,729,4.355,730,4.355,731,4.355,732,5.7,733,4.355]],["title/entities/Course.html",[85,1.725,734,1.895]],["body/entities/Course.html",[3,0.084,4,0.076,5,0.053,8,0.257,9,1.025,18,0.776,19,0.83,33,1.583,36,0.01,38,0.771,40,1.726,51,2.963,52,2.885,57,0.258,64,0.084,65,0.205,82,1.499,83,0.005,84,0.005,85,1.232,87,1.616,89,1.821,92,2.759,93,1.078,94,2.265,95,3.169,97,4.532,99,3.455,105,2.253,106,0.817,107,2.759,108,3.479,109,3.455,110,3.235,111,2.759,112,1.161,113,3.395,114,2.298,115,3.378,120,1.755,121,2.613,122,4.541,123,1.507,129,3.887,130,3.968,131,3.887,239,1.096,364,2.043,442,2.298,490,2.528,494,3.455,536,3.135,541,2.366,544,2.298,547,2.152,549,4.615,554,3.729,557,2.152,562,3.235,563,2.872,564,2.889,565,1.927,569,3.517,734,2.034,735,2.726,736,4.923,737,4.481,738,4.923,739,5.014,740,4.15,741,4.15,742,3.887,743,4.15,744,4.372,745,3.169,746,2.481,747,4.656,748,3.098,749,3.098,750,3.098,751,3.052,752,3.098,753,3.098,754,3.098,755,3.098,756,3.098,757,4.656,758,3.098,759,3.098,760,3.098,761,3.098,762,3.098,763,4.656,764,3.098,765,4.656,766,4.656,767,4.656,768,3.098,769,3.098,770,4.481,771,2.726,772,4.097,773,4.097,774,4.097,775,3.098,776,3.098,777,3.098,778,3.098,779,3.098,780,2.726,781,3.098,782,3.098,783,2.726,784,2.481,785,3.729,786,3.098,787,3.098]],["title/controllers/CoursesController.html",[144,1.452,788,3.219]],["body/controllers/CoursesController.html",[3,0.075,4,0.068,5,0.048,8,0.23,13,1.046,19,0.694,31,1.104,33,1.79,35,1.664,36,0.01,37,1.436,38,0.751,39,1.285,40,2.071,44,1.664,51,2.487,52,1.072,53,1.213,55,2.55,56,2.747,57,0.262,58,0.366,59,1.139,60,1.175,64,0.075,65,0.102,70,1.449,73,1.395,83,0.005,84,0.005,89,1.395,93,1.03,94,1.954,106,0.732,123,0.968,144,0.929,146,0.955,148,1.344,153,1.394,154,0.661,162,0.678,165,1.752,170,1.395,174,1.041,229,3.067,248,3.1,255,3.952,257,4.494,265,2.08,297,2.427,298,2.963,299,1.573,302,1.254,304,1.394,323,1.344,346,1.041,350,3.537,364,1.435,490,2.326,523,2.326,541,2.84,572,2.728,573,2.539,574,2.326,575,2.84,579,3.923,580,3.484,581,4.086,583,3.432,584,3.193,585,2.952,586,3.657,591,3.978,598,1.573,609,1.728,610,1.573,611,3.635,612,3.635,614,2.809,619,1.449,620,3.881,621,1.93,622,3.978,623,4.086,624,3.635,625,1.821,626,3.254,629,3.765,630,3.765,631,4.665,633,2.977,634,2.977,636,1.935,646,1.821,647,1.821,662,3.432,734,1.213,744,4.401,788,3.179,789,2.444,790,2.061,791,3.771,792,2.777,793,2.777,794,2.777,795,4.285,796,2.777,797,2.444,798,4.352,799,2.444,800,2.777,801,2.777,802,2.444,803,2.777,804,2.225,805,3.179,806,3.179,807,2.777,808,2.444,809,4.285,810,2.777,811,2.777,812,2.444,813,3.771,814,2.777,815,2.777,816,2.777,817,2.777,818,5.151,819,2.777,820,2.777,821,2.777,822,2.061,823,2.061,824,3.881,825,3.429,826,2.444,827,3.432,828,2.777,829,2.777,830,4.71,831,2.777,832,2.777,833,2.977,834,2.977,835,2.977,836,2.809,837,2.977,838,2.977,839,2.977,840,2.061,841,2.061,842,2.061,843,2.061,844,2.777,845,2.777,846,2.777,847,2.777,848,2.777,849,2.777,850,2.777,851,2.777,852,2.777,853,2.777,854,2.777,855,2.777,856,2.777]],["title/modules/CoursesModule.html",[152,1.115,189,3.015]],["body/modules/CoursesModule.html",[3,0.147,4,0.134,5,0.094,33,1.235,36,0.01,57,0.294,58,0.72,64,0.147,65,0.2,83,0.008,84,0.008,146,2.374,152,1.944,176,3.305,179,2.24,180,2.387,181,2.553,182,2.553,183,2.387,184,3.535,189,6.03,198,5.488,199,3.224,200,2.467,201,2.467,203,3.224,385,3.095,386,2.24,536,2.83,734,2.387,788,5.614,825,5.796,826,4.808,857,4.808,858,4.808,859,4.808,860,5.464,861,5.464,862,5.464,863,4.808,864,4.054,865,5.464]],["title/injectables/CoursesService.html",[0,0.776,825,2.845]],["body/injectables/CoursesService.html",[0,0.573,2,0.724,3,0.052,4,0.047,5,0.033,8,0.16,10,1.858,13,0.782,18,0.802,19,0.65,33,1.366,35,1.561,36,0.01,37,1.205,38,0.585,39,1.205,44,1.504,51,1.736,57,0.25,58,0.254,64,0.052,65,0.071,71,1.931,83,0.004,84,0.004,89,2.059,93,1.026,106,0.509,112,0.724,121,1.497,123,1.568,151,1.968,155,0.684,156,0.703,158,2.592,159,0.596,160,1.554,162,1.165,165,1.967,166,3.77,167,3.231,168,0.684,170,2.536,171,1.806,229,2.49,233,3.337,246,1.267,265,1.632,302,0.872,323,0.935,325,3.415,338,1.898,350,3.16,354,3.528,364,1.651,365,2.762,369,2.824,386,0.792,408,3.582,443,1.145,447,3.035,456,2.403,457,2.373,458,5.106,459,3.582,495,2.69,536,1.957,541,2.414,572,1.671,573,1.898,574,1.739,575,2.874,579,3.099,585,2.865,592,2.566,598,1.815,601,1.202,610,1.094,619,1.008,662,2.566,665,3.287,668,2.819,670,2.925,672,2.819,677,1.267,678,1.547,690,1.342,691,2.1,696,1.547,697,1.7,734,3.613,736,5.319,740,2.377,741,2.377,743,1.433,744,4.302,745,1.815,790,5.954,791,2.819,797,1.7,798,3.76,808,2.819,812,2.819,818,4.395,825,2.1,827,2.566,863,1.7,864,1.433,866,1.7,867,4.774,868,1.932,869,3.582,870,4.103,871,2.704,872,1.932,873,2.566,874,1.932,875,3.203,876,1.932,877,1.932,878,1.932,879,1.547,880,1.932,881,1.932,882,1.932,883,1.932,884,1.433,885,1.932,886,1.342,887,1.547,888,1.932,889,1.932,890,1.932,891,5.293,892,1.932,893,5.707,894,3.203,895,4.201,896,4.103,897,1.932,898,1.932,899,1.932,900,1.932,901,1.932,902,1.932,903,1.932,904,1.932,905,1.932,906,1.932,907,1.932,908,2.851,909,4.571,910,3.611,911,3.824,912,3.611,913,1.932,914,3.203,915,4.774,916,3.203,917,3.203,918,1.932,919,3.203,920,1.932,921,2.377,922,1.932,923,1.932,924,1.433,925,1.932,926,1.932]],["title/classes/CreateAuthDto.html",[65,0.159,272,2.571]],["body/classes/CreateAuthDto.html",[3,0.126,4,0.114,5,0.08,8,0.386,9,1.371,19,0.617,36,0.01,38,0.555,55,2.142,57,0.258,64,0.168,65,0.285,83,0.007,84,0.007,93,1.078,94,1.684,154,1.109,155,1.65,156,1.697,159,1.438,160,1.518,171,1.859,239,1.65,261,1.261,272,3.69,276,3.69,278,4.026,287,3.69,293,3.69,364,1.519,415,2.341,418,2.532,429,3.902,441,3.057,563,3.357,564,3.188,927,4.871,928,3.24,929,4.987,930,4.62,931,4.663,932,3.873,933,4.62,934,4.663,935,3.577,936,4.326,937,4.11,938,4.62,939,3.621,940,5.201,941,3.46,942,3.46,943,3.46,944,2.641,945,3.46,946,3.46,947,3.46]],["title/classes/CreateCategoryDto.html",[65,0.159,578,2.699]],["body/classes/CreateCategoryDto.html",[3,0.126,4,0.114,5,0.081,8,0.387,9,1.373,19,0.696,36,0.01,37,1.504,38,0.696,39,1.145,40,2.682,57,0.259,64,0.168,65,0.257,82,3.396,83,0.007,84,0.007,93,1.057,94,1.898,154,1.111,155,1.653,156,1.701,159,1.441,160,1.521,171,1.86,239,1.653,240,4.087,261,1.264,536,3.412,540,4.657,563,2.877,564,2.977,578,3.878,636,3.168,670,2.261,935,3.27,937,4.112,939,3.168,948,5.997,949,3.063,950,4.6,951,6.234,952,4.994,953,4.672,954,3.532,955,5.486,956,3.385,957,3.742,958,4.111,959,4.672,960,4.672,961,3.385,962,5.486,963,5.486,964,2.647,965,5.486]],["title/classes/CreateCourseDto.html",[65,0.159,798,2.699]],["body/classes/CreateCourseDto.html",[3,0.099,4,0.09,5,0.063,8,0.305,9,1.163,19,0.778,36,0.01,37,1.24,38,0.752,40,2.672,51,2.234,57,0.233,64,0.142,65,0.226,82,3.799,83,0.006,84,0.006,89,1.719,93,1.136,94,2.123,121,2.887,154,0.875,155,1.301,156,1.339,159,1.134,160,1.197,169,3.285,171,1.853,239,1.301,261,0.995,364,1.648,536,2.769,563,3.053,564,3.05,636,1.66,670,1.78,734,3.492,737,5.73,740,4.585,741,4.585,743,5.308,745,2.992,785,4.23,798,3.285,830,5.41,935,3.492,937,4.073,939,3.544,950,5.146,954,2.992,956,2.868,957,2.945,958,3.236,961,3.668,964,2.083,966,6.403,967,2.728,968,5.438,969,7.154,970,3.677,971,3.677,972,3.677,973,5.281,974,3.677,975,3.677,976,3.677,977,4.23,978,3.677,979,3.677,980,3.236,981,3.236,982,3.236,983,3.236,984,3.236,985,4.648,986,3.236,987,3.236]],["title/classes/CreateLessonDto.html",[65,0.159,988,2.699]],["body/classes/CreateLessonDto.html",[3,0.112,4,0.102,5,0.114,8,0.343,9,1.265,19,0.787,33,0.936,36,0.01,38,0.775,39,1.528,40,2.535,51,2.79,52,2.217,57,0.228,64,0.155,65,0.241,83,0.006,84,0.006,93,1.116,94,2.147,113,3.328,115,2.25,121,3.708,154,0.986,171,0.961,239,1.466,261,1.121,364,1.402,563,2.356,564,2.622,584,3.12,591,3.405,636,2.594,670,2.005,745,4.385,935,3.535,939,3.378,950,4.905,954,4.035,956,3.867,961,4.203,964,3.255,988,3.574,989,6.482,990,3.074,991,5.705,992,5.283,993,5.804,994,4.602,995,5.746,996,4.143,997,4.143,998,4.143,999,4.143,1000,4.143,1001,4.143,1002,4.143,1003,4.143,1004,5.056,1005,5.056,1006,4.143,1007,4.143,1008,5.551,1009,4.143,1010,4.143,1011,4.143,1012,3.646,1013,3.646,1014,3.074,1015,3.319,1016,3.646,1017,3.646,1018,2.879]],["title/classes/CreateQuizDto.html",[65,0.159,1019,2.845]],["body/classes/CreateQuizDto.html",[3,0.13,4,0.118,5,0.083,8,0.398,9,1.398,19,0.705,36,0.01,38,0.736,39,1.166,40,2.66,51,2.031,56,2.966,57,0.219,64,0.13,65,0.176,82,2.324,83,0.007,84,0.007,91,3.763,92,4.962,93,1.086,94,1.924,116,4.412,119,3.78,121,3.853,123,1.085,125,4.943,133,5.616,135,3.949,137,4.412,139,3.337,141,3.563,143,3.563,154,1.142,261,1.299,364,1.736,580,2.846,784,3.846,935,3.306,939,3.212,950,4.663,1015,5.086,1019,4.163,1020,6.66,1021,3.846,1022,4.802,1023,4.802,1024,4.802,1025,3.846,1026,4.802,1027,6.926,1028,4.802,1029,4.802]],["title/classes/CreateUserCategoryDto.html",[65,0.159,1030,2.845]],["body/classes/CreateUserCategoryDto.html",[3,0.154,4,0.14,5,0.098,8,0.472,9,1.56,19,0.565,33,1.601,36,0.01,38,0.508,57,0.279,64,0.154,65,0.259,82,2.756,83,0.008,84,0.008,93,0.933,94,1.541,123,1.601,154,1.355,155,2.015,156,2.073,159,1.757,160,1.854,171,1.87,239,2.015,261,1.541,563,3.161,564,2.817,935,3.094,937,4.05,949,3.734,952,5.674,1030,4.644,1031,4.406,1032,6.234,1033,6.785,1034,5.695,1035,5.695,1036,7.084,1037,5.695,1038,7.71]],["title/classes/CreateUserDto.html",[65,0.159,1039,2.458]],["body/classes/CreateUserDto.html",[3,0.091,4,0.082,5,0.058,8,0.278,9,1.089,19,0.715,22,3.116,31,2.334,33,1.796,36,0.01,37,1.267,38,0.666,40,2.582,52,1.297,53,1.468,55,1.702,57,0.249,59,1.378,60,1.422,64,0.158,65,0.237,82,3.133,83,0.005,84,0.005,93,1.085,94,1.952,123,1.463,154,0.799,155,1.189,156,1.223,159,1.037,160,1.094,171,1.965,239,1.189,261,0.909,278,3.34,364,1.207,403,3.437,415,3.464,418,3.747,429,3.599,461,3.437,462,3.437,464,3.437,483,3.437,491,2.931,563,2.959,564,2.967,636,2.233,932,3.077,935,3.472,937,4.17,939,3.529,950,4.732,952,4.702,954,1.904,956,1.825,961,2.686,964,1.904,1018,3.437,1039,2.802,1040,5.537,1041,2.335,1042,3.36,1043,3.962,1044,3.962,1045,3.36,1046,3.962,1047,4.353,1048,3.36,1049,3.36,1050,3.962,1051,3.36,1052,3.36,1053,3.36,1054,3.36,1055,3.962,1056,3.36,1057,3.36,1058,3.36,1059,3.36,1060,3.962,1061,3.36,1062,2.692,1063,2.493,1064,2.692,1065,2.692,1066,1.626,1067,2.335,1068,2.335,1069,3.962,1070,2.692,1071,2.692,1072,2.692,1073,2.692,1074,2.692,1075,2.692,1076,2.692,1077,2.692,1078,2.692,1079,2.493,1080,2.692,1081,2.692,1082,2.692,1083,1.991,1084,1.422,1085,2.493,1086,2.09,1087,2.493,1088,2.692,1089,2.692,1090,2.692,1091,3.67,1092,2.692,1093,2.493,1094,2.692,1095,3.67,1096,2.692,1097,2.203]],["title/classes/CustomExceptionFilter.html",[65,0.159,1098,2.699]],["body/classes/CustomExceptionFilter.html",[0,1.037,3,0.113,4,0.103,5,0.072,8,0.348,10,1.368,13,1.416,15,2.109,18,1.052,19,0.575,24,4.059,35,1.38,36,0.01,37,1.065,38,0.517,39,1.065,44,0.999,45,2.191,55,1.995,57,0.26,58,0.553,64,0.193,65,0.262,71,1.931,73,1.368,83,0.006,84,0.006,93,0.944,123,0.949,151,2.531,154,0.999,162,1.416,165,1.052,167,2.811,168,2.351,170,2.333,171,1.54,174,1.574,226,2.619,233,2.534,261,1.136,343,2.191,344,3.395,345,3.235,346,1.574,364,1.025,365,2.807,456,2.849,457,1.941,541,2.454,569,2.912,716,3.466,1066,2.033,1084,1.777,1098,3.608,1099,2.919,1100,4.133,1101,3.697,1102,4.201,1103,3.608,1104,4.457,1105,4.201,1106,3.803,1107,3.803,1108,2.49,1109,2.49,1110,4.031,1111,4.133,1112,3.117,1113,2.754,1114,3.117,1115,3.117,1116,3.286,1117,4.031,1118,2.754,1119,3.803,1120,3.117,1121,2.919,1122,3.117,1123,3.117,1124,2.919,1125,3.117,1126,2.754,1127,3.117,1128,3.117,1129,3.117,1130,3.117,1131,3.117,1132,3.117,1133,3.117,1134,3.117,1135,3.117,1136,2.49,1137,2.613,1138,2.613,1139,3.117,1140,2.613,1141,2.754,1142,2.919,1143,3.117,1144,2.919,1145,3.117,1146,3.117,1147,2.613,1148,3.117,1149,3.117]],["title/classes/CustomResponseInterceptor.html",[65,0.159,1150,3.475]],["body/classes/CustomResponseInterceptor.html",[3,0.129,4,0.117,5,0.082,8,0.396,13,1.545,19,0.474,35,1.138,36,0.01,37,0.878,38,0.427,39,0.878,44,1.138,57,0.261,58,0.834,64,0.129,65,0.175,71,1.87,72,3.831,73,1.557,83,0.007,84,0.007,123,1.081,165,1.586,167,2.679,168,2.915,170,2.062,171,1.468,226,2.859,261,1.294,335,6.053,337,5.072,338,3.753,344,2.16,345,2.16,347,6.247,348,3.831,356,4.209,357,4.209,365,2.315,457,2.63,510,3.323,516,5.573,523,3.855,569,3.179,613,4.699,1110,4.4,1116,3.587,1118,4.152,1140,2.975,1147,2.975,1150,5.072,1151,4.209,1152,7.099,1153,7.099,1154,4.783,1155,7.557,1156,4.783,1157,6.332,1158,4.783,1159,4.783,1160,4.783,1161,4.783,1162,4.783,1163,4.783,1164,6.332,1165,6.332,1166,4.783,1167,4.209,1168,4.783,1169,4.783,1170,4.783,1171,4.783,1172,4.783,1173,4.783]],["title/modules/DbModule.html",[152,1.115,1174,3.015]],["body/modules/DbModule.html",[3,0.128,4,0.117,5,0.082,10,2.056,13,1.163,19,0.472,36,0.01,38,0.563,44,1.133,57,0.271,58,0.627,64,0.128,65,0.174,71,1.685,83,0.007,84,0.007,87,3.295,106,1.256,123,1.076,152,1.623,162,1.163,171,1.464,174,1.785,179,1.953,203,3.31,278,3.057,325,2.672,354,2.226,384,4.199,385,2.699,386,1.953,429,3.295,447,2.392,456,1.894,457,2.371,459,2.823,585,2.392,712,5.059,716,3.295,1108,3.743,1174,4.389,1175,4.764,1176,7.085,1177,4.764,1178,7.085,1179,7.444,1180,3.816,1181,3.535,1182,4.764,1183,4.764,1184,4.764,1185,4.764,1186,4.764,1187,4.764,1188,4.764,1189,6.316,1190,5.558,1191,5.558,1192,6.316,1193,6.316,1194,6.316,1195,6.316,1196,7.085,1197,6.316,1198,5.558,1199,6.316,1200,6.316,1201,6.316,1202,4.764,1203,6.316,1204,4.764,1205,5.558,1206,4.764,1207,4.764,1208,4.764,1209,4.764]],["title/modules/DefaultModule.html",[152,1.115,177,2.699]],["body/modules/DefaultModule.html",[0,1.172,3,0.136,4,0.124,5,0.087,10,2.134,18,1.262,36,0.01,57,0.276,58,0.664,64,0.177,65,0.267,71,1.199,83,0.007,84,0.007,106,1.329,123,1.139,144,2.194,145,5.062,146,2.255,147,3.741,149,5.251,151,2.754,152,1.871,153,2.531,154,1.199,155,1.784,156,1.835,157,3.306,158,3.955,159,1.555,160,1.642,161,5.547,162,1.778,163,4.317,164,3.306,165,1.641,166,2.44,167,2.133,168,1.784,169,3.136,170,1.642,171,1.52,172,5.251,173,4.039,174,1.889,175,4.039,176,3.182,177,5.262,179,2.067,180,2.203,181,2.356,182,2.356,183,2.203,184,2.356,199,3.063,200,2.277,201,2.277,1210,4.437,1211,4.437]],["title/injectables/DefaultService.html",[0,0.776,161,2.845]],["body/injectables/DefaultService.html",[0,1.182,2,1.913,3,0.138,4,0.125,5,0.088,8,0.423,10,2.152,13,1.613,18,1.655,19,0.655,35,1.214,36,0.01,37,0.938,38,0.455,39,0.938,44,1.214,57,0.277,58,0.672,64,0.178,65,0.268,71,1.214,83,0.007,84,0.007,106,1.346,123,1.154,144,2.212,145,4.593,146,1.756,147,3.789,149,6.43,151,2.725,152,1.698,153,2.563,154,1.214,155,1.806,156,1.859,157,3.348,158,4.545,159,1.575,160,1.662,161,5.263,162,1.788,163,4.343,164,3.348,165,1.655,166,2.471,167,2.16,168,1.806,169,3.176,170,1.662,171,1.532,172,5.294,173,4.09,174,1.913,175,4.09,176,2.231,177,3.176,1101,4.493,1212,5.106,1213,5.106]],["title/entities/Enroll.html",[85,1.725,739,2.845]],["body/entities/Enroll.html",[3,0.119,4,0.108,5,0.076,8,0.366,9,1.324,19,0.801,33,1.825,36,0.01,38,0.77,51,2.542,52,2.954,57,0.273,64,0.119,65,0.22,83,0.007,84,0.007,85,1.759,87,2.308,89,2.222,93,0.792,94,2.185,95,3.867,97,4.537,105,2.909,106,1.166,108,4.245,112,1.658,120,2.506,122,3.405,123,1.654,130,4.474,442,3.283,494,4.459,538,5.064,539,5.064,541,2.887,542,5.064,565,2.752,569,3.965,734,3.681,739,3.94,751,4.475,1214,3.893,1215,6.006,1216,5.289,1217,5.289,1218,4.424,1219,7.322,1220,4.424,1221,4.424,1222,4.424,1223,4.424,1224,4.424,1225,4.424,1226,4.424,1227,4.424,1228,4.424,1229,3.893,1230,3.893,1231,3.544,1232,4.424,1233,3.893,1234,3.893]],["title/controllers/EnrollsController.html",[144,1.452,1235,3.219]],["body/controllers/EnrollsController.html",[3,0.112,4,0.101,5,0.071,8,0.343,13,1.4,19,0.741,31,1.645,33,1.941,35,1.778,36,0.01,37,1.373,38,0.667,39,1.373,44,1.778,57,0.267,58,0.545,59,1.696,60,1.75,64,0.112,65,0.151,70,2.158,83,0.006,84,0.006,93,1.082,94,2.093,144,1.384,146,1.423,148,2.002,153,2.077,154,0.984,162,1.009,165,1.872,174,1.55,297,2.343,299,2.343,304,2.077,323,2.002,350,4.056,581,4.579,609,2.573,622,4.585,629,4.431,630,4.431,631,3.988,822,3.069,1235,4.258,1236,3.64,1237,3.64,1238,5.739,1239,5.739,1240,5.739,1241,5.739,1242,5.05,1243,4.136,1244,5.707,1245,4.136,1246,4.136,1247,4.136,1248,5.739,1249,4.136,1250,4.136,1251,4.136,1252,4.136,1253,4.136,1254,4.136,1255,4.136,1256,4.136,1257,4.136,1258,4.136,1259,4.136,1260,4.32,1261,3.64,1262,4.136,1263,4.136,1264,7.117,1265,4.136,1266,4.136,1267,4.136,1268,4.136,1269,4.136,1270,4.136,1271,4.136,1272,4.136,1273,4.136,1274,5.799,1275,4.136,1276,4.136,1277,4.136,1278,4.136,1279,4.136,1280,4.136,1281,4.136]],["title/modules/EnrollsModule.html",[152,1.115,190,3.015]],["body/modules/EnrollsModule.html",[3,0.15,4,0.137,5,0.096,33,1.58,36,0.01,57,0.295,58,0.735,64,0.15,65,0.204,83,0.008,84,0.008,146,2.405,152,1.962,176,3.336,179,2.286,180,2.436,181,2.606,182,2.606,183,2.436,184,3.568,190,5.933,199,3.266,200,2.518,201,2.518,203,2.606,385,3.159,386,2.286,387,3.875,734,3.054,739,3.656,1235,5.667,1260,5.812,1261,4.908,1282,4.908,1283,4.908,1284,4.908,1285,5.577,1286,5.577,1287,4.908,1288,4.138,1289,5.577]],["title/injectables/EnrollsService.html",[0,0.776,1260,2.845]],["body/injectables/EnrollsService.html",[0,0.744,2,1.002,3,0.072,4,0.065,5,0.046,8,0.221,9,0.916,10,2.032,18,1.041,19,0.655,33,1.656,35,0.636,36,0.01,37,0.491,38,0.238,39,0.491,52,2.408,53,2.727,57,0.259,58,0.352,64,0.072,65,0.098,71,1.956,83,0.005,84,0.005,89,2.587,93,0.672,106,0.705,112,1.002,151,2.246,155,0.946,156,0.973,158,3.128,159,0.825,160,1.876,162,1.015,165,1.99,166,3.846,170,2.587,171,1.919,233,2.517,323,1.294,325,2.64,350,3.088,354,3.712,365,3.626,386,1.096,387,1.857,408,4.44,412,3.788,443,1.584,446,1.983,447,3.133,456,2.482,457,2.507,459,3.699,468,4.631,494,3.788,495,1.753,541,1.759,585,3.133,734,3.431,739,5.003,873,4.09,887,2.141,908,2.89,911,2.141,921,1.983,1215,6.071,1237,6.278,1242,4.493,1244,4.957,1260,2.727,1287,2.352,1288,1.983,1290,2.352,1291,5.105,1292,5.105,1293,5.105,1294,5.105,1295,2.673,1296,2.673,1297,4.159,1298,2.673,1299,2.673,1300,2.673,1301,2.673,1302,2.673,1303,2.673,1304,5.761,1305,4.159,1306,4.159,1307,2.673,1308,5.761,1309,2.673,1310,2.673,1311,2.673,1312,2.673,1313,5.105,1314,5.105,1315,4.159,1316,2.673,1317,2.352,1318,4.159,1319,2.673,1320,2.673,1321,4.159,1322,2.141,1323,2.673,1324,2.673]],["title/injectables/FileRequestFilter.html",[0,0.776,1325,3.475]],["body/injectables/FileRequestFilter.html",[0,1.256,2,2.104,3,0.151,4,0.138,5,0.132,8,0.465,10,1.828,13,1.714,18,1.406,19,0.696,35,1.67,36,0.01,37,1.289,38,0.626,39,1.289,44,1.336,53,3.068,57,0.194,58,0.74,64,0.151,65,0.206,71,1.336,83,0.008,84,0.008,93,1.009,162,1.37,165,1.406,226,2.536,298,3.181,1108,3.328,1231,6.137,1325,5.625,1326,6.742,1327,4.167,1328,7.022,1329,5.616,1330,5.616,1331,7.022,1332,7.022,1333,8.027,1334,5.616,1335,7.022,1336,5.616,1337,5.616,1338,5.616,1339,5.616,1340,7.022,1341,5.616]],["title/classes/FilesDTO.html",[65,0.159,670,2.1]],["body/classes/FilesDTO.html",[3,0.136,4,0.123,5,0.113,8,0.417,9,1.442,19,0.649,33,1.137,36,0.01,38,0.731,40,2.378,51,2.769,52,1.942,57,0.251,64,0.177,65,0.266,83,0.007,84,0.007,93,1.079,113,3.059,115,2.732,121,3.4,154,1.197,171,1.166,239,1.78,261,1.361,364,1.228,563,2.684,564,2.893,584,2.732,591,2.982,636,3.48,670,3.168,745,4.527,935,3.694,939,3.608,954,3.709,956,3.555,961,4.448,964,3.709,988,3.13,989,5.829,990,3.733,991,6.173,992,4.03,993,4.428,994,4.03,1004,4.428,1005,4.428,1008,5.4,1012,4.428,1013,4.428,1014,3.733,1015,4.03,1016,4.428,1017,4.428,1018,3.496,1342,5.032,1343,5.032]],["title/classes/FilesDto.html",[65,0.159,670,2.1]],["body/classes/FilesDto.html",[3,0.14,4,0.127,5,0.09,8,0.43,9,1.472,19,0.515,36,0.01,37,1.357,38,0.596,40,2.548,57,0.269,64,0.18,65,0.27,83,0.007,84,0.007,93,0.973,154,1.235,155,1.837,156,1.891,159,1.602,160,1.691,171,1.915,239,1.837,240,3.405,261,1.405,536,3.309,540,4.852,563,3.029,564,3.102,578,3.231,636,3.336,670,3.234,935,3.408,937,4.219,939,3.336,948,5.353,949,3.405,954,2.942,955,4.571,956,2.82,961,3.629,962,5.881,963,5.881,964,2.942,965,5.881,1344,5.194]],["title/classes/FilesDto-1.html",[56,1.691,65,0.132,670,1.751]],["body/classes/FilesDto-1.html",[3,0.123,4,0.111,5,0.078,8,0.377,9,1.349,19,0.451,36,0.01,37,1.125,38,0.661,40,2.585,51,2.591,57,0.256,64,0.165,65,0.253,83,0.007,84,0.007,89,1.481,93,1.104,121,2.125,154,1.082,155,1.609,156,1.656,159,1.403,160,1.481,169,2.829,171,1.943,239,1.609,261,1.231,364,1.494,536,2.511,563,3.264,564,3.235,636,2.765,670,2.964,734,3.554,737,4.905,740,3.375,741,3.375,743,4.544,745,2.577,785,3.644,798,2.829,830,5.932,935,3.661,937,4.252,939,3.735,954,2.577,956,2.47,961,4.021,964,2.577,966,4.905,967,3.375,968,4.003,977,3.644,980,4.003,981,4.003,982,4.003,983,4.003,984,4.003,985,5.389,986,4.003,987,4.003,1345,4.549]],["title/classes/ForgetPasswordDto.html",[65,0.159,276,2.571]],["body/classes/ForgetPasswordDto.html",[3,0.129,4,0.117,5,0.082,8,0.396,9,1.395,19,0.474,36,0.01,38,0.427,55,2.442,57,0.261,64,0.171,65,0.288,83,0.007,84,0.007,93,1.064,94,1.294,154,1.138,155,1.692,156,1.741,159,1.475,160,1.557,171,1.873,239,1.692,261,1.294,272,2.834,276,4.207,278,3.804,287,3.753,293,3.753,364,1.545,415,3.179,418,3.438,429,3.942,441,3.136,563,3.378,564,3.212,927,4.4,928,3.323,929,3.831,930,3.549,932,2.975,933,3.549,935,3.599,936,4.4,937,4.136,938,4.699,939,3.647,940,5.267,941,3.549,942,3.549,943,3.549,944,2.709,945,3.549,946,3.549,947,3.549,1346,4.783]],["title/injectables/GoogleStrategy.html",[0,0.776,377,3.015]],["body/injectables/GoogleStrategy.html",[0,1.195,2,1.946,3,0.14,4,0.127,5,0.09,8,0.43,13,1.631,18,1.85,19,0.662,33,1.51,35,1.235,36,0.01,37,1.227,38,0.463,39,0.954,44,1.235,57,0.269,58,0.684,64,0.14,65,0.19,71,1.589,83,0.007,84,0.007,93,1.088,210,3.854,267,4.844,305,3.854,325,3.125,377,4.643,381,4.16,384,3.078,415,3.355,713,4.16,714,4.16,715,4.16,1084,2.827,1086,5.02,1087,3.854,1107,3.405,1347,4.571,1348,5.881,1349,6.502,1350,5.194,1351,5.194,1352,7.388,1353,7.388,1354,7.8,1355,5.194,1356,6.682,1357,4.571,1358,4.16,1359,4.571,1360,4.571,1361,5.194,1362,5.194,1363,5.194,1364,5.194,1365,5.194,1366,5.194,1367,5.194,1368,5.194,1369,5.194,1370,5.194,1371,5.194,1372,5.194]],["title/classes/HttpExceptionFilter.html",[65,0.159,1373,3.219]],["body/classes/HttpExceptionFilter.html",[3,0.096,4,0.087,5,0.062,8,0.296,9,1.138,10,2.4,13,1.261,15,2.595,18,0.894,19,0.701,35,1.584,36,0.01,37,1.223,38,0.631,39,1.223,44,1.445,45,2.696,52,1.377,53,1.559,57,0.255,58,0.47,61,1.51,64,0.096,65,0.189,71,1.887,73,1.683,83,0.006,84,0.006,160,1.162,165,1.668,168,2.15,170,2.169,171,0.827,226,2.334,239,1.263,261,0.965,331,5.888,343,1.861,345,2.334,346,1.337,362,2.115,369,1.667,456,2.416,457,1.729,523,1.938,584,1.938,716,3.17,833,2.48,834,2.48,835,2.48,836,2.34,837,2.48,838,2.48,839,2.48,944,2.928,1100,3.78,1103,3.215,1104,4.143,1106,2.34,1109,2.115,1136,2.115,1137,2.22,1138,2.22,1140,2.22,1141,2.34,1327,2.648,1373,3.835,1374,5.904,1375,5.168,1376,3.984,1377,3.14,1378,3.569,1379,3.569,1380,4.548,1381,5.599,1382,3.569,1383,5.347,1384,4.943,1385,3.569,1386,2.48,1387,4.222,1388,3.569,1389,3.984,1390,3.591,1391,3.601,1392,2.858,1393,2.648,1394,2.648,1395,3.14,1396,3.14,1397,2.48,1398,3.14,1399,3.14,1400,3.14,1401,3.14,1402,3.14,1403,3.14,1404,3.14,1405,4.222,1406,3.14,1407,3.14,1408,3.14,1409,3.14,1410,3.14,1411,3.14,1412,4.548,1413,3.14,1414,3.14,1415,3.14,1416,3.14,1417,3.14,1418,3.14,1419,3.14,1420,3.14,1421,3.14,1422,3.14,1423,3.14,1424,5.347,1425,3.14,1426,3.14,1427,2.648,1428,2.648,1429,2.648,1430,2.648,1431,5.347,1432,2.648,1433,2.648,1434,2.648,1435,3.14,1436,2.648,1437,3.14,1438,3.14,1439,3.14]],["title/modules/I18nConfigModule.html",[152,1.115,191,3.015]],["body/modules/I18nConfigModule.html",[3,0.154,4,0.14,5,0.098,36,0.01,57,0.279,58,0.75,64,0.154,65,0.208,73,2.306,83,0.008,84,0.008,123,1.287,135,3.543,152,1.82,159,1.757,160,2.306,163,4.198,179,2.335,191,4.922,203,2.661,395,4.226,519,3.957,1108,3.375,1116,4.368,1179,7.099,1180,4.562,1190,5.012,1198,5.012,1440,5.695,1441,5.695,1442,7.084,1443,7.084,1444,5.695,1445,7.084,1446,5.695,1447,5.695,1448,5.695,1449,5.695,1450,5.012,1451,5.012,1452,5.695,1453,5.695,1454,5.695,1455,5.695,1456,5.695,1457,4.562,1458,5.695,1459,5.695]],["title/classes/IRequest.html",[65,0.159,1119,2.845]],["body/classes/IRequest.html",[0,1.08,3,0.12,4,0.109,5,0.077,10,1.451,15,2.237,24,4.161,36,0.01,55,2.078,57,0.265,58,0.587,64,0.198,65,0.269,71,1.958,73,1.451,83,0.007,84,0.007,93,0.967,123,1.007,151,2.231,154,1.06,162,1.474,165,1.116,167,2.898,168,2.424,170,2.391,171,1.588,174,1.67,226,2.012,233,2.638,261,1.206,343,2.325,344,3.466,345,3.316,346,1.67,364,1.088,365,2.923,456,2.401,457,2.021,541,2.555,569,3.032,716,2.325,1066,2.157,1084,2.555,1098,2.772,1099,3.097,1100,3.757,1103,2.772,1104,3.757,1106,2.922,1107,3.96,1108,2.641,1109,2.641,1110,4.197,1111,4.261,1112,3.307,1113,2.922,1114,3.307,1115,3.307,1116,3.422,1117,4.197,1118,2.922,1119,4.492,1120,4.481,1121,3.097,1122,3.307,1123,3.307,1124,3.097,1125,3.307,1126,2.922,1127,3.307,1128,3.307,1129,3.307,1130,3.307,1131,3.307,1132,3.307,1133,3.307,1134,3.307,1135,3.307,1136,2.641,1137,2.772,1138,2.772,1139,3.307,1140,2.772,1141,2.922,1142,3.097,1143,3.307,1144,3.097,1145,3.307,1146,3.307,1147,2.772,1148,3.307,1149,3.307]],["title/classes/IResponseData.html",[65,0.159,1113,2.845]],["body/classes/IResponseData.html",[0,0.978,3,0.104,4,0.095,5,0.067,8,0.32,9,1.204,10,1.256,15,1.937,19,0.802,24,4.287,36,0.01,38,0.709,39,1.268,52,2.812,53,3.183,55,2.375,57,0.252,58,0.508,64,0.186,65,0.253,71,1.891,73,1.256,83,0.006,84,0.006,93,1.047,123,1.235,151,2.067,154,0.918,162,1.334,165,0.966,167,3.083,168,2.578,170,2.533,171,1.689,174,1.446,226,1.742,233,3.016,261,1.044,343,2.013,344,3.29,345,3.117,346,1.446,364,0.942,365,3.072,456,2.173,457,1.829,541,2.312,569,3.466,716,2.013,1066,1.868,1084,1.632,1098,2.4,1099,2.682,1100,3.4,1103,2.4,1104,3.4,1106,2.53,1107,3.584,1108,2.287,1109,2.287,1110,3.798,1111,3.948,1112,2.863,1113,3.584,1114,4.056,1115,4.056,1116,3.911,1117,4.797,1118,3.584,1119,3.584,1120,2.863,1121,2.682,1122,2.863,1123,2.863,1124,2.682,1125,2.863,1126,2.53,1127,2.863,1128,2.863,1129,2.863,1130,2.863,1131,2.863,1132,2.863,1133,2.863,1134,2.863,1135,2.863,1136,2.287,1137,2.4,1138,2.4,1139,2.863,1140,2.4,1141,2.53,1142,2.682,1143,2.863,1144,2.682,1145,2.863,1146,2.863,1147,2.4,1148,2.863,1149,2.863,1460,3.859,1461,3.859,1462,3.859,1463,3.859,1464,3.859,1465,3.859,1466,3.859,1467,3.859,1468,3.859]],["title/classes/ImagePicDto.html",[65,0.159,1097,2.845]],["body/classes/ImagePicDto.html",[3,0.107,4,0.097,5,0.068,8,0.329,9,1.227,19,0.393,22,2.517,31,2.216,33,1.839,36,0.01,37,1.023,38,0.497,40,2.51,55,1.365,57,0.264,59,1.626,60,1.678,64,0.174,65,0.256,83,0.006,84,0.006,93,1.054,123,1.259,154,0.944,155,1.403,156,1.444,159,1.224,160,1.291,171,1.966,239,1.403,261,1.073,278,2.697,364,0.968,403,3.873,415,2.798,418,3.026,429,2.907,461,2.756,462,2.756,464,2.756,483,2.756,491,4.142,563,3.13,564,3.118,636,2.909,932,2.467,935,3.602,937,4.286,939,3.674,954,2.247,956,2.154,961,3.026,964,2.247,1018,2.756,1039,2.247,1040,4.135,1041,2.756,1043,3.177,1044,3.177,1046,3.177,1050,3.177,1055,3.177,1060,3.177,1062,3.177,1063,2.943,1064,3.177,1065,3.177,1066,1.92,1067,2.756,1068,2.756,1069,4.464,1070,3.177,1071,3.177,1072,3.177,1073,3.177,1074,3.177,1075,3.177,1076,3.177,1077,3.177,1078,3.177,1079,2.943,1080,3.177,1081,3.177,1082,3.177,1083,2.351,1084,1.678,1085,2.943,1086,2.467,1087,2.943,1088,3.177,1089,3.177,1090,3.177,1091,4.135,1092,3.177,1093,2.943,1094,3.177,1095,4.135,1096,3.177,1097,3.654,1469,3.967]],["title/interfaces/IsAuthorizedParams.html",[47,3.219,61,1.835]],["body/interfaces/IsAuthorizedParams.html",[0,1.171,1,3.733,3,0.136,4,0.123,5,0.087,6,4.03,7,4.03,8,0.417,9,1.442,10,2.369,11,4.428,12,6.783,14,4.428,15,2.526,17,4.428,18,1.26,21,4.428,22,3.86,24,2.85,25,4.428,26,4.03,27,6.404,28,4.428,29,5.761,30,4.03,31,3.064,32,5.761,33,1.137,34,4.428,36,0.01,38,0.584,41,4.549,42,4.428,43,4.428,47,5.4,56,2.351,57,0.226,58,0.663,59,2.063,60,2.128,61,2.128,62,7.032,63,7.032,64,0.136,65,0.184,66,4.428,67,4.428,68,4.428,69,4.428,70,2.625,71,1.833,72,5.244,73,1.638,74,4.428,75,4.428,76,5.761,77,4.428,78,4.428,79,4.428,80,5.761,81,4.428,82,3.168,83,0.007,84,0.007,230,3.13]],["title/injectables/JwtStrategy.html",[0,0.776,378,3.015]],["body/injectables/JwtStrategy.html",[0,1.269,2,2.139,3,0.154,4,0.14,5,0.098,8,0.473,13,1.731,18,1.933,19,0.703,22,2.578,35,1.358,36,0.01,37,1.048,38,0.509,39,1.048,44,1.358,57,0.267,58,0.752,64,0.154,65,0.209,83,0.008,84,0.008,89,1.859,165,1.429,305,4.236,325,3.265,364,1.393,369,2.667,378,4.929,381,4.573,390,5.06,434,4.573,1084,3.001,1348,6.243,1349,6.243,1357,5.024,1358,4.573,1360,5.024,1470,5.024,1471,6.183,1472,5.709,1473,7.094,1474,5.709,1475,5.709,1476,5.709,1477,5.709,1478,5.709,1479,5.709,1480,5.709,1481,5.709]],["title/injectables/LanguageMiddleware.html",[0,0.776,211,3.219]],["body/injectables/LanguageMiddleware.html",[0,1.249,2,2.085,3,0.15,4,0.136,5,0.096,8,0.461,13,1.704,18,1.393,19,0.692,35,1.661,36,0.01,37,1.282,38,0.623,39,1.282,44,1.323,45,2.902,57,0.264,58,0.733,64,0.15,65,0.204,71,1.323,83,0.008,84,0.008,93,0.733,158,4.566,159,1.716,160,1.812,162,1.358,163,4.137,174,2.085,211,5.18,226,2.512,285,3.461,344,3.612,345,3.612,346,2.085,480,4.746,519,4.851,522,5.18,523,4.344,524,5.936,526,5.18,1482,4.897,1483,5.564,1484,5.564,1485,5.564,1486,5.564,1487,5.564]],["title/entities/Lesson.html",[85,1.725,113,2.027]],["body/entities/Lesson.html",[3,0.089,4,0.081,5,0.057,8,0.272,9,1.072,19,0.827,36,0.01,38,0.782,39,1.452,40,1.788,51,2.059,52,1.878,55,1.674,57,0.247,64,0.131,65,0.212,83,0.005,84,0.005,85,1.935,87,1.715,89,1.887,92,2.884,93,1.069,94,2.256,95,3.283,97,4.752,105,2.355,106,0.867,107,2.884,108,3.027,110,3.382,111,2.884,112,1.232,113,2.707,115,3.713,119,3.569,120,1.862,121,2.707,122,4.757,123,1.884,129,4.027,130,4.056,131,4.027,239,1.163,364,1.857,541,2.451,544,2.439,547,2.284,549,4.753,557,2.284,562,3.382,564,1.935,565,2.045,569,3.595,584,2.643,734,3.453,738,5.1,744,4.483,745,3.283,746,2.633,751,4.2,770,4.642,771,2.893,772,4.283,773,4.283,774,4.283,783,2.893,992,4.642,1008,5.074,1216,2.893,1217,4.283,1229,2.893,1233,2.893,1234,2.893,1488,2.633,1489,5.1,1490,5.1,1491,4.867,1492,3.287,1493,3.287,1494,3.287,1495,3.287,1496,3.287,1497,3.287,1498,3.287,1499,4.867,1500,3.287,1501,3.287,1502,3.287,1503,3.287,1504,3.287,1505,3.287,1506,3.287,1507,3.287,1508,3.287,1509,4.283,1510,4.283,1511,4.283]],["title/controllers/LessonsController.html",[144,1.452,1512,3.219]],["body/controllers/LessonsController.html",[3,0.075,4,0.068,5,0.048,8,0.229,13,1.044,19,0.665,31,1.102,33,0.626,35,1.595,36,0.01,37,1.47,38,0.747,39,1.232,40,2.285,44,1.595,52,1.069,53,1.211,55,2.754,56,2.744,57,0.261,58,0.365,59,1.136,60,1.172,64,0.075,65,0.101,70,1.445,71,1.017,73,1.392,83,0.005,84,0.005,89,1.912,93,1.108,94,1.891,106,0.731,144,0.927,146,0.953,148,1.341,153,1.391,154,0.659,162,0.676,165,1.679,170,1.392,174,1.038,229,3.646,248,4.484,255,4.348,257,5.029,265,1.701,297,2.423,298,2.423,299,1.57,302,1.251,304,1.391,308,2.056,323,1.341,346,1.038,350,1.295,364,1.762,490,2.322,572,2.231,573,2.535,574,2.322,575,2.322,579,3.92,580,3.48,581,3.629,583,2.22,584,2.322,585,2.147,586,2.66,591,4.278,598,1.57,601,1.724,609,1.724,610,1.57,611,3.629,612,3.629,614,3.424,615,2.439,619,1.445,620,3.173,621,1.926,622,3.48,623,4.41,624,3.629,625,1.817,626,3.249,629,3.095,630,3.095,631,3.629,633,2.972,634,2.972,636,2.652,643,2.056,646,2.804,647,1.817,742,1.926,744,3.85,745,3.327,799,2.439,804,3.426,805,4.357,806,4.357,813,2.439,823,2.056,824,3.875,840,2.056,841,2.056,842,2.056,843,2.056,988,4.348,991,4.704,1244,4.081,1274,2.439,1394,3.173,1512,3.173,1513,2.439,1514,5.223,1515,2.439,1516,2.771,1517,2.771,1518,2.439,1519,2.771,1520,2.771,1521,2.439,1522,6.353,1523,4.277,1524,2.771,1525,3.764,1526,2.771,1527,2.771,1528,2.771,1529,2.771,1530,5.016,1531,2.771,1532,2.771,1533,2.771,1534,3.424,1535,2.439,1536,3.426,1537,2.771,1538,2.771,1539,4.277,1540,2.771,1541,2.771,1542,5.873,1543,3.426,1544,2.771,1545,2.771,1546,4.277,1547,2.771,1548,2.771,1549,2.771,1550,2.22,1551,2.771,1552,2.771]],["title/modules/LessonsModule.html",[152,1.115,192,3.015]],["body/modules/LessonsModule.html",[3,0.154,4,0.14,5,0.099,36,0.01,57,0.297,58,0.754,64,0.154,65,0.209,83,0.008,84,0.008,113,2.673,119,3.208,146,2.444,152,1.985,176,3.375,179,2.346,180,2.5,181,2.673,182,2.673,183,2.5,184,2.673,192,5.884,199,3.319,200,2.584,201,2.584,203,2.673,385,3.242,386,2.346,734,3.104,1014,4.246,1288,4.246,1512,5.733,1534,5.552,1535,5.036,1553,5.036,1554,5.036,1555,5.722,1556,5.722,1557,5.036,1558,5.722]],["title/injectables/LessonsService.html",[0,0.776,1534,2.845]],["body/injectables/LessonsService.html",[0,0.649,2,0.844,3,0.061,4,0.055,5,0.039,8,0.187,10,1.998,13,0.886,18,0.909,19,0.64,30,1.804,35,1.535,36,0.01,37,1.185,38,0.576,39,1.185,44,1.46,56,1.697,57,0.246,58,0.297,64,0.061,65,0.082,71,1.879,83,0.004,84,0.004,89,1.869,93,1.105,106,0.594,112,0.844,113,3.753,119,1.017,123,0.509,151,2.101,162,0.886,165,1.914,166,3.786,168,2.768,169,3.571,170,1.869,171,1.814,229,3.367,233,2.286,246,1.477,248,3.98,265,1.444,302,1.017,325,3.371,354,3.326,369,2.682,386,0.923,408,4.219,443,1.335,447,3.081,456,2.44,457,2.481,459,3.637,495,3.431,496,3.883,510,4.264,541,1.536,572,1.894,573,2.152,574,1.972,575,2.478,579,3.332,585,3.081,586,1.401,598,2.057,601,2.259,619,1.175,670,3.124,677,1.477,690,1.565,734,2.934,742,4.666,744,4.232,745,2.057,871,2.965,873,3.655,879,4.192,884,1.671,886,1.565,887,1.804,908,3.17,911,1.804,921,1.671,924,1.671,988,3.817,1014,1.671,1244,4.264,1288,1.671,1317,1.982,1322,1.804,1489,3.196,1490,4.015,1515,3.196,1518,3.196,1521,3.196,1522,5.052,1525,4.015,1530,4.666,1534,2.381,1536,2.909,1557,1.982,1559,1.982,1560,3.631,1561,2.252,1562,4.563,1563,6.455,1564,4.015,1565,2.252,1566,3.196,1567,5.4,1568,2.252,1569,2.252,1570,2.252,1571,3.631,1572,2.252,1573,2.252,1574,2.252,1575,1.982,1576,1.982,1577,2.252,1578,2.252,1579,2.252,1580,2.252,1581,2.252,1582,2.252,1583,2.252,1584,3.631,1585,3.631,1586,2.252,1587,3.631,1588,2.252,1589,7.415,1590,3.631,1591,4.563,1592,4.563,1593,3.631,1594,2.252,1595,3.631,1596,3.631,1597,3.631,1598,3.631,1599,2.252,1600,2.252,1601,2.252,1602,3.196,1603,3.631,1604,3.631,1605,3.631,1606,3.631,1607,3.631,1608,2.252,1609,2.252,1610,2.252,1611,2.252]],["title/classes/Logger.html",[65,0.159,1181,3.219]],["body/classes/Logger.html",[3,0.207,4,0.11,5,0.104,8,0.371,9,1.335,15,2.25,19,0.444,36,0.01,52,1.729,53,1.958,57,0.237,64,0.121,65,0.164,73,2.581,83,0.007,84,0.007,123,1.909,261,1.212,364,1.479,457,2.029,956,4.537,1181,5.706,1612,3.944,1613,6.046,1614,6.062,1615,7.927,1616,7.927,1617,8.244,1618,6.87,1619,7.361,1620,6.478,1621,7.361,1622,6.062,1623,7.361,1624,7.361,1625,7.361,1626,7.361,1627,7.361,1628,6.062,1629,6.062,1630,7.361,1631,7.361,1632,6.062,1633,6.062,1634,6.062,1635,6.062,1636,6.062,1637,6.062,1638,6.062,1639,6.062,1640,6.062,1641,6.062,1642,6.062,1643,6.062,1644,6.062,1645,6.062,1646,6.062,1647,4.481,1648,6.046,1649,3.944,1650,3.944,1651,4.481,1652,3.944]],["title/modules/MailModule.html",[152,1.115,193,2.845]],["body/modules/MailModule.html",[3,0.141,4,0.128,5,0.09,33,1.179,36,0.01,57,0.286,58,0.687,64,0.141,65,0.191,73,2.41,83,0.007,84,0.007,123,1.179,135,3.244,152,1.902,159,2.067,176,3.234,179,2.138,180,2.279,181,2.437,182,2.437,183,2.279,184,3.459,193,5.515,199,3.131,200,2.355,201,2.355,203,2.437,260,3.244,364,1.273,384,3.091,410,5.76,716,2.721,717,4.178,1116,2.955,1653,4.59,1654,4.59,1655,4.59,1656,5.216,1657,5.216,1658,5.216,1659,4.178,1660,6.701,1661,5.216,1662,5.216,1663,5.216,1664,5.216,1665,5.216,1666,5.216,1667,4.59,1668,5.216,1669,5.216,1670,5.216,1671,5.216,1672,4.59,1673,4.59,1674,5.216,1675,5.216,1676,5.216,1677,5.216,1678,5.216,1679,5.216]],["title/injectables/MailService.html",[0,0.776,410,2.845]],["body/injectables/MailService.html",[0,1.25,2,2.09,3,0.15,4,0.137,5,0.096,8,0.462,13,1.706,18,1.396,19,0.693,35,1.663,36,0.01,37,1.545,38,0.624,39,1.284,44,1.327,57,0.242,58,0.735,64,0.15,65,0.204,83,0.008,84,0.008,93,1.147,159,1.72,162,1.361,174,2.09,278,3.384,325,3.231,337,4.467,354,2.606,410,4.584,415,3.51,441,5.25,1659,4.467,1672,4.908,1680,4.908,1681,6.992,1682,5.577,1683,8.414,1684,5.577,1685,6.992,1686,5.577,1687,5.577,1688,4.908,1689,6.992]],["title/classes/OTPDto.html",[65,0.159,293,2.571]],["body/classes/OTPDto.html",[3,0.128,4,0.116,5,0.082,8,0.393,9,1.387,19,0.47,36,0.01,38,0.423,55,2.433,57,0.26,64,0.17,65,0.287,83,0.007,84,0.007,93,1.033,94,1.284,154,1.129,155,1.679,156,1.727,159,1.464,160,1.545,171,1.906,239,1.679,261,1.284,272,2.812,276,3.733,278,3.794,287,3.733,293,4.191,364,1.838,415,2.382,418,2.577,429,3.286,441,4.636,563,3.371,564,3.204,927,4.377,928,3.297,930,3.521,932,2.952,933,3.521,935,3.592,936,4.377,937,4.128,938,4.674,939,3.639,940,5.247,941,3.521,942,4.674,943,4.674,944,3.569,945,3.521,946,4.674,947,3.521,1690,4.745,1691,4.745]],["title/injectables/PaginateHelper.html",[0,0.776,871,2.458]],["body/injectables/PaginateHelper.html",[0,1.035,2,1.569,3,0.113,4,0.103,5,0.072,8,0.347,9,1.274,10,2.592,13,1.412,18,1.048,19,0.804,35,1.702,36,0.01,37,1.314,38,0.693,39,1.314,44,1.786,45,3.019,52,2.233,53,2.528,55,2.868,56,3.098,57,0.268,58,0.551,64,0.113,65,0.153,71,0.996,73,1.363,83,0.006,84,0.006,112,2.168,159,1.291,162,1.022,165,1.66,235,5.731,240,2.745,255,4.83,257,4.83,285,3.599,325,2.805,338,3.429,343,2.184,344,3.391,346,1.569,447,2.102,456,1.665,457,1.401,490,3.601,614,2.745,871,3.278,1107,3.794,1108,2.481,1121,2.909,1124,2.909,1564,3.684,1692,3.684,1693,7.154,1694,7.154,1695,5.093,1696,5.787,1697,5.787,1698,4.186,1699,5.787,1700,4.186,1701,4.186,1702,5.787,1703,4.186,1704,5.787,1705,4.186,1706,5.787,1707,4.186,1708,4.186,1709,5.093,1710,4.186,1711,4.186,1712,4.186,1713,4.186,1714,7.154,1715,4.186,1716,7.154,1717,4.186,1718,4.186,1719,4.186,1720,4.186]],["title/controllers/ProfileController.html",[144,1.452,1721,3.015]],["body/controllers/ProfileController.html",[3,0.09,4,0.082,5,0.058,8,0.276,13,1.201,19,0.58,22,2.913,31,1.327,33,1.818,35,1.171,36,0.01,37,1.322,38,0.642,39,0.904,40,1.803,44,1.391,45,1.741,55,2.011,56,2.299,57,0.274,58,0.44,59,2.397,60,1.412,64,0.133,65,0.18,70,1.741,73,1.903,83,0.005,84,0.005,89,2.101,93,0.85,94,1.746,106,0.88,115,1.812,123,0.754,144,1.117,146,1.148,148,1.615,153,1.675,154,0.794,162,1.201,165,1.913,170,1.086,174,1.844,229,2.567,248,1.978,255,3.061,257,4.014,297,2.788,298,3.312,299,1.89,302,1.507,304,1.675,308,2.476,323,1.615,346,1.25,350,3.478,362,1.978,364,1.201,457,1.117,490,1.812,491,1.978,523,2.672,540,2.076,572,1.741,575,2.672,579,3.504,580,2.916,591,3.465,596,2.673,609,2.076,610,1.89,611,3.419,612,3.419,614,3.226,619,1.741,621,2.319,622,4.529,623,4.484,624,3.419,625,2.188,626,3.061,629,4.412,630,4.078,633,2.319,634,2.319,636,1.507,640,2.673,643,2.476,646,2.188,647,2.188,805,2.476,806,2.476,822,2.476,823,2.476,824,4.338,833,3.419,834,3.419,835,3.419,836,3.226,837,3.419,838,3.419,839,3.419,840,2.476,841,2.476,842,2.476,843,2.476,869,4.078,1039,3.312,1083,3.824,1086,3.061,1550,2.673,1721,3.419,1722,2.673,1723,5.678,1724,4.331,1725,4.683,1726,4.331,1727,5.145,1728,3.337,1729,3.337,1730,3.337,1731,3.337,1732,3.337,1733,3.337,1734,4.881,1735,3.337,1736,3.337,1737,3.337,1738,3.337,1739,2.673,1740,3.651,1741,5.145,1742,2.937,1743,2.937,1744,2.319,1745,2.937,1746,2.937,1747,2.937,1748,2.937,1749,2.937,1750,2.937,1751,2.937,1752,2.937,1753,2.937,1754,2.937,1755,2.937,1756,2.937,1757,4.331,1758,4.331,1759,2.937,1760,2.937,1761,2.937,1762,2.937,1763,2.937,1764,2.937,1765,2.937]],["title/classes/ProfileDto.html",[65,0.159,1083,2.571]],["body/classes/ProfileDto.html",[3,0.099,4,0.09,5,0.063,8,0.303,9,1.159,19,0.611,22,2.377,31,2.093,33,1.831,36,0.01,37,0.967,38,0.637,39,0.967,40,2.557,55,1.259,57,0.257,59,1.501,60,1.548,64,0.166,65,0.247,82,2.983,83,0.006,84,0.006,93,1.081,94,1.668,123,1.189,154,0.871,155,1.295,156,1.332,159,1.129,160,1.192,171,1.939,239,1.295,261,0.99,278,2.548,364,0.893,403,3.658,415,2.643,418,2.858,429,2.746,461,2.543,462,2.543,464,2.543,483,2.543,491,3.994,563,3.048,564,3.046,636,2.783,932,2.277,935,3.54,937,4.232,939,3.605,950,4.041,954,2.982,956,2.858,957,2.932,961,2.858,964,2.074,1018,2.543,1039,2.074,1040,5.001,1041,2.543,1043,2.932,1044,2.932,1046,2.932,1047,4.632,1050,2.932,1055,2.932,1060,2.932,1062,2.932,1063,2.716,1064,2.932,1065,2.932,1066,1.772,1067,2.543,1068,2.543,1069,4.216,1070,2.932,1071,2.932,1072,2.932,1073,2.932,1074,2.932,1075,2.932,1076,2.932,1077,2.932,1078,2.932,1079,2.716,1080,2.932,1081,2.932,1082,2.932,1083,3.12,1084,2.227,1085,3.906,1086,3.274,1087,3.906,1088,2.932,1089,4.216,1090,4.216,1091,5.298,1092,2.932,1093,3.906,1094,4.216,1095,5.298,1096,2.932,1097,2.4,1766,3.66,1767,3.66,1768,3.66]],["title/controllers/PrometheusController.html",[144,1.452,1769,3.219]],["body/controllers/PrometheusController.html",[3,0.158,4,0.143,5,0.101,8,0.484,13,1.757,19,0.58,35,1.391,36,0.01,37,1.074,38,0.642,39,1.074,44,1.391,57,0.27,58,0.77,64,0.158,65,0.214,71,1.391,83,0.008,84,0.008,94,1.582,144,1.956,146,2.011,148,2.83,162,1.427,174,2.191,325,3.3,345,3.676,346,2.191,354,2.732,480,4.853,1769,5.342,1770,5.145,1771,6.336,1772,6.336,1773,5.847,1774,5.847,1775,4.853,1776,4.683,1777,5.847,1778,5.847,1779,5.847,1780,5.847,1781,5.847,1782,5.847]],["title/injectables/PrometheusMiddleware.html",[0,0.776,221,2.845]],["body/injectables/PrometheusMiddleware.html",[0,1.2,2,1.959,3,0.141,4,0.128,5,0.09,8,0.433,13,1.638,18,1.309,19,0.665,24,2.961,35,1.596,36,0.01,37,1.232,38,0.599,39,1.232,44,1.243,45,2.727,57,0.256,58,0.688,64,0.141,65,0.191,71,1.923,83,0.007,84,0.007,162,1.276,168,2.374,174,1.959,221,4.399,226,2.36,285,3.252,344,3.531,345,3.531,346,1.959,480,4.61,506,4.6,519,4.663,522,4.979,523,4.246,524,5.802,526,4.979,1118,4.399,1126,4.859,1775,5.147,1776,4.187,1783,4.6,1784,5.227,1785,5.227,1786,5.227,1787,5.905,1788,5.227,1789,5.905,1790,5.227,1791,5.227,1792,5.227,1793,5.227,1794,5.227,1795,5.227]],["title/modules/PrometheusModule.html",[152,1.115,194,3.015]],["body/modules/PrometheusModule.html",[3,0.145,4,0.131,5,0.092,36,0.01,57,0.282,58,0.707,64,0.145,65,0.196,83,0.008,84,0.008,123,1.542,146,2.347,152,1.928,176,3.278,179,2.2,180,2.344,181,2.507,182,2.507,183,2.344,184,3.505,194,6.096,199,3.188,200,2.423,201,2.423,203,2.507,221,5.782,395,5.567,1769,5.567,1775,5.486,1776,4.299,1796,4.723,1797,4.723,1798,4.723,1799,5.367,1800,5.367,1801,5.367,1802,5.367,1803,4.723,1804,4.299,1805,5.367,1806,5.367,1807,5.367]],["title/injectables/PrometheusService.html",[0,0.776,1775,2.699]],["body/injectables/PrometheusService.html",[0,0.846,2,1.185,3,0.085,4,0.077,5,0.055,8,0.262,9,1.041,10,1.844,13,1.382,15,4.159,18,1.418,19,0.807,24,3.999,35,1.6,36,0.01,37,1.438,38,0.709,39,1.235,44,1.679,45,3.509,55,2.694,56,1.478,57,0.163,58,0.417,64,0.085,65,0.116,73,2.298,83,0.005,84,0.005,93,1.128,119,2.135,162,2.061,165,0.792,168,2.224,338,2.802,344,1.428,541,2.846,691,2.073,734,2.066,784,2.533,909,4.537,1126,5.134,1244,3.286,1393,4.663,1567,4.161,1771,2.783,1772,5.531,1775,2.941,1789,6.212,1808,2.783,1809,5.664,1810,5.664,1811,5.664,1812,5.664,1813,5.664,1814,6.285,1815,4.729,1816,4.729,1817,4.729,1818,4.729,1819,4.729,1820,4.729,1821,3.163,1822,4.729,1823,3.163,1824,4.729,1825,3.163,1826,4.729,1827,5.664,1828,3.163,1829,4.729,1830,3.163,1831,4.729,1832,3.163,1833,3.163,1834,5.664,1835,3.163,1836,7.691,1837,3.163,1838,5.664,1839,3.163,1840,3.163,1841,5.664,1842,3.163,1843,4.161,1844,2.783,1845,7.317,1846,3.163,1847,2.783,1848,2.533,1849,2.533,1850,3.163,1851,5.664,1852,5.664,1853,3.163,1854,3.163,1855,5.92,1856,5.664,1857,6.285,1858,4.729,1859,6.728,1860,3.163,1861,3.163,1862,3.163,1863,3.163,1864,3.163,1865,3.163,1866,3.163,1867,2.783,1868,4.729,1869,3.509,1870,3.163,1871,3.163,1872,3.163,1873,3.163,1874,4.729,1875,3.163,1876,3.163,1877,4.729,1878,4.729,1879,3.163,1880,3.163,1881,4.729,1882,3.163,1883,3.163,1884,3.163,1885,3.163,1886,3.163,1887,3.163,1888,3.163,1889,3.163]],["title/classes/QueryFailedFilter.html",[65,0.159,1890,3.475]],["body/classes/QueryFailedFilter.html",[3,0.139,4,0.126,5,0.089,8,0.427,9,1.466,13,1.624,15,3.341,18,1.292,19,0.73,35,1.583,36,0.01,37,1.222,38,0.657,39,1.222,44,1.227,45,2.692,57,0.278,58,0.68,64,0.139,65,0.189,71,1.752,83,0.007,84,0.007,112,1.934,168,1.826,171,1.196,226,3.005,261,1.396,331,6.373,343,2.692,345,3.005,346,1.934,456,2.929,457,1.727,541,2.815,716,3.842,1100,4.582,1103,4.139,1104,4.84,1106,3.383,1109,3.058,1136,3.058,1137,3.21,1138,3.21,1142,3.586,1144,3.586,1377,4.541,1392,4.134,1393,3.829,1397,3.586,1890,5.331,1891,6.848,1892,4.541,1893,5.16,1894,5.16,1895,5.16,1896,5.16,1897,5.16,1898,5.16,1899,5.16,1900,5.16,1901,5.16,1902,5.16]],["title/entities/Question.html",[85,1.725,91,2.571]],["body/entities/Question.html",[3,0.105,4,0.095,5,0.067,8,0.322,9,1.209,18,1.595,19,0.752,36,0.01,38,0.748,39,1.008,40,1.198,41,3.816,57,0.22,64,0.187,65,0.233,83,0.006,84,0.006,85,2.753,86,4.307,87,2.026,88,2.699,89,2.378,90,3.111,91,4.799,92,4.719,93,1.104,94,2.051,95,4.138,97,4.799,99,2.882,100,2.882,101,5.102,102,6.074,105,3.351,106,1.024,107,3.254,108,3.962,109,4.726,110,3.816,111,3.254,112,1.455,113,3.413,114,2.882,115,3.966,116,5.076,117,4.074,118,4.074,119,3.656,120,3.608,121,1.815,122,3.608,123,1.713,124,3.111,125,2.699,126,3.111,127,3.111,128,3.111,129,2.699,130,3.111,131,2.699,132,4.398,133,4.074,134,4.398,135,3.962,136,4.398,137,4.426,138,3.111,139,3.816,140,3.111,141,2.882,142,3.111,143,2.882,751,3.6,1903,3.884,1904,3.884,1905,3.418,1906,3.884,1907,3.884,1908,3.884,1909,3.884]],["title/entities/Quiz.html",[85,1.725,119,1.959]],["body/entities/Quiz.html",[3,0.104,4,0.095,5,0.067,8,0.32,9,1.204,18,1.589,19,0.771,36,0.01,38,0.74,39,1.004,40,1.958,41,2.682,57,0.219,64,0.186,65,0.232,83,0.006,84,0.006,85,2.745,86,3.948,87,2.013,88,2.682,89,2.373,90,3.091,91,4.858,92,4.611,93,1.103,94,2.105,95,4.128,97,4.791,100,2.863,101,4.379,102,5.837,105,3.341,106,1.017,107,3.762,108,3.948,109,4.71,110,3.798,111,3.762,112,1.446,113,3.777,114,2.863,115,3.447,116,4.411,117,4.056,118,4.056,119,3.417,120,3.596,121,2.965,122,3.596,123,1.71,124,4.379,125,4.411,126,4.379,127,3.091,128,3.091,129,4.411,130,3.911,131,4.411,132,3.091,133,2.863,134,3.091,135,2.4,136,3.091,137,2.682,138,3.091,139,3.798,140,3.091,141,2.863,142,3.091,143,2.863,746,3.091,751,2.53,1905,3.396,1910,3.859,1911,3.859,1912,3.859,1913,3.859,1914,3.859,1915,3.859,1916,3.859]],["title/controllers/QuizController.html",[144,1.452,1917,3.219]],["body/controllers/QuizController.html",[3,0.139,4,0.126,5,0.089,8,0.427,13,1.624,19,0.512,31,2.052,35,1.227,36,0.01,37,0.948,38,0.657,39,0.948,40,1.592,44,1.227,57,0.294,58,0.68,59,2.116,60,2.183,64,0.139,65,0.189,70,2.692,83,0.007,84,0.007,93,0.97,94,1.8,119,2.33,144,1.727,146,1.775,148,2.498,153,2.591,154,1.227,162,1.259,165,1.292,174,1.934,297,2.923,298,3.77,299,2.923,302,2.33,304,2.591,323,2.498,581,3.586,584,3.614,585,3.341,586,4.139,609,3.21,610,2.923,619,2.692,620,4.938,622,3.944,629,3.058,630,3.058,631,3.586,1019,5.574,1917,4.938,1918,4.541,1919,6.482,1920,4.541,1921,6.848,1922,5.16,1923,5.16,1924,4.829,1925,4.541,1926,5.331,1927,3.829,1928,5.16,1929,5.16,1930,5.16,1931,5.16,1932,5.16]],["title/modules/QuizModule.html",[152,1.115,195,3.015]],["body/modules/QuizModule.html",[3,0.155,4,0.141,5,0.099,36,0.01,57,0.293,58,0.757,64,0.155,65,0.21,83,0.008,84,0.008,86,4.432,91,4.223,113,3.329,119,2.596,146,2.451,152,1.989,176,3.383,179,2.357,180,2.512,181,2.686,182,2.686,183,2.512,184,2.686,195,5.891,199,3.329,200,2.596,201,2.596,203,2.686,385,3.257,386,2.357,1025,4.605,1917,5.745,1924,5.559,1925,5.06,1933,5.06,1934,5.06,1935,5.749,1936,5.749,1937,5.06,1938,5.749]],["title/injectables/QuizService.html",[0,0.776,1924,2.845]],["body/injectables/QuizService.html",[0,1.024,2,1.545,3,0.111,4,0.101,5,0.071,8,0.341,10,2.516,13,1.397,18,1.433,19,0.568,26,3.302,35,1.362,36,0.01,37,1.051,38,0.587,39,1.051,40,1.272,44,0.981,57,0.279,58,0.543,64,0.111,65,0.151,71,1.838,83,0.006,84,0.006,86,2.564,89,1.342,91,2.443,92,3.393,93,0.866,100,3.059,106,1.087,112,1.545,113,3.611,119,3.372,121,1.926,125,3.978,135,2.564,137,2.864,151,2.581,162,1.006,165,1.433,166,3.183,168,2.327,170,1.342,171,1.525,302,1.861,325,2.783,354,3.073,369,1.926,386,1.69,408,5.089,443,2.443,447,2.07,456,1.639,457,1.916,495,2.703,496,3.059,510,2.864,585,2.07,586,2.564,619,2.15,690,2.864,1019,4.896,1025,3.302,1027,3.628,1566,5.789,1575,3.628,1576,3.628,1602,3.628,1919,5.038,1920,5.038,1921,6.254,1924,3.754,1926,4.586,1937,3.628,1939,3.628,1940,4.122,1941,6.578,1942,6.578,1943,4.122,1944,5.725,1945,4.122,1946,4.122,1947,4.122,1948,4.122,1949,4.122,1950,5.725,1951,5.725,1952,4.122,1953,4.122,1954,4.122,1955,4.122,1956,4.122,1957,5.725,1958,4.122,1959,5.725,1960,4.122]],["title/interfaces/Request.html",[61,1.835,344,1.959]],["body/interfaces/Request.html",[0,1.121,3,0.127,4,0.115,5,0.081,8,0.39,9,1.38,10,2.04,18,1.179,22,2.126,33,1.942,36,0.01,38,0.42,39,1.151,55,2.156,57,0.259,58,0.62,61,2.651,64,0.127,65,0.172,71,1.675,73,2.293,83,0.007,84,0.007,93,0.825,106,1.241,151,2.293,152,1.21,162,1.719,166,3.409,167,2.98,168,2.492,171,1.633,226,2.126,230,2.929,291,4.65,325,1.992,330,2.667,342,6.015,344,3.391,345,2.83,346,2.348,351,3.272,354,2.2,362,4.174,364,1.719,366,5.642,367,5.642,383,3.087,390,4.109,409,5.227,447,2.364,456,1.872,457,1.575,480,2.929,518,3.771,522,3.493,523,3.403,524,4.65,526,4.65,527,5.515,528,4.143,529,6.199,530,4.143,531,4.143,532,3.771,533,4.143,534,4.143,535,4.143]],["title/classes/ResetPasswordDto.html",[65,0.159,287,2.571]],["body/classes/ResetPasswordDto.html",[3,0.126,4,0.115,5,0.081,8,0.388,9,1.375,19,0.619,36,0.01,38,0.557,55,2.147,57,0.259,64,0.168,65,0.286,83,0.007,84,0.007,93,1.079,94,1.689,154,1.113,155,1.656,156,1.704,159,1.444,160,1.524,171,1.861,239,1.656,261,1.266,272,2.774,276,3.699,278,4.08,287,4.162,293,3.699,364,1.523,415,2.35,418,2.542,429,3.256,441,3.069,563,3.36,564,3.192,927,4.88,928,3.253,929,5,930,4.632,932,2.912,933,3.473,935,3.58,936,4.338,937,4.114,938,4.632,939,3.625,940,5.211,941,3.473,942,3.473,943,3.473,944,2.652,945,3.473,946,3.473,947,5.211,1961,4.681,1962,4.681]],["title/classes/ResponseDto.html",[65,0.159,1111,2.699]],["body/classes/ResponseDto.html",[3,0.118,4,0.107,5,0.075,8,0.362,9,1.312,19,0.824,24,3.841,36,0.01,38,0.741,39,1.445,51,2.52,57,0.252,58,0.575,64,0.118,65,0.248,83,0.007,84,0.007,93,1.107,94,2.248,123,1.852,154,1.039,162,1.454,167,2.868,168,2.399,170,2.208,171,1.572,233,2.962,239,1.545,261,1.182,364,1.92,563,2.78,564,2.696,565,2.717,569,3.404,584,3.235,591,4.925,935,3.672,936,4.712,961,3.955,1109,4.018,1111,3.706,1116,3.841,1117,4.712,1543,4.772,1963,3.844,1964,8.195,1965,4.368,1966,4.368,1967,4.368,1968,4.368,1969,4.368,1970,5.958,1971,4.368,1972,4.368,1973,4.368,1974,4.368,1975,4.368,1976,4.368,1977,4.368,1978,4.368,1979,4.368,1980,5.958]],["title/injectables/ResponseService.html",[0,0.776,151,1.413]],["body/injectables/ResponseService.html",[0,1.04,2,1.58,3,0.114,4,0.103,5,0.073,8,0.349,10,1.373,13,1.419,15,3.342,18,1.056,19,0.576,24,4.065,35,1.383,36,0.01,37,1.068,38,0.519,39,1.068,44,1.003,55,2,57,0.26,58,0.555,64,0.194,65,0.263,71,1.933,73,1.373,83,0.006,84,0.006,93,0.945,123,0.953,151,2.336,154,1.003,162,1.419,165,1.056,167,2.816,168,2.355,170,2.336,171,1.543,174,1.58,226,1.904,233,2.54,343,2.199,344,3.669,345,3.514,346,1.58,364,1.029,365,2.814,456,2.312,457,1.946,541,2.46,569,2.919,716,2.199,1066,2.04,1084,1.783,1098,2.622,1099,2.929,1100,3.617,1103,2.622,1104,3.617,1106,2.764,1107,3.812,1108,2.498,1109,2.498,1110,4.04,1111,4.463,1112,3.128,1113,2.764,1114,3.128,1115,3.128,1116,3.294,1117,4.04,1118,2.764,1119,4.704,1120,3.128,1121,2.929,1122,3.128,1123,3.128,1124,2.929,1125,4.314,1126,2.764,1127,3.128,1128,3.128,1129,3.128,1130,3.128,1131,3.128,1132,3.128,1133,3.128,1134,3.128,1135,3.128,1136,2.498,1137,2.622,1138,2.622,1139,3.128,1140,2.622,1141,2.764,1142,2.929,1143,4.314,1144,2.929,1145,3.128,1146,3.128,1147,2.622,1148,3.128,1149,3.128,1981,4.216,1982,4.216,1983,4.216]],["title/modules/SharedModule.html",[152,1.115,196,3.015]],["body/modules/SharedModule.html",[3,0.135,4,0.122,5,0.086,36,0.01,57,0.288,58,0.659,64,0.135,65,0.183,83,0.007,84,0.007,106,1.318,146,1.72,151,2.843,152,1.864,176,3.169,179,2.05,180,2.184,181,2.336,182,2.336,183,2.184,184,3.39,196,6.151,199,3.046,200,2.258,201,2.258,203,3.046,210,3.71,212,3.475,330,4.947,343,2.608,395,4.838,871,4.947,886,3.475,1098,3.11,1174,5.682,1984,4.4,1985,4.4,1986,4.4,1987,4.4,1988,5,1989,6.52,1990,6.52,1991,5,1992,5,1993,5,1994,5,1995,5]],["title/classes/UpdateCategoryDto.html",[65,0.159,602,3.015]],["body/classes/UpdateCategoryDto.html",[3,0.177,4,0.161,5,0.113,36,0.01,57,0.267,64,0.177,65,0.241,83,0.009,84,0.009,154,1.565,261,1.78,265,2.616,578,4.092,602,5.371,618,4.313,949,4.313,1066,3.184,1084,3.27,1996,5.789,1997,7.729]],["title/classes/UpdateCourseDto.html",[65,0.159,818,3.015]],["body/classes/UpdateCourseDto.html",[3,0.177,4,0.161,5,0.113,36,0.01,57,0.267,64,0.177,65,0.241,83,0.009,84,0.009,154,1.565,261,1.78,265,2.616,798,4.092,818,5.371,827,5.269,967,4.881,1066,3.184,1084,3.27,1998,5.789,1999,7.729]],["title/classes/UpdateLessonDto.html",[65,0.159,1530,3.015]],["body/classes/UpdateLessonDto.html",[3,0.177,4,0.161,5,0.113,36,0.01,57,0.267,64,0.177,65,0.241,83,0.009,84,0.009,154,1.565,261,1.78,265,2.616,988,4.092,990,4.881,1066,3.184,1084,3.27,1530,5.371,1536,5.269,2000,5.789,2001,7.729]],["title/classes/UpdateQuizDto.html",[65,0.159,1927,3.219]],["body/classes/UpdateQuizDto.html",[3,0.177,4,0.161,5,0.113,36,0.01,57,0.267,64,0.177,65,0.241,83,0.009,84,0.009,154,1.565,261,1.78,265,2.616,1019,4.313,1021,5.269,1066,3.184,1084,3.27,1926,5.269,1927,5.735,2002,5.789,2003,7.729]],["title/classes/UpdateUserCategoryDto.html",[65,0.159,2004,3.475]],["body/classes/UpdateUserCategoryDto.html",[3,0.176,4,0.16,5,0.112,33,1.738,36,0.01,57,0.266,64,0.176,65,0.239,83,0.009,84,0.009,154,1.552,261,1.765,265,2.594,618,4.278,949,4.278,1030,4.278,1031,4.059,1066,3.158,1084,3.254,2004,6.162,2005,5.742,2006,7.692]],["title/classes/UpdateUserDto.html",[65,0.159,1734,2.845]],["body/classes/UpdateUserDto.html",[3,0.177,4,0.161,5,0.113,36,0.01,57,0.267,64,0.177,65,0.24,83,0.009,84,0.009,261,1.775,265,2.609,1039,3.717,1041,4.559,1066,3.175,1067,4.559,1068,4.559,1084,3.264,1085,5.726,1734,5.059,1740,4.868,2007,5.774]],["title/entities/User.html",[33,0.98,85,1.725]],["body/entities/User.html",[3,0.091,4,0.082,5,0.058,8,0.278,9,1.088,18,0.84,19,0.835,22,2.648,31,2.742,33,1.117,36,0.01,37,1.077,38,0.775,51,2.09,52,2.496,57,0.249,59,1.376,60,1.42,64,0.091,65,0.215,82,1.624,83,0.005,84,0.005,85,1.334,87,1.75,89,1.91,93,1.132,94,2.279,95,3.323,97,4.83,105,2.391,106,0.885,107,2.928,111,2.928,112,1.257,115,3.513,120,1.901,122,4.705,123,1.842,130,4.225,216,2.688,239,1.187,278,2.839,364,1.939,403,3.433,415,3.462,418,3.185,429,3.059,483,2.332,491,3.476,538,4.352,539,4.352,541,2.481,542,4.352,543,4.698,547,2.332,549,5.679,550,5.694,554,2.688,557,2.332,559,4.024,560,2.953,562,3.433,563,3.138,564,2.966,565,2.087,566,2.49,567,2.49,569,3.622,751,2.2,770,5.524,1063,2.49,1079,2.49,1091,4.352,1095,4.352,1543,4.698,2008,2.953,2009,5.865,2010,3.356,2011,3.356,2012,3.356,2013,3.356,2014,3.356,2015,3.356,2016,3.356,2017,3.356,2018,3.356,2019,3.356,2020,3.356,2021,3.356,2022,3.356,2023,3.356,2024,3.356,2025,3.356,2026,3.356,2027,3.356,2028,3.356,2029,3.356,2030,3.356,2031,3.356]],["title/entities/UserCategory.html",[85,1.725,559,2.699]],["body/entities/UserCategory.html",[3,0.126,4,0.114,5,0.08,8,0.385,9,1.369,18,1.165,19,0.795,33,1.903,36,0.01,38,0.751,57,0.258,64,0.126,65,0.17,83,0.007,84,0.007,85,1.85,87,2.428,89,2.28,93,0.819,94,2.168,95,3.967,99,4.614,105,3.01,106,1.227,107,3.685,108,4.356,111,3.685,112,1.744,120,2.636,122,4.54,123,1.405,130,4.54,364,1.824,442,3.453,536,3.452,538,5.196,539,5.196,542,5.196,544,3.453,547,3.234,557,3.234,559,3.868,562,4.321,566,6.072,569,4.024,780,4.096,1031,5.09,2032,4.096,2033,6.218,2034,4.654,2035,4.654,2036,4.654,2037,4.654,2038,4.654,2039,6.218,2040,4.654,2041,4.654]],["title/controllers/UserCategoryController.html",[144,1.452,2042,3.219]],["body/controllers/UserCategoryController.html",[3,0.124,4,0.112,5,0.079,8,0.38,13,1.504,19,0.69,31,1.826,33,1.934,35,1.655,36,0.01,37,1.277,38,0.621,39,1.277,44,1.655,57,0.282,58,0.605,59,1.883,60,1.943,64,0.124,65,0.168,70,2.395,71,1.092,83,0.007,84,0.007,89,2.265,93,0.916,94,2.011,144,1.537,146,1.58,148,2.222,153,2.305,154,1.092,162,1.121,165,1.742,174,1.721,217,5.166,265,2.766,297,3.941,298,3.491,299,2.601,302,2.073,304,2.305,323,2.222,350,3.873,434,3.678,536,2.852,572,3.215,574,3.346,598,2.601,610,2.601,617,3.407,618,3.011,622,3.652,629,2.721,630,2.721,646,4.041,647,3.011,1030,5.435,1031,4.624,2042,4.573,2043,4.041,2044,4.592,2045,4.592,2046,4.592,2047,4.592,2048,4.592,2049,4.561,2050,4.592,2051,4.592,2052,4.592,2053,4.592,2054,4.592,2055,4.592,2056,4.041,2057,4.592,2058,4.592]],["title/modules/UserCategoryModule.html",[152,1.115,197,3.015]],["body/modules/UserCategoryModule.html",[3,0.141,4,0.128,5,0.09,33,1.765,36,0.01,57,0.297,58,0.687,64,0.141,65,0.191,83,0.007,84,0.007,106,1.375,146,2.305,151,2.693,152,1.902,176,3.234,179,2.138,180,2.279,181,2.437,182,2.437,183,2.279,184,3.459,197,6.07,199,3.131,200,2.355,201,2.355,203,2.437,212,3.624,217,3.624,330,4.685,385,2.955,386,2.138,387,3.624,536,2.747,559,3.244,567,3.87,617,3.87,656,4.59,864,3.87,1031,3.244,2042,5.493,2049,5.76,2059,4.59,2060,4.59,2061,4.59,2062,5.216,2063,4.59,2064,5.216]],["title/injectables/UserCategoryService.html",[0,0.776,2049,2.845]],["body/injectables/UserCategoryService.html",[0,0.843,2,1.18,3,0.085,4,0.077,5,0.054,8,0.261,10,2.187,13,1.151,18,1.181,19,0.622,33,1.838,35,1.492,36,0.01,37,1.152,38,0.652,39,1.152,44,1.344,57,0.274,58,0.415,64,0.085,65,0.115,71,1.827,83,0.005,84,0.005,89,2.379,93,0.621,106,0.83,112,1.18,123,1.277,151,2.379,155,1.115,156,1.147,158,3.406,159,0.972,160,2.042,162,1.531,165,1.83,166,3.537,167,3.091,168,1.115,170,2.379,171,1.694,217,4.667,233,3.192,265,2.494,302,1.422,323,1.525,325,3.25,350,2.203,351,2.189,354,3.414,364,1.531,365,2.282,369,2.64,386,1.291,387,2.189,408,4.636,412,4.192,443,1.867,446,2.337,447,2.837,456,2.247,458,4.898,459,3.348,468,2.337,536,3.256,543,5.38,559,4.545,567,2.337,572,2.947,574,3.068,580,3.717,585,2.837,586,1.959,610,1.785,618,2.065,665,4.526,678,2.523,688,2.772,690,2.189,691,4.621,693,3.777,696,2.523,864,2.337,908,2.189,909,4.526,910,2.772,912,4.149,924,2.337,1030,3.091,1031,4.178,1033,4.149,2049,3.091,2056,6.203,2063,2.772,2065,2.772,2066,3.15,2067,3.15,2068,4.715,2069,3.15,2070,3.15,2071,3.15,2072,3.15,2073,3.15,2074,3.15,2075,3.15,2076,3.15,2077,3.15,2078,3.15,2079,4.715,2080,3.15]],["title/controllers/UserController.html",[144,1.452,1744,3.015]],["body/controllers/UserController.html",[3,0.08,4,0.073,5,0.051,8,0.246,13,1.099,19,0.683,22,3.331,31,1.179,33,1.667,35,1.638,36,0.01,37,1.415,38,0.687,39,1.265,40,2.125,44,1.638,52,1.144,53,1.295,55,2.599,56,2.545,57,0.266,58,0.39,59,2.824,60,1.254,64,0.121,65,0.165,70,1.547,73,1.773,83,0.005,84,0.005,89,2.402,93,1.046,94,1.937,106,0.782,115,2.446,123,1.018,144,0.992,146,1.02,148,1.435,153,1.488,154,0.705,162,1.099,165,1.847,170,0.965,174,1.688,229,3.173,248,3.228,255,4.069,257,4.588,265,1.791,297,3.086,298,3.086,299,1.68,302,1.339,304,1.488,308,2.2,323,1.435,346,1.111,350,2.545,362,1.757,364,1.485,457,0.992,490,2.446,491,1.757,523,2.446,540,1.844,572,2.841,573,2.669,574,2.446,575,2.958,579,2.446,591,4.082,595,2.2,596,2.375,598,1.68,601,1.844,609,1.844,610,1.68,611,3.13,612,3.13,614,2.953,619,1.547,621,2.06,622,4.371,623,4.227,624,3.13,625,1.944,626,2.802,629,4.243,630,3.877,633,2.06,634,2.06,636,1.339,640,2.375,643,2.2,646,1.944,647,1.944,802,2.609,804,2.375,805,3.342,806,3.342,822,2.2,823,2.2,824,4.041,833,3.13,834,3.13,835,3.13,836,2.953,837,3.13,838,3.13,839,3.13,840,2.2,841,2.2,842,2.2,843,2.2,869,3.877,1039,3.902,1083,2.669,1086,1.844,1550,2.375,1721,2.06,1722,2.375,1723,2.609,1725,2.375,1726,2.609,1727,3.964,1734,4.953,1739,2.375,1740,3.342,1741,4.793,1742,2.609,1743,2.609,1744,3.13,1745,2.609,1746,2.609,1747,2.609,1748,2.609,1749,2.609,1750,3.964,1751,2.609,1752,2.609,1753,2.609,1754,2.609,1755,2.609,1756,2.609,1757,3.964,1758,3.964,1759,2.609,1760,2.609,1761,2.609,1762,2.609,1763,2.609,1764,2.609,1765,2.609,1869,2.2,2081,3.964,2082,2.609,2083,2.965,2084,2.965,2085,2.965,2086,2.965,2087,2.965,2088,2.965,2089,2.965,2090,2.965,2091,2.965,2092,2.609,2093,2.965,2094,2.965,2095,2.965]],["title/modules/UserModule.html",[152,1.115,198,2.845]],["body/modules/UserModule.html",[3,0.138,4,0.126,5,0.088,33,1.159,36,0.01,57,0.296,58,0.675,64,0.138,65,0.188,83,0.007,84,0.007,106,1.352,146,2.28,151,2.68,152,1.887,176,3.208,179,2.102,180,2.24,181,2.396,182,2.396,183,2.24,184,3.431,198,5.774,199,3.096,200,2.315,201,2.315,203,2.396,212,3.563,330,4.664,383,3.362,385,2.905,386,2.102,396,4.512,409,4.917,869,5.194,871,4.664,886,3.563,1721,5.103,1739,4.107,1744,5.103,2096,4.512,2097,4.512,2098,4.512,2099,5.128,2100,5.128,2101,4.512]],["title/injectables/UserService.html",[0,0.776,869,2.571]],["body/injectables/UserService.html",[0,0.563,2,0.709,3,0.051,4,0.046,5,0.033,8,0.157,10,1.534,13,0.768,18,0.788,19,0.712,22,2.55,31,1.873,33,1.89,35,1.709,36,0.01,37,1.379,38,0.641,39,1.319,44,1.676,57,0.248,58,0.249,59,0.775,60,0.8,64,0.051,65,0.069,71,1.889,83,0.003,84,0.003,89,2.244,93,1.071,106,0.499,112,0.709,123,1.417,151,1.949,155,0.669,156,0.688,157,1.24,158,2.558,159,0.583,160,1.534,162,0.986,163,3.346,164,2.063,165,2.025,166,3.785,170,2.546,171,1.813,229,2.458,233,2.615,246,1.24,247,1.515,248,1.865,265,1.251,278,1.523,302,0.854,323,0.915,325,3.539,338,2.792,340,2.521,350,2.797,354,3.683,365,3.535,369,3.041,386,0.775,401,2.769,407,1.664,408,2.792,412,2.335,415,2.029,418,1.709,423,2.769,429,2.458,443,1.121,444,2.521,446,1.403,447,3.148,450,2.769,456,2.493,457,2.178,458,2.187,459,1.121,461,1.314,462,1.314,468,3.496,478,2.769,484,1.664,490,1.027,491,1.121,493,1.664,495,3.43,572,1.642,573,1.865,574,1.709,575,1.709,585,3.006,595,2.335,598,1.783,601,1.957,619,0.986,677,1.24,692,1.664,869,1.865,871,2.669,879,1.515,886,1.314,895,2.769,908,2.808,921,4.19,924,2.335,1039,3.391,1083,2.792,1097,3.089,1394,1.403,1724,2.769,1725,3.237,1734,4.518,1740,2.335,1869,4.981,2081,2.769,2082,2.769,2092,2.769,2101,1.664,2102,1.664,2103,3.147,2104,4.042,2105,1.891,2106,1.891,2107,3.147,2108,1.891,2109,3.147,2110,1.891,2111,1.891,2112,1.891,2113,3.147,2114,1.891,2115,4.711,2116,1.891,2117,1.891,2118,1.891,2119,4.042,2120,1.891,2121,1.891,2122,3.147,2123,1.891,2124,3.147,2125,1.891,2126,1.515,2127,3.147,2128,1.891,2129,3.147,2130,1.891,2131,3.147,2132,3.147,2133,3.147,2134,1.891,2135,1.891,2136,1.891,2137,1.891,2138,1.891,2139,1.891,2140,1.891,2141,1.891,2142,1.891,2143,1.891,2144,1.891,2145,1.891,2146,1.891,2147,1.891,2148,1.891,2149,1.891,2150,1.891,2151,1.891,2152,1.891,2153,6.269,2154,5.647,2155,4.042,2156,1.891,2157,4.711,2158,1.664,2159,1.664,2160,1.891,2161,1.891,2162,1.891,2163,1.664,2164,3.147,2165,1.891,2166,1.891,2167,1.891,2168,1.891,2169,1.891,2170,3.147,2171,1.891]],["title/classes/ValidationException.html",[65,0.159,2172,3.219]],["body/classes/ValidationException.html",[3,0.137,4,0.124,5,0.087,8,0.42,9,1.45,15,3.305,18,1.27,19,0.653,35,1.207,36,0.01,37,0.932,38,0.587,39,0.932,57,0.175,58,0.668,61,2.146,64,0.178,65,0.186,71,1.738,73,2.143,83,0.007,84,0.007,93,0.867,165,1.829,233,2.216,261,1.373,369,2.37,457,1.698,679,3.765,944,2.874,1084,2.785,1147,4.094,1376,3.327,1381,5.372,1384,5.421,1386,3.526,1387,3.526,1389,5.554,1390,3.526,1391,5.02,1397,3.526,1405,3.526,1427,3.765,1428,3.765,1429,3.765,1430,3.765,1432,3.765,1433,3.765,1434,3.765,1436,4.884,2172,4.884,2173,3.526,2174,5.074,2175,5.074,2176,5.074,2177,3.765,2178,4.064,2179,4.465,2180,6.43,2181,4.465,2182,4.465,2183,4.465]],["title/interfaces/ValidationResponse.html",[61,1.835,1391,2.571]],["body/interfaces/ValidationResponse.html",[3,0.11,4,0.1,5,0.07,8,0.338,9,1.252,10,1.851,36,0.01,38,0.364,57,0.266,58,0.537,61,1.726,64,0.11,65,0.208,71,1.948,73,1.329,83,0.006,84,0.006,160,1.329,165,1.772,168,2.315,170,2.574,171,0.946,226,1.842,230,2.538,239,1.444,331,4.854,343,2.129,345,2.567,346,1.529,362,2.418,369,1.906,456,1.622,457,1.902,523,2.216,584,3.552,716,2.129,833,2.835,834,2.835,835,2.835,836,2.675,837,2.835,838,2.835,839,2.835,944,3.22,1100,3.536,1103,2.538,1104,3.536,1109,2.418,1136,2.418,1137,2.538,1138,2.538,1140,2.538,1141,2.675,1327,3.028,1373,3.028,1374,3.269,1376,2.675,1380,3.591,1381,5.353,1383,5.003,1384,4.218,1387,2.835,1389,3.727,1390,2.835,1391,3.877,1392,3.269,1393,3.028,1394,3.028,1395,3.591,1396,3.591,1397,2.835,1398,3.591,1399,3.591,1400,3.591,1401,3.591,1402,3.591,1403,3.591,1404,3.591,1405,4.546,1406,3.591,1407,3.591,1408,3.591,1409,3.591,1410,3.591,1411,3.591,1412,5.003,1413,3.591,1414,3.591,1415,3.591,1416,3.591,1417,3.591,1418,3.591,1419,3.591,1420,3.591,1421,3.591,1422,3.591,1423,3.591,1424,5.757,1425,3.591,1426,3.591,1427,3.028,1428,3.028,1429,3.028,1430,3.028,1431,5.757,1432,3.028,1433,3.028,1434,3.028,1435,3.591,1436,3.028,1437,3.591,1438,3.591,1439,3.591]],["title/interfaces/ValidationResponse-1.html",[56,1.691,61,1.531,1391,2.145]],["body/interfaces/ValidationResponse-1.html",[3,0.142,4,0.129,5,0.091,19,0.523,36,0.01,57,0.182,58,0.694,61,2.231,64,0.182,65,0.193,71,1.77,73,2.197,83,0.007,84,0.007,93,0.98,165,1.863,230,3.28,232,4.64,233,2.948,369,2.463,457,1.764,679,3.912,944,2.987,1084,2.231,1147,4.197,1376,3.457,1381,5.451,1384,5.007,1386,3.664,1387,3.664,1389,5.316,1390,3.664,1391,4.997,1397,3.664,1405,3.664,1427,3.912,1428,3.912,1429,3.912,1430,3.912,1432,3.912,1433,3.912,1434,3.912,1436,5.007,2172,3.912,2173,3.664,2177,3.912,2178,4.224,2179,4.64,2180,6.549,2181,4.64,2182,4.64,2183,4.64,2184,5.273]],["title/coverage.html",[2185,4.75]],["body/coverage.html",[0,1.467,1,1.809,5,0.042,6,3.1,7,3.1,31,0.97,33,1.35,36,0.01,38,0.489,47,1.809,61,2.819,65,0.315,73,0.794,83,0.004,84,0.004,85,2.831,86,1.517,88,3.343,91,1.445,105,1.18,113,1.139,119,1.101,144,2.491,145,1.694,147,2.871,151,0.794,155,0.863,161,1.599,183,1.065,211,1.809,217,2.689,221,1.599,229,1.272,231,4.387,240,1.599,246,1.599,251,3.854,260,1.517,262,2.146,263,1.809,264,2.146,272,1.445,276,1.445,287,1.445,293,1.445,300,1.599,304,1.224,322,1.953,324,3.1,330,1.381,344,1.101,349,1.953,350,1.139,377,1.694,378,1.694,384,2.293,397,2.146,410,1.599,518,3.854,536,1,537,2.146,559,1.517,566,1.809,570,1.809,571,2.146,578,1.517,602,1.694,616,1.599,626,1.517,659,2.146,670,2.328,677,1.599,679,2.871,710,3.1,734,1.065,735,2.146,739,1.599,788,1.809,789,2.146,798,1.517,818,1.694,825,1.599,866,2.146,869,1.445,871,1.381,884,1.809,927,3.806,928,3.806,944,5.159,948,3.1,949,3.916,966,3.1,967,3.57,988,1.517,989,3.1,990,3.57,1019,1.599,1020,2.146,1021,3.1,1030,1.599,1031,3.715,1032,2.146,1039,1.381,1040,3.57,1041,3.806,1083,1.445,1097,1.599,1098,1.517,1099,3.806,1111,1.517,1113,1.599,1119,1.599,1150,1.953,1151,2.146,1181,1.809,1214,2.146,1235,1.809,1236,2.146,1260,1.599,1290,2.146,1325,1.953,1326,2.146,1327,3.57,1347,2.146,1373,1.809,1374,3.1,1376,1.599,1391,2.293,1457,3.1,1470,2.146,1482,2.146,1488,1.953,1512,1.809,1513,2.146,1530,1.694,1534,1.599,1559,2.146,1612,2.146,1680,2.146,1692,2.146,1721,1.694,1722,3.1,1734,1.599,1744,1.694,1769,1.809,1770,2.146,1775,1.517,1783,2.146,1808,2.146,1890,1.953,1891,2.146,1892,2.146,1917,1.809,1918,2.146,1924,1.599,1927,1.809,1939,2.146,1963,2.146,1996,2.146,1998,2.146,2000,2.146,2002,2.146,2004,1.953,2005,2.146,2007,2.146,2008,2.146,2032,2.146,2042,1.809,2043,2.146,2049,1.599,2065,2.146,2102,2.146,2126,1.953,2172,1.809,2173,3.806,2177,1.809,2185,1.953,2186,1.953,2187,2.439,2188,2.439,2189,4.811,2190,7.876,2191,8.731,2192,2.146,2193,1.953,2194,4.811,2195,2.146,2196,2.146,2197,2.146,2198,2.146,2199,3.405,2200,7.687,2201,7.955,2202,6.663,2203,2.146,2204,2.146,2205,6.357,2206,4.811,2207,4.811,2208,4.811,2209,4.811,2210,2.439,2211,2.439,2212,5.594,2213,2.146,2214,2.146,2215,2.439,2216,2.439]],["title/dependencies.html",[180,2.281,2217,3.185]],["body/dependencies.html",[5,0.089,36,0.01,58,0.678,65,0.243,83,0.007,84,0.007,105,2.492,112,2.49,154,1.225,159,2.27,160,1.677,180,2.25,239,1.822,267,3.376,305,3.821,343,2.686,346,1.929,348,4.125,383,3.376,386,2.111,444,4.125,565,3.203,625,3.376,1067,3.578,1068,3.578,1180,4.125,1191,4.532,1230,4.532,1231,4.125,1358,5.894,1359,4.532,1471,4.125,1648,6.476,1649,4.532,1650,4.532,1652,4.532,1659,4.125,1709,4.532,1803,4.532,1804,4.125,1843,4.532,1844,4.532,2218,5.149,2219,7.358,2220,5.149,2221,5.149,2222,5.149,2223,5.149,2224,5.149,2225,5.149,2226,5.149,2227,5.149,2228,5.149,2229,5.149,2230,5.149,2231,5.149,2232,5.149,2233,5.149,2234,5.149,2235,5.149,2236,5.149,2237,5.149,2238,5.149,2239,5.149,2240,5.149,2241,5.149,2242,5.149,2243,5.149,2244,5.149,2245,5.149,2246,5.149,2247,5.149,2248,5.149,2249,5.149,2250,5.149,2251,5.149,2252,5.149,2253,5.149,2254,5.149,2255,5.149,2256,5.149,2257,5.149,2258,5.149,2259,5.149]],["title/miscellaneous/enumerations.html",[2260,2.145,2261,4.594]],["body/miscellaneous/enumerations.html",[8,0.493,33,1.644,36,0.01,53,3.919,59,2.983,83,0.008,84,0.008,88,4.133,92,4.312,116,5.055,117,5.398,118,5.398,119,3.285,1008,5.398,1322,5.828,1488,4.764,1509,6.403,1510,6.403,1511,6.403,2260,3.525,2261,5.234,2262,5.947,2263,5.947,2264,5.947,2265,5.947,2266,7.276,2267,7.276,2268,7.276]],["title/miscellaneous/functions.html",[2260,2.145,2269,4.594]],["body/miscellaneous/functions.html",[8,0.543,35,1.56,36,0.009,37,1.205,39,1.205,44,1.56,52,2.532,53,2.866,73,2.136,83,0.009,84,0.009,183,3.581,1376,5.059,1386,4.559,1387,5.362,1389,4.301,1390,4.559,1391,3.888,2173,4.559,2204,5.774,2260,3.888,2269,5.774,2270,6.561,2271,5.774]],["title/index.html",[8,0.3,2272,3.185,2273,3.185]],["body/index.html",[4,0.12,5,0.084,33,1.623,36,0.01,40,1.511,83,0.007,84,0.007,113,3.006,119,2.212,156,1.783,159,1.511,265,1.948,536,2.008,575,2.66,691,4.218,693,5.153,734,3.138,742,3.404,790,4.774,836,3.212,939,3.244,994,3.924,1086,3.047,1451,4.311,1471,3.924,1667,4.311,1695,7.156,1787,4.311,1804,3.924,1847,4.311,1848,5.754,1849,5.754,1855,4.311,2185,3.924,2186,5.153,2274,4.899,2275,4.899,2276,6.433,2277,4.899,2278,4.899,2279,4.899,2280,4.899,2281,6.433,2282,6.433,2283,4.899,2284,7.628,2285,7.628,2286,4.899,2287,6.433,2288,6.433,2289,4.899,2290,4.899,2291,6.433,2292,6.433,2293,4.899,2294,4.899,2295,4.899,2296,4.899,2297,4.899,2298,4.899,2299,4.899,2300,4.899,2301,4.899,2302,4.311,2303,4.899,2304,4.899,2305,4.311,2306,4.899,2307,6.433,2308,4.899,2309,4.899,2310,4.899,2311,4.899,2312,8.288,2313,4.899,2314,4.899,2315,6.433,2316,4.899,2317,4.899,2318,4.899,2319,4.899,2320,6.433,2321,6.433,2322,4.899,2323,4.899,2324,4.899,2325,4.899,2326,6.433,2327,4.899,2328,4.899,2329,4.899,2330,4.899,2331,4.899,2332,4.899,2333,3.635,2334,4.311,2335,4.899]],["title/license.html",[2272,3.185,2273,3.185,2333,2.685]],["body/license.html",[36,0.008,83,0.008,84,0.008,139,3.866,201,2.512,346,2.085,519,4.851,579,3.021,1093,6.46,1205,4.897,1688,4.897,2186,4.457,2333,4.129,2334,4.897,2336,7.629,2337,5.564,2338,5.564,2339,5.564,2340,6.981,2341,5.564,2342,5.564,2343,5.564,2344,5.564,2345,5.564,2346,5.564,2347,6.981,2348,5.564,2349,5.564,2350,7.629,2351,5.564,2352,6.981,2353,5.564,2354,5.564,2355,5.564,2356,5.564,2357,5.564,2358,5.564,2359,5.564,2360,5.564,2361,5.564,2362,6.981,2363,5.564,2364,5.564,2365,5.564,2366,5.564,2367,5.564,2368,5.564,2369,6.981,2370,6.981,2371,5.564,2372,5.564,2373,5.564,2374,5.564,2375,5.564,2376,5.564,2377,5.564,2378,5.564,2379,5.564,2380,5.564,2381,5.564,2382,5.564,2383,5.564,2384,5.564,2385,5.564,2386,5.564,2387,5.564,2388,5.564,2389,5.564,2390,5.564,2391,5.564,2392,5.564,2393,5.564,2394,5.564,2395,5.564,2396,5.564,2397,5.564,2398,5.564]],["title/modules.html",[179,2.431]],["body/modules.html",[36,0.008,83,0.008,84,0.008,177,3.619,178,4.317,179,2.385,187,4.043,188,4.043,189,4.043,190,4.043,191,4.043,192,4.043,193,3.815,194,4.043,195,4.043,196,4.043,197,4.043,198,3.815,1174,4.043,2302,7.874,2399,8.948,2400,8.948,2401,9.002,2402,7.178,2403,7.178]],["title/overview.html",[2404,5.219]],["body/overview.html",[2,1.288,36,0.01,56,1.606,83,0.006,84,0.006,87,1.793,146,1.182,151,2.666,152,0.883,161,3.899,176,1.501,177,4.674,178,6.547,179,1.409,180,1.501,181,1.606,182,1.606,183,1.501,184,1.606,185,3.024,186,3.024,187,5.795,188,5.354,189,5.354,190,5.055,191,4.132,192,4.839,193,4.927,194,5.462,195,4.839,196,5.795,197,5.551,198,5.422,199,2.349,200,1.552,201,1.552,221,4.927,230,2.138,261,0.93,300,4.927,322,2.753,330,4.453,373,3.024,375,3.024,376,3.024,377,4.132,378,4.132,410,4.927,464,2.388,616,4.927,652,3.024,653,3.024,654,3.024,825,4.927,857,3.024,858,3.024,859,3.024,869,4.453,871,4.365,1174,4.132,1210,3.024,1211,3.024,1260,4.927,1282,3.024,1283,3.024,1284,3.024,1534,3.899,1553,3.024,1554,3.024,1653,3.024,1654,3.024,1655,3.024,1775,4.674,1796,3.024,1797,3.024,1798,3.024,1924,3.899,1933,3.024,1934,3.024,1984,3.024,1985,3.024,1986,3.024,1987,3.024,2049,4.927,2059,3.024,2060,3.024,2061,3.024,2096,3.024,2097,3.024,2098,3.024,2404,3.024,2405,3.437,2406,3.437,2407,3.437,2408,3.437,2409,3.437]],["title/properties.html",[9,1.15,2217,3.185]],["body/properties.html",[9,1.51,36,0.01,40,2.116,83,0.009,84,0.009,613,5.089,2333,5.089,2410,6.858,2411,6.858,2412,6.858]],["title/classes/swaggerConfig.html",[65,0.159,2193,3.475]],["body/classes/swaggerConfig.html",[3,0.139,4,0.126,5,0.089,8,0.426,9,1.464,15,3.904,19,0.771,36,0.01,38,0.694,40,2.27,52,3,53,3.397,64,0.139,65,0.188,83,0.007,84,0.007,93,1.024,121,3.438,162,2.14,261,1.393,613,5.46,691,5.098,742,4.618,790,4.931,1613,7.717,1848,6.228,1849,6.602,1869,4.931,2192,4.532,2193,5.323,2413,7.358,2414,7.775,2415,6.646,2416,6.646,2417,6.646,2418,6.646,2419,5.149,2420,6.646,2421,6.646,2422,5.149,2423,5.149,2424,6.646,2425,5.149]],["title/miscellaneous/typealiases.html",[2260,2.145,2426,5.221]],["body/miscellaneous/typealiases.html",[8,0.554,36,0.009,38,0.737,83,0.009,84,0.009,155,2.761,324,5.357,350,3.646,580,4.625,1116,3.789,1457,5.357,2203,6.868,2260,3.963,2427,6.688,2428,6.688,2429,7.804]],["title/miscellaneous/variables.html",[2260,2.145,2430,4.594]],["body/miscellaneous/variables.html",[5,0.095,8,0.252,22,2.782,31,1.825,33,1.249,36,0.01,37,0.558,38,0.271,45,1.585,52,3.174,53,3.646,71,1.899,73,1.494,82,2.221,83,0.005,84,0.005,93,1.002,105,2.221,121,2.144,123,0.687,148,1.471,165,1.999,167,1.286,170,0.99,171,0.705,229,1.585,231,2.435,233,2.416,235,2.435,237,2.675,240,3.009,241,4.429,242,4.866,243,2.675,244,3.676,245,2.675,246,3.009,247,2.435,248,2.72,249,4.039,250,2.675,251,2.435,252,2.675,253,2.675,254,2.675,255,1.89,256,2.675,257,1.89,258,4.039,259,4.039,260,1.89,267,1.993,285,3.44,335,2.435,344,2.072,345,1.372,349,3.676,350,1.42,362,1.801,365,2.982,368,2.675,369,1.42,384,3.277,390,3.009,457,1.536,480,1.89,490,2.492,532,2.435,579,1.65,585,1.526,626,2.855,636,2.072,677,3.009,710,2.435,711,2.675,712,3.676,713,2.435,714,2.435,715,2.435,716,1.585,717,2.435,718,2.675,719,2.675,720,2.675,721,2.675,722,2.675,723,2.675,724,2.675,725,2.675,726,2.675,727,2.675,728,2.675,729,2.675,730,2.675,731,2.675,732,4.039,733,2.675,884,3.405,977,2.435,1136,1.801,1167,4.866,1381,2.112,1386,2.112,1389,1.993,1405,2.112,1450,4.039,1620,5.422,1673,5.422,1867,2.675,2126,3.676,2158,2.675,2159,4.039,2163,4.039,2173,2.112,2177,3.405,2178,2.435,2195,2.675,2196,4.039,2197,2.675,2198,4.039,2199,2.675,2212,2.675,2213,4.039,2214,4.039,2260,1.801,2271,2.675,2305,2.675,2430,2.675,2431,3.039,2432,5.53,2433,6.954,2434,3.039,2435,4.59,2436,3.039,2437,3.039,2438,3.039,2439,3.039,2440,3.039,2441,3.039,2442,3.039,2443,3.039,2444,3.039,2445,3.039,2446,3.039,2447,3.039,2448,3.039,2449,3.039,2450,3.039,2451,3.039,2452,3.039,2453,3.039,2454,4.59,2455,3.039,2456,4.59,2457,3.039,2458,4.59,2459,4.59,2460,3.039,2461,3.039,2462,3.039,2463,3.039,2464,3.039,2465,4.59,2466,3.039,2467,3.039,2468,4.59,2469,3.039,2470,3.039,2471,3.039,2472,3.039,2473,3.039,2474,3.039]]],"invertedIndex":[["",{"_index":36,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":944,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2410,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":1865,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["0.14.1",{"_index":2234,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1866,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["0.5.1",{"_index":2233,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2247,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2191,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2209,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2206,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2200,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2201,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2202,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2194,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2189,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2205,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2208,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2207,"title":{},"body":{"coverage.html":{}}}],["078888888",{"_index":933,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["1",{"_index":56,"title":{"classes/FilesDto-1.html":{},"interfaces/ValidationResponse-1.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateQuizDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusService.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.0.0",{"_index":2424,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["1.4.5",{"_index":2240,"title":{},"body":{"dependencies.html":{}}}],["1.9.4",{"_index":2242,"title":{},"body":{"dependencies.html":{}}}],["1/7",{"_index":2211,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":2219,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":2224,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":2222,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2221,"title":{},"body":{"dependencies.html":{}}}],["10.4.0",{"_index":2243,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrometheusMiddleware.html":{}}}],["1024",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":2406,"title":{},"body":{"overview.html":{}}}],["1234",{"_index":946,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["14",{"_index":2210,"title":{},"body":{"coverage.html":{}}}],["14d",{"_index":1631,"title":{},"body":{"classes/Logger.html":{}}}],["15",{"_index":2405,"title":{},"body":{"overview.html":{}}}],["15.1.3",{"_index":2253,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":784,"title":{},"body":{"entities/Course.html":{},"classes/CreateQuizDto.html":{},"injectables/PrometheusService.html":{}}}],["2.0.0",{"_index":2248,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":2218,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2232,"title":{},"body":{"dependencies.html":{}}}],["2.42.2",{"_index":2226,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2407,"title":{},"body":{"overview.html":{}}}],["200",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreateCourseDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"classes/FilesDto-1.html":{},"injectables/LessonsService.html":{}}}],["201",{"_index":690,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{}}}],["2024",{"_index":2337,"title":{},"body":{"license.html":{}}}],["20m",{"_index":1629,"title":{},"body":{"classes/Logger.html":{}}}],["250788888888",{"_index":1055,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["2})@isstring()@isnotempty",{"_index":768,"title":{},"body":{"entities/Course.html":{}}}],["3.13.0",{"_index":2258,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":2220,"title":{},"body":{"dependencies.html":{}}}],["3.4.4",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":719,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["32",{"_index":2408,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["4.0.4",{"_index":2244,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":2236,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"classes/CustomResponseInterceptor.html":{}}}],["401",{"_index":366,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["404",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["5",{"_index":1867,"title":{},"body":{"injectables/PrometheusService.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":2259,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2230,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["587",{"_index":731,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["6.0.2",{"_index":2229,"title":{},"body":{"dependencies.html":{}}}],["6.9.14",{"_index":2246,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["7",{"_index":2409,"title":{},"body":{"overview.html":{}}}],["7.1.0",{"_index":2238,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2223,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["8.11.5",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"overview.html":{}}}],["9.0.1",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["9.5.0",{"_index":2228,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["900000).tostring",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["9_]/g",{"_index":2161,"title":{},"body":{"injectables/UserService.html":{}}}],["_",{"_index":1394,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/LessonsController.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isarray(errors",{"_index":1425,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isarray(r.message",{"_index":1400,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isempty(errors",{"_index":1437,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isempty(validationerror.children",{"_index":1422,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.isstring(errors",{"_index":1438,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["_.snakecase(constraintkey",{"_index":1421,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["__dirname",{"_index":1198,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{}}}],["_accesstoken",{"_index":1356,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_refreshtoken",{"_index":1352,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_validationfilter",{"_index":1375,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["_validationfilter(validationerrors",{"_index":1380,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["above",{"_index":2368,"title":{},"body":{"license.html":{}}}],["acceptlanguageresolver",{"_index":1442,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["access_token",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesscontorlservice",{"_index":1,"title":{"injectables/AccessContorlService.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["accessible",{"_index":2332,"title":{},"body":{"index.html":{}}}],["action",{"_index":2393,"title":{},"body":{"license.html":{}}}],["active",{"_index":1868,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["active_users_total",{"_index":1872,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["activeusers",{"_index":1809,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["adapter",{"_index":1676,"title":{},"body":{"modules/MailModule.html":{}}}],["address",{"_index":1091,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["admin",{"_index":2266,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alias",{"_index":251,"title":{},"body":{"interfaces/AssociativeArray.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2427,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow_ip_domain",{"_index":1072,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["allow_utf8_local_part",{"_index":1043,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["allowed",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allowinfinity",{"_index":942,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["allownan",{"_index":941,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["allows",{"_index":25,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["already",{"_index":1307,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["and/or",{"_index":2360,"title":{},"body":{"license.html":{}}}],["andwhere('course.id",{"_index":1316,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["andwhere('course.slug",{"_index":1601,"title":{},"body":{"injectables/LessonsService.html":{}}}],["andwhere('lesson.status",{"_index":1594,"title":{},"body":{"injectables/LessonsService.html":{}}}],["answer",{"_index":141,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["answeroption",{"_index":86,"title":{"entities/AnswerOption.html":{}},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{}}}],["answeroptionrepository",{"_index":1942,"title":{},"body":{"injectables/QuizService.html":{}}}],["answerrepository",{"_index":1949,"title":{},"body":{"injectables/QuizService.html":{}}}],["api",{"_index":1849,"title":{},"body":{"injectables/PrometheusService.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["apiacceptedresponse",{"_index":620,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{}}}],["apibearerauth",{"_index":622,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin",{"_index":1248,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@apiquery({name",{"_index":2093,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@delete(':id",{"_index":2088,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@get(':id",{"_index":2086,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@roles(rolesenum.admin)@useguards(authguard)@patch(':id",{"_index":2090,"title":{},"body":{"controllers/UserController.html":{}}}],["apibearerauth()@useguards(authguard)@roles(rolesenum.admin",{"_index":581,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{}}}],["apibearerauth()@useguards(authguard)@roles(rolesenum.admin)@get()@apiquery({name",{"_index":2084,"title":{},"body":{"controllers/UserController.html":{}}}],["apiconsumes",{"_index":621,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apiconsumes('multipart/form",{"_index":633,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":1741,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":1730,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apiproperty",{"_index":935,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":999,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["apiproperty({enum",{"_index":1009,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["apiproperty({example",{"_index":950,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/ProfileDto.html":{}}}],["apiproperty({required",{"_index":1964,"title":{},"body":{"classes/ResponseDto.html":{}}}],["apiproperty({})@isarray()@isstring({each",{"_index":1034,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["apiquery",{"_index":623,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apiquery({name",{"_index":590,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["apitags('app",{"_index":173,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["apitags('auth",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":627,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('category')@apibearerauth()@useguards(authguard)@roles(rolesenum.admin)@delete(':id",{"_index":599,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('category')@apibearerauth()@useguards(authguard)@roles(rolesenum.admin)@patch(':id/status",{"_index":607,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('courses",{"_index":828,"title":{},"body":{"controllers/CoursesController.html":{}}}],["apitags('enrolls",{"_index":1262,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["apitags('lesson",{"_index":1537,"title":{},"body":{"controllers/LessonsController.html":{}}}],["apitags('profile",{"_index":1755,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apitags('quiz",{"_index":1928,"title":{},"body":{"controllers/QuizController.html":{}}}],["apitags('user",{"_index":2050,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["apitags('users",{"_index":1742,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["app",{"_index":1847,"title":{},"body":{"injectables/PrometheusService.html":{},"index.html":{}}}],["app_filter",{"_index":1989,"title":{},"body":{"modules/SharedModule.html":{}}}],["appcontroller",{"_index":145,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"coverage.html":{}}}],["application",{"_index":2414,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["application's",{"_index":2417,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["appmodule",{"_index":178,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":1333,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["argumentshost",{"_index":1104,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["arising",{"_index":2397,"title":{},"body":{"license.html":{}}}],["array",{"_index":41,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"interfaces/IsAuthorizedParams.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["article",{"_index":1511,"title":{},"body":{"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["asc",{"_index":1596,"title":{},"body":{"injectables/LessonsService.html":{}}}],["assessment",{"_index":2295,"title":{},"body":{"index.html":{}}}],["assign",{"_index":1750,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["associated",{"_index":2348,"title":{},"body":{"license.html":{}}}],["associativearray",{"_index":229,"title":{"interfaces/AssociativeArray.html":{}},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":325,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/PrometheusController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":260,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"interfaces/Config.html":{},"modules/MailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":380,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.dto.ts",{"_index":928,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["auth.dto.ts:14",{"_index":934,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.dto.ts:23",{"_index":931,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.dto.ts:34",{"_index":1346,"title":{},"body":{"classes/ForgetPasswordDto.html":{}}}],["auth.dto.ts:52",{"_index":1691,"title":{},"body":{"classes/OTPDto.html":{}}}],["auth.dto.ts:63",{"_index":1962,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["auth.dto.ts:72",{"_index":1961,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["auth.service",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":263,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticatemiddleware",{"_index":330,"title":{"injectables/AuthenticateMiddleware.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["authentication",{"_index":2285,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":304,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authheader",{"_index":527,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["authheader.split",{"_index":530,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["authmiddleware",{"_index":329,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authmodule",{"_index":187,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2412,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":2386,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":300,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":2115,"title":{},"body":{"injectables/UserService.html":{}}}],["authuser.sub",{"_index":2165,"title":{},"body":{"injectables/UserService.html":{}}}],["authuser?.sub",{"_index":2169,"title":{},"body":{"injectables/UserService.html":{}}}],["authusertype",{"_index":350,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["auto",{"_index":2310,"title":{},"body":{"index.html":{}}}],["available",{"_index":2403,"title":{},"body":{"modules.html":{}}}],["await",{"_index":354,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"controllers/PrometheusController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["b",{"_index":143,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["backend",{"_index":2279,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1384,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["base",{"_index":242,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":2306,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash('password",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":2134,"title":{},"body":{"injectables/UserService.html":{}}}],["bcryptjs",{"_index":2231,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":529,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["better",{"_index":2299,"title":{},"body":{"index.html":{}}}],["between",{"_index":28,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["bidirectional",{"_index":127,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["binary",{"_index":964,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["binary'})@isoptional",{"_index":995,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["binary'})@isstring({message",{"_index":957,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/ProfileDto.html":{}}}],["bio",{"_index":1095,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["body",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/FileRequestFilter.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"entities/Enroll.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["boolean'})@isoptional",{"_index":1001,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["boolean'})@isoptional({message",{"_index":973,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["boolean})@put('change",{"_index":794,"title":{},"body":{"controllers/CoursesController.html":{}}}],["bootstrap",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2401,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2399,"title":{},"body":{"modules.html":{}}}],["buckets",{"_index":1864,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["buildroles",{"_index":14,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["buildroles(roles",{"_index":21,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["built",{"_index":2275,"title":{},"body":{"index.html":{}}}],["c",{"_index":139,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"license.html":{}}}],["callbackurl",{"_index":715,"title":{},"body":{"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["callhandler",{"_index":1155,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["canactivate",{"_index":326,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":334,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cascade",{"_index":102,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["catch",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{}}}],["catch(badrequestexception",{"_index":1396,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["catch(exception",{"_index":1103,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["catch(queryfailederror",{"_index":1897,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["catcherror",{"_index":1158,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["catcherror((err",{"_index":1166,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["categories",{"_index":693,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserCategoryService.html":{},"index.html":{}}}],["category",{"_index":536,"title":{"entities/Category.html":{}},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{},"index.html":{}}}],["category'})@isstring({message",{"_index":951,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.controller",{"_index":656,"title":{},"body":{"modules/CategoryModule.html":{},"modules/UserCategoryModule.html":{}}}],["category.controller.ts",{"_index":2043,"title":{},"body":{"controllers/UserCategoryController.html":{},"coverage.html":{}}}],["category.controller.ts:26",{"_index":2045,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["category.controller.ts:38",{"_index":2047,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["category.controller.ts:45",{"_index":2048,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["category.dto",{"_index":618,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{}}}],["category.dto.ts",{"_index":949,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/FilesDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:21",{"_index":960,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:25",{"_index":1035,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["category.dto.ts:37",{"_index":953,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:55",{"_index":959,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:59",{"_index":1344,"title":{},"body":{"classes/FilesDto.html":{}}}],["category.entity",{"_index":567,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["category.entity.ts",{"_index":2032,"title":{},"body":{"entities/UserCategory.html":{},"coverage.html":{}}}],["category.entity.ts:19",{"_index":2037,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:22",{"_index":2040,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:25",{"_index":2034,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:28",{"_index":2035,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:31",{"_index":2038,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.entity.ts:34",{"_index":2036,"title":{},"body":{"entities/UserCategory.html":{}}}],["category.icon_url",{"_index":702,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.id",{"_index":747,"title":{},"body":{"entities/Course.html":{}}}],["category.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["category.module.ts",{"_index":2062,"title":{},"body":{"modules/UserCategoryModule.html":{}}}],["category.service",{"_index":617,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{}}}],["category.service.ts",{"_index":2065,"title":{},"body":{"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["category.service.ts:14",{"_index":2067,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.service.ts:25",{"_index":2070,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.service.ts:76",{"_index":2072,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.service.ts:99",{"_index":2074,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["category.status",{"_index":708,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.usercategories",{"_index":2033,"title":{},"body":{"entities/UserCategory.html":{}}}],["category/dto/create",{"_index":1032,"title":{},"body":{"classes/CreateUserCategoryDto.html":{},"coverage.html":{}}}],["category/dto/update",{"_index":2005,"title":{},"body":{"classes/UpdateUserCategoryDto.html":{},"coverage.html":{}}}],["category/entities/category.entity",{"_index":864,"title":{},"body":{"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["category/entities/user",{"_index":566,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"coverage.html":{}}}],["category/user",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["category_id",{"_index":968,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["categorycontroller",{"_index":570,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryexist",{"_index":661,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryexist(name",{"_index":666,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryid",{"_index":1033,"title":{},"body":{"classes/CreateUserCategoryDto.html":{},"injectables/UserCategoryService.html":{}}}],["categorymodule",{"_index":188,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryrepository",{"_index":665,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["categoryservice",{"_index":616,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["cb",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb(new",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb(null",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changestatus",{"_index":662,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["changestatus(@param('slug",{"_index":854,"title":{},"body":{"controllers/CoursesController.html":{}}}],["changestatus(id",{"_index":668,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["changestatus(slug",{"_index":792,"title":{},"body":{"controllers/CoursesController.html":{}}}],["changestatuscourse",{"_index":1238,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["changestatuscourse(@user",{"_index":1280,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["changestatuscourse(user",{"_index":1243,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["charge",{"_index":2344,"title":{},"body":{"license.html":{}}}],["checkemailexists",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkemailexists(email",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkphoneexists",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkphoneexists(phone",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["claim",{"_index":2389,"title":{},"body":{"license.html":{}}}],["class",{"_index":65,"title":{"classes/Auth.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"classes/Logger.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/QueryFailedFilter.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"classes/ValidationException.html":{},"classes/swaggerConfig.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"classes/swaggerConfig.html":{}}}],["classes",{"_index":261,"title":{},"body":{"classes/Auth.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"classes/Logger.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/QueryFailedFilter.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"classes/ValidationException.html":{},"overview.html":{},"classes/swaggerConfig.html":{}}}],["client",{"_index":1843,"title":{},"body":{"injectables/PrometheusService.html":{},"dependencies.html":{}}}],["client.collectdefaultmetrics",{"_index":1850,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["client.counter",{"_index":1836,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["client.gauge",{"_index":1834,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["client.histogram",{"_index":1838,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["client.registry",{"_index":1841,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["clientid",{"_index":713,"title":{},"body":{"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":714,"title":{},"body":{"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":373,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":375,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":374,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":376,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":652,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_exports",{"_index":653,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":654,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_coursesmodule",{"_index":857,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_coursesmodule_exports",{"_index":858,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_coursesmodule_imports",{"_index":860,"title":{},"body":{"modules/CoursesModule.html":{}}}],["cluster_coursesmodule_providers",{"_index":859,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_defaultmodule",{"_index":1210,"title":{},"body":{"modules/DefaultModule.html":{},"overview.html":{}}}],["cluster_defaultmodule_providers",{"_index":1211,"title":{},"body":{"modules/DefaultModule.html":{},"overview.html":{}}}],["cluster_enrollsmodule",{"_index":1282,"title":{},"body":{"modules/EnrollsModule.html":{},"overview.html":{}}}],["cluster_enrollsmodule_exports",{"_index":1284,"title":{},"body":{"modules/EnrollsModule.html":{},"overview.html":{}}}],["cluster_enrollsmodule_providers",{"_index":1283,"title":{},"body":{"modules/EnrollsModule.html":{},"overview.html":{}}}],["cluster_lessonsmodule",{"_index":1553,"title":{},"body":{"modules/LessonsModule.html":{},"overview.html":{}}}],["cluster_lessonsmodule_providers",{"_index":1554,"title":{},"body":{"modules/LessonsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1653,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1654,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1655,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_prometheusmodule",{"_index":1796,"title":{},"body":{"modules/PrometheusModule.html":{},"overview.html":{}}}],["cluster_prometheusmodule_exports",{"_index":1798,"title":{},"body":{"modules/PrometheusModule.html":{},"overview.html":{}}}],["cluster_prometheusmodule_providers",{"_index":1797,"title":{},"body":{"modules/PrometheusModule.html":{},"overview.html":{}}}],["cluster_quizmodule",{"_index":1933,"title":{},"body":{"modules/QuizModule.html":{},"overview.html":{}}}],["cluster_quizmodule_providers",{"_index":1934,"title":{},"body":{"modules/QuizModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":1984,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":1985,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_imports",{"_index":1987,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_providers",{"_index":1986,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_usercategorymodule",{"_index":2059,"title":{},"body":{"modules/UserCategoryModule.html":{},"overview.html":{}}}],["cluster_usercategorymodule_exports",{"_index":2060,"title":{},"body":{"modules/UserCategoryModule.html":{},"overview.html":{}}}],["cluster_usercategorymodule_providers",{"_index":2061,"title":{},"body":{"modules/UserCategoryModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2096,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2098,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2097,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":97,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{}}}],["column('decimal",{"_index":765,"title":{},"body":{"entities/Course.html":{}}}],["column()@isstring()@isnotempty",{"_index":554,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/User.html":{}}}],["column()@isstring()@isnotempty()@minlength(6)@exclude",{"_index":2019,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":1223,"title":{},"body":{"entities/Enroll.html":{}}}],["column({nullable",{"_index":549,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{}}}],["column({type",{"_index":751,"title":{},"body":{"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{}}}],["complete",{"_index":2278,"title":{},"body":{"index.html":{}}}],["completions",{"_index":1878,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["comprehensive",{"_index":2274,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2367,"title":{},"body":{"license.html":{}}}],["config",{"_index":384,"title":{"interfaces/Config.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/Config.html":{},"modules/DbModule.html":{},"injectables/GoogleStrategy.html":{},"modules/MailModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config().google.callbackurl",{"_index":1363,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config().google.clientid",{"_index":1361,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config().google.clientsecret",{"_index":1362,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config().mail.auth.pass",{"_index":1669,"title":{},"body":{"modules/MailModule.html":{}}}],["config().mail.auth.user",{"_index":1668,"title":{},"body":{"modules/MailModule.html":{}}}],["config().mail.from",{"_index":1671,"title":{},"body":{"modules/MailModule.html":{}}}],["config().mail.host",{"_index":1666,"title":{},"body":{"modules/MailModule.html":{}}}],["config().secret",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":1178,"title":{},"body":{"modules/DbModule.html":{}}}],["configmodule.forroot",{"_index":1182,"title":{},"body":{"modules/DbModule.html":{}}}],["configs",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"modules/SharedModule.html":{}}}],["configs/config",{"_index":1663,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice",{"_index":1179,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{}}}],["configservice.get('db_database",{"_index":1197,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_host",{"_index":1192,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_password",{"_index":1195,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_port",{"_index":1193,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_synchronize",{"_index":1201,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('db_username",{"_index":1194,"title":{},"body":{"modules/DbModule.html":{}}}],["configservice.get('i18n_logging",{"_index":1454,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["configservice.get('i18n_watch",{"_index":1452,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["configservice.getorthrow('fallback_language",{"_index":1448,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["configure",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmpassword",{"_index":947,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["connect",{"_index":1209,"title":{},"body":{"modules/DbModule.html":{}}}],["connected",{"_index":1207,"title":{},"body":{"modules/DbModule.html":{}}}],["connection",{"_index":1205,"title":{},"body":{"modules/DbModule.html":{},"license.html":{}}}],["connecttodatabase",{"_index":1176,"title":{},"body":{"modules/DbModule.html":{}}}],["const",{"_index":71,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"interfaces/AssociativeArray.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":1412,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["constraintkey",{"_index":1411,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{}}}],["constructor(@inject('file_request",{"_index":1336,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["constructor(@inject(request",{"_index":1124,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["constructor(categoryrepository",{"_index":663,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(courserepository",{"_index":868,"title":{},"body":{"injectables/CoursesService.html":{}}}],["constructor(enrollrepository",{"_index":1295,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["constructor(errors",{"_index":2174,"title":{},"body":{"classes/ValidationException.html":{}}}],["constructor(filerequest",{"_index":1329,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["constructor(i18nservice",{"_index":1483,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["constructor(jwtservice",{"_index":520,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{}}}],["constructor(lessonrepository",{"_index":1561,"title":{},"body":{"injectables/LessonsService.html":{}}}],["constructor(mailerservice",{"_index":1682,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(partial",{"_index":1233,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["constructor(private",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/MailService.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"controllers/QuizController.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["constructor(prometheusservice",{"_index":1784,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["constructor(public",{"_index":1397,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["constructor(quizrepository",{"_index":1940,"title":{},"body":{"injectables/QuizService.html":{}}}],["constructor(reflector",{"_index":1377,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(req",{"_index":1698,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["constructor(request",{"_index":1981,"title":{},"body":{"injectables/ResponseService.html":{}}}],["constructor(responseservice",{"_index":1101,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/DefaultService.html":{}}}],["constructor(responseservices",{"_index":328,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(usercategoryrepository",{"_index":2066,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["constructor(userrepository",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["consumer",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(languagemiddleware).forroutes",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(prometheusmiddleware).forroutes",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":42,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["content",{"_index":994,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"index.html":{}}}],["content_url",{"_index":991,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"controllers/LessonsController.html":{}}}],["contentmetadata",{"_index":992,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{}}}],["contenturl",{"_index":1489,"title":{},"body":{"entities/Lesson.html":{},"injectables/LessonsService.html":{}}}],["context",{"_index":337,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":361,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":360,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":356,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":357,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{}}}],["continue",{"_index":258,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":2394,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":2327,"title":{},"body":{"index.html":{}}}],["control.service.ts",{"_index":7,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["control.service.ts:11",{"_index":54,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:12",{"_index":20,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:24",{"_index":23,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:33",{"_index":50,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["control.service.ts:49",{"_index":48,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["controller",{"_index":144,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":628,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('courses",{"_index":829,"title":{},"body":{"controllers/CoursesController.html":{}}}],["controller('enrolls",{"_index":1263,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["controller('lessons",{"_index":1538,"title":{},"body":{"controllers/LessonsController.html":{}}}],["controller('metrics",{"_index":1777,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["controller('profile",{"_index":1756,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["controller('quiz",{"_index":1929,"title":{},"body":{"controllers/QuizController.html":{}}}],["controller('user",{"_index":2052,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["controller('users",{"_index":1743,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["controllers",{"_index":146,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convert",{"_index":1415,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["cookieresolver",{"_index":1445,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["copies",{"_index":2362,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2347,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2336,"title":{},"body":{"license.html":{}}}],["correctanswers",{"_index":137,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["count",{"_index":1833,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["counter",{"_index":1852,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["course",{"_index":734,"title":{"entities/Course.html":{}},"body":{"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"entities/Enroll.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"injectables/PrometheusService.html":{},"coverage.html":{},"index.html":{}}}],["course')@apibearerauth()@useguards(authguard)@roles(rolesenum.admin",{"_index":810,"title":{},"body":{"controllers/CoursesController.html":{}}}],["course'})@isstring()@isnotempty({message",{"_index":969,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto",{"_index":827,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/UpdateCourseDto.html":{}}}],["course.dto.ts",{"_index":967,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["course.dto.ts:104",{"_index":970,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:108",{"_index":1345,"title":{},"body":{"classes/FilesDto-1.html":{}}}],["course.dto.ts:17",{"_index":979,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:29",{"_index":972,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:41",{"_index":976,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:53",{"_index":971,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:64",{"_index":975,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:82",{"_index":978,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.dto.ts:92",{"_index":974,"title":{},"body":{"classes/CreateCourseDto.html":{}}}],["course.featured",{"_index":920,"title":{},"body":{"injectables/CoursesService.html":{}}}],["course.id",{"_index":1217,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["course.isfree",{"_index":918,"title":{},"body":{"injectables/CoursesService.html":{}}}],["course.thumbnail",{"_index":914,"title":{},"body":{"injectables/CoursesService.html":{}}}],["course_enrollments_total",{"_index":1876,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["course_id",{"_index":1877,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["course_slug",{"_index":1522,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["courseenrollments",{"_index":1810,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["courseexist",{"_index":867,"title":{},"body":{"injectables/CoursesService.html":{}}}],["courseexist(title",{"_index":875,"title":{},"body":{"injectables/CoursesService.html":{}}}],["courseid",{"_index":1244,"title":{},"body":{"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PrometheusService.html":{}}}],["coursepagination",{"_index":870,"title":{},"body":{"injectables/CoursesService.html":{}}}],["courserepository",{"_index":873,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["courses",{"_index":790,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["courses.controller",{"_index":862,"title":{},"body":{"modules/CoursesModule.html":{}}}],["courses.service",{"_index":826,"title":{},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{}}}],["courses/entities/course.entity",{"_index":1288,"title":{},"body":{"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{}}}],["coursescontroller",{"_index":788,"title":{"controllers/CoursesController.html":{}},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"coverage.html":{}}}],["coursesmodule",{"_index":189,"title":{"modules/CoursesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"modules.html":{},"overview.html":{}}}],["coursesquery",{"_index":904,"title":{},"body":{"injectables/CoursesService.html":{}}}],["coursesservice",{"_index":825,"title":{"injectables/CoursesService.html":{}},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":2185,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["create(createauthdto",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["create(createcategorydto",{"_index":577,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createcoursedto",{"_index":797,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["create(createlessondto",{"_index":1515,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["create(createusercategorydto",{"_index":2044,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["create(createuserdto",{"_index":2082,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(undefined",{"_index":2069,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["createauthdto",{"_index":272,"title":{"classes/CreateAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":578,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.description",{"_index":685,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto.name.tolowercase",{"_index":684,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto})@useinterceptors(undefined",{"_index":587,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcoursedto",{"_index":798,"title":{"classes/CreateCourseDto.html":{}},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["createcoursedto.category_id",{"_index":890,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto.featured",{"_index":900,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto.isfree",{"_index":899,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto.price.tostring",{"_index":898,"title":{},"body":{"injectables/CoursesService.html":{}}}],["createcoursedto})@useinterceptors(undefined",{"_index":800,"title":{},"body":{"controllers/CoursesController.html":{}}}],["created",{"_index":586,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{}}}],["created_at",{"_index":538,"title":{},"body":{"entities/Category.html":{},"entities/Enroll.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["createdat",{"_index":129,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["createdatecolumn",{"_index":107,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["createdatecolumn({type",{"_index":544,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/UserCategory.html":{}}}],["createlessondto",{"_index":988,"title":{"classes/CreateLessonDto.html":{}},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["createlessondto})@useinterceptors(undefined",{"_index":1516,"title":{},"body":{"controllers/LessonsController.html":{}}}],["createparamdecorator",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1580,"title":{},"body":{"injectables/LessonsService.html":{}}}],["createquerybuilder('users",{"_index":2138,"title":{},"body":{"injectables/UserService.html":{}}}],["createquiz",{"_index":1919,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{}}}],["createquiz(createquizdto",{"_index":1920,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{}}}],["createquizdto",{"_index":1019,"title":{"classes/CreateQuizDto.html":{}},"body":{"classes/CreateQuizDto.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["createquizdto.description",{"_index":1954,"title":{},"body":{"injectables/QuizService.html":{}}}],["createquizdto.questions.map((question",{"_index":1950,"title":{},"body":{"injectables/QuizService.html":{}}}],["createquizdto.title",{"_index":1953,"title":{},"body":{"injectables/QuizService.html":{}}}],["createusercategorydto",{"_index":1030,"title":{"classes/CreateUserCategoryDto.html":{}},"body":{"classes/CreateUserCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":1039,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["creating",{"_index":26,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/QuizService.html":{}}}],["creator",{"_index":736,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{}}}],["ctx",{"_index":1136,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":1139,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["ctx.getresponse",{"_index":1138,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currency",{"_index":737,"title":{},"body":{"entities/Course.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["current_timestamp",{"_index":1219,"title":{},"body":{"entities/Enroll.html":{}}}],["currently",{"_index":1873,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["currentrole",{"_index":62,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["customexceptionfilter",{"_index":1098,"title":{"classes/CustomExceptionFilter.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["customresponseinterceptor",{"_index":1150,"title":{"classes/CustomResponseInterceptor.html":{}},"body":{"classes/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["d",{"_index":1028,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["daily",{"_index":1649,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["damages",{"_index":2390,"title":{},"body":{"license.html":{}}}],["data",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"injectables/QuizService.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["data')@apiacceptedresponse({description",{"_index":583,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{}}}],["data')@useinterceptors(undefined",{"_index":1532,"title":{},"body":{"controllers/LessonsController.html":{}}}],["data')@useinterceptors(undefined)@apibearerauth()@patch(':id",{"_index":604,"title":{},"body":{"controllers/CategoryController.html":{}}}],["data')@useinterceptors(undefined)@apioperation({summary",{"_index":1736,"title":{},"body":{"controllers/ProfileController.html":{}}}],["database",{"_index":1196,"title":{},"body":{"modules/DbModule.html":{}}}],["databasename",{"_index":1203,"title":{},"body":{"modules/DbModule.html":{}}}],["datasource",{"_index":1563,"title":{},"body":{"injectables/LessonsService.html":{}}}],["date",{"_index":130,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["date(date.now()).toisostring",{"_index":1135,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["date.now",{"_index":1118,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/ResponseService.html":{}}}],["date.now()}.${ext",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datepattern",{"_index":1623,"title":{},"body":{"classes/Logger.html":{}}}],["dbmodule",{"_index":1174,"title":{"modules/DbModule.html":{}},"body":{"modules/DbModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["dd",{"_index":1626,"title":{},"body":{"classes/Logger.html":{}}}],["deal",{"_index":2349,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2398,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1636,"title":{},"body":{"classes/Logger.html":{}}}],["declarations",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":535,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["decoded",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.exps",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":94,"title":{},"body":{"entities/AnswerOption.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"classes/ForgetPasswordDto.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":52,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/Category.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"injectables/PaginateHelper.html":{},"entities/User.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["defaultmetrics",{"_index":1806,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["defaultmodule",{"_index":177,"title":{"modules/DefaultModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules.html":{},"overview.html":{}}}],["defaults",{"_index":1670,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultservice",{"_index":161,"title":{"injectables/DefaultService.html":{}},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"coverage.html":{},"overview.html":{}}}],["defaultvaluepipe",{"_index":823,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":841,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["defaultvaluepipe(10",{"_index":843,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["deferrable",{"_index":772,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["deferred",{"_index":774,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{}}}],["delete",{"_index":610,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":646,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":924,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["deleted_at",{"_index":539,"title":{},"body":{"entities/Category.html":{},"entities/Enroll.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["deletedat",{"_index":738,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["deletedatecolumn",{"_index":562,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["deletedatecolumn({type",{"_index":547,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["delivery",{"_index":2294,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":180,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":2150,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":40,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{},"classes/swaggerConfig.html":{}}}],["destination",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":2314,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1673,"title":{},"body":{"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":834,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["diskstorage",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distination",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":2358,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":2186,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doe",{"_index":1046,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["done",{"_index":1353,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":1372,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto/create",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":619,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["duration",{"_index":1789,"title":{},"body":{"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{}}}],["e",{"_index":691,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/PrometheusService.html":{},"injectables/UserCategoryService.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["e.g",{"_index":142,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["e2e",{"_index":2322,"title":{},"body":{"index.html":{}}}],["each",{"_index":1037,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["education",{"_index":2282,"title":{},"body":{"index.html":{}}}],["ejsadapter",{"_index":1678,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["emailexists",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["emailexists(email",{"_index":2107,"title":{},"body":{"injectables/UserService.html":{}}}],["emailregex",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailregex.test(username",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["emails",{"_index":1364,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":1366,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["enabled",{"_index":1807,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["engineer",{"_index":1094,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["enroll",{"_index":739,"title":{"entities/Enroll.html":{}},"body":{"entities/Course.html":{},"entities/Enroll.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"coverage.html":{}}}],["enroll.id",{"_index":757,"title":{},"body":{"entities/Course.html":{}}}],["enroll.status",{"_index":1320,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["enrollcourse",{"_index":1239,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["enrollcourse(@user",{"_index":1273,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["enrollcourse(user",{"_index":1247,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["enrolled",{"_index":1308,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["enrollments",{"_index":1874,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["enrollrepository",{"_index":1297,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["enrolls",{"_index":1237,"title":{},"body":{"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{}}}],["enrolls.controller",{"_index":1286,"title":{},"body":{"modules/EnrollsModule.html":{}}}],["enrolls.service",{"_index":1261,"title":{},"body":{"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{}}}],["enrollscontroller",{"_index":1235,"title":{"controllers/EnrollsController.html":{}},"body":{"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"coverage.html":{}}}],["enrollsmodule",{"_index":190,"title":{"modules/EnrollsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EnrollsModule.html":{},"modules.html":{},"overview.html":{}}}],["enrollsservice",{"_index":1260,"title":{"injectables/EnrollsService.html":{}},"body":{"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"coverage.html":{},"overview.html":{}}}],["entities",{"_index":87,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"modules/DbModule.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":657,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["entities/course.entity",{"_index":863,"title":{},"body":{"modules/CoursesModule.html":{},"injectables/CoursesService.html":{}}}],["entities/enroll.entity",{"_index":1287,"title":{},"body":{"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{}}}],["entities/lesson.entity",{"_index":1014,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{}}}],["entities/quiz.entity",{"_index":1025,"title":{},"body":{"classes/CreateQuizDto.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{}}}],["entities/user",{"_index":2063,"title":{},"body":{"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["entities/user.entity",{"_index":2101,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":85,"title":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"coverage.html":{}}}],["entity('categories",{"_index":568,"title":{},"body":{"entities/Category.html":{}}}],["entity('courses",{"_index":782,"title":{},"body":{"entities/Course.html":{}}}],["entity('enrolles",{"_index":1232,"title":{},"body":{"entities/Enroll.html":{}}}],["entity('user_categories",{"_index":2041,"title":{},"body":{"entities/UserCategory.html":{}}}],["entity('users",{"_index":2030,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":1199,"title":{},"body":{"modules/DbModule.html":{}}}],["enum",{"_index":115,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{},"controllers/ProfileController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["enumerations",{"_index":2261,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":60,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"controllers/EnrollsController.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["env",{"_index":1186,"title":{},"body":{"modules/DbModule.html":{}}}],["env.development",{"_index":1187,"title":{},"body":{"modules/DbModule.html":{}}}],["env.production",{"_index":1188,"title":{},"body":{"modules/DbModule.html":{}}}],["envfilepath",{"_index":1185,"title":{},"body":{"modules/DbModule.html":{}}}],["err",{"_index":1167,"title":{},"body":{"classes/CustomResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["err.getstatus",{"_index":1168,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["err.message",{"_index":1169,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["err.name",{"_index":1172,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["errmsg",{"_index":1424,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["errmsg['error",{"_index":1439,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["errmsg[error.property",{"_index":1431,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["error",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["error('file",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error('my",{"_index":1764,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["error('only",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error).message",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["error.children",{"_index":1433,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["error.children.length",{"_index":1434,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["error.constraints",{"_index":1430,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["error.fields",{"_index":1420,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["error.fields.{key",{"_index":1416,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["error.log",{"_index":1622,"title":{},"body":{"classes/Logger.html":{}}}],["errormessage",{"_index":1589,"title":{},"body":{"injectables/LessonsService.html":{}}}],["errormsg",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["errorresponse",{"_index":1147,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["errorresponse[error.property",{"_index":2180,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["errors",{"_index":1389,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["errors.foreach((error",{"_index":1427,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["errors.length",{"_index":1426,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["eslint",{"_index":833,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["eslint/no",{"_index":837,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["eur",{"_index":786,"title":{},"body":{"entities/Course.html":{}}}],["evaluation",{"_index":2297,"title":{},"body":{"index.html":{}}}],["event",{"_index":2385,"title":{},"body":{"license.html":{}}}],["exact",{"_index":140,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["example",{"_index":939,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"index.html":{}}}],["example@example.com",{"_index":932,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{}}}],["exception",{"_index":1106,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{}}}],["exception.constraint",{"_index":1898,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint.startswith('uq",{"_index":1899,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.getresponse",{"_index":1399,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["exception.getstatus",{"_index":1141,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["exception.message",{"_index":1144,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{}}}],["exceptionfilter",{"_index":1100,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["exclude",{"_index":1543,"title":{},"body":{"controllers/LessonsController.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["exclude()@apiproperty({required",{"_index":1966,"title":{},"body":{"classes/ResponseDto.html":{}}}],["execute",{"_index":1582,"title":{},"body":{"injectables/LessonsService.html":{}}}],["executioncontext",{"_index":335,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":706,"title":{},"body":{"injectables/CategoryService.html":{}}}],["exists",{"_index":2157,"title":{},"body":{"injectables/UserService.html":{}}}],["existuser",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["existuser.id",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["existuser?.name",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["existuserenrolled",{"_index":1305,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["exp",{"_index":534,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["expiresin",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":64,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{}}}],["exports",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":346,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":636,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["express.request",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exps",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["ext",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":1084,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"classes/ProfileDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["extractjwt",{"_index":1475,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1477,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fabrice",{"_index":2339,"title":{},"body":{"license.html":{}}}],["fail.filter.ts",{"_index":1892,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["fail.filter.ts:13",{"_index":1893,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fail.filter.ts:14",{"_index":1894,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["fail.filter.ts:16",{"_index":1895,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed",{"_index":909,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/PrometheusService.html":{},"injectables/UserCategoryService.html":{}}}],["fallbacklanguage",{"_index":1447,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["false",{"_index":364,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{}}}],["false})@isstring()@isnotempty",{"_index":755,"title":{},"body":{"entities/Course.html":{}}}],["featured",{"_index":740,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["features",{"_index":2289,"title":{},"body":{"index.html":{}}}],["featuring",{"_index":2283,"title":{},"body":{"index.html":{}}}],["feedback",{"_index":2328,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":910,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["fetched",{"_index":908,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|gif",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split('.')[0",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split('.')[1",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.size",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file[0",{"_index":1341,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["filefieldsinterceptor",{"_index":624,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["filename",{"_index":1620,"title":{},"body":{"classes/Logger.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filerequest",{"_index":1331,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["filerequestfilter",{"_index":1325,"title":{"injectables/FileRequestFilter.html":{}},"body":{"injectables/FileRequestFilter.html":{},"coverage.html":{}}}],["files",{"_index":579,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["files.content_url",{"_index":1603,"title":{},"body":{"injectables/LessonsService.html":{}}}],["files.icon_url",{"_index":698,"title":{},"body":{"injectables/CategoryService.html":{}}}],["files.icon_url[0]?.filename",{"_index":686,"title":{},"body":{"injectables/CategoryService.html":{}}}],["files.thumbnail",{"_index":1605,"title":{},"body":{"injectables/LessonsService.html":{}}}],["files.thumbnail_url",{"_index":913,"title":{},"body":{"injectables/CoursesService.html":{}}}],["files.thumbnail_url[0]?.filename",{"_index":894,"title":{},"body":{"injectables/CoursesService.html":{}}}],["filesdto",{"_index":670,"title":{"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{}},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"injectables/LessonsService.html":{},"coverage.html":{}}}],["filter",{"_index":592,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["filteredfilters",{"_index":1542,"title":{},"body":{"controllers/LessonsController.html":{}}}],["filterquerybuilderfromrequest",{"_index":246,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterquerybuilderfromrequest(coursesquery",{"_index":906,"title":{},"body":{"injectables/CoursesService.html":{}}}],["filterquerybuilderfromrequest(lessonquery",{"_index":1597,"title":{},"body":{"injectables/LessonsService.html":{}}}],["filterquerybuilderfromrequest(q",{"_index":2151,"title":{},"body":{"injectables/UserService.html":{}}}],["filters",{"_index":248,"title":{},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["filters[key",{"_index":253,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["findall",{"_index":572,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@param('slug",{"_index":1541,"title":{},"body":{"controllers/LessonsController.html":{}}}],["findall(@query('status",{"_index":638,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(@user",{"_index":2054,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["findall(filter",{"_index":672,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["findall(filters",{"_index":2109,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(page",{"_index":802,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UserController.html":{}}}],["findall(slug",{"_index":1518,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["findall(status",{"_index":589,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findall(undefined",{"_index":2071,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["findall(user",{"_index":2046,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["findmycourse",{"_index":791,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["findmycourse(@user",{"_index":845,"title":{},"body":{"controllers/CoursesController.html":{}}}],["findmycourse(user",{"_index":808,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["findone",{"_index":573,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":640,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["findone(@param('lesson_slug",{"_index":1548,"title":{},"body":{"controllers/LessonsController.html":{}}}],["findone(@param('slug",{"_index":847,"title":{},"body":{"controllers/CoursesController.html":{}}}],["findone(id",{"_index":595,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(lesson_slug",{"_index":1521,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["findone(slug",{"_index":812,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["findoneinstructor",{"_index":1514,"title":{},"body":{"controllers/LessonsController.html":{}}}],["findoneinstructor(course_slug",{"_index":1526,"title":{},"body":{"controllers/LessonsController.html":{}}}],["first",{"_index":1765,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["firstname",{"_index":1367,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["fitness",{"_index":2381,"title":{},"body":{"license.html":{}}}],["following",{"_index":2366,"title":{},"body":{"license.html":{}}}],["forgetpassword",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(@body",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(forgetpassworddto",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassworddto",{"_index":276,"title":{"classes/ForgetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["forgot",{"_index":1689,"title":{},"body":{"injectables/MailService.html":{}}}],["forgotpassword",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassword(passworddto",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["format",{"_index":956,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/Logger.html":{},"classes/ProfileDto.html":{}}}],["format.colorize",{"_index":1642,"title":{},"body":{"classes/Logger.html":{}}}],["format.combine",{"_index":1637,"title":{},"body":{"classes/Logger.html":{}}}],["format.combine(format.timestamp",{"_index":1616,"title":{},"body":{"classes/Logger.html":{}}}],["format.errors",{"_index":1639,"title":{},"body":{"classes/Logger.html":{}}}],["format.json",{"_index":1617,"title":{},"body":{"classes/Logger.html":{}}}],["format.printf",{"_index":1643,"title":{},"body":{"classes/Logger.html":{}}}],["format.splat",{"_index":1641,"title":{},"body":{"classes/Logger.html":{}}}],["format.timestamp",{"_index":1638,"title":{},"body":{"classes/Logger.html":{}}}],["formaterrors",{"_index":1376,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["formaterrors(error.children",{"_index":2182,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["formaterrors(errors",{"_index":1386,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["formattederrors",{"_index":1405,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["formatusername",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["formatusername(name",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["found",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserService.html":{}}}],["founduser",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser.id",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser.password",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser.role",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["free",{"_index":2343,"title":{},"body":{"license.html":{}}}],["fs.existssync(distination",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.existssync(filepath",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.mkdirsync(distination",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.unlink(filepath",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":679,"title":{},"body":{"injectables/CategoryService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["functions",{"_index":2269,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2365,"title":{},"body":{"license.html":{}}}],["g",{"_index":2159,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["gauge",{"_index":1870,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["generated",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["generateslug",{"_index":884,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateslug(createcoursedto.title",{"_index":888,"title":{},"body":{"injectables/CoursesService.html":{}}}],["generateslug(createlessondto.title",{"_index":1586,"title":{},"body":{"injectables/LessonsService.html":{}}}],["get('/debug",{"_index":1726,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["get('/google",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google')@useguards(undefined",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback')@useguards(undefined",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':course_slug/instructor",{"_index":1545,"title":{},"body":{"controllers/LessonsController.html":{}}}],["get(':id",{"_index":596,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["get(':lesson_slug/:course_slug",{"_index":1523,"title":{},"body":{"controllers/LessonsController.html":{}}}],["get(':slug",{"_index":813,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{}}}],["get(':slug')@apiquery({name",{"_index":1519,"title":{},"body":{"controllers/LessonsController.html":{}}}],["get('courses",{"_index":1265,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["get('instructor",{"_index":1269,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["get('my",{"_index":809,"title":{},"body":{"controllers/CoursesController.html":{}}}],["get()@apiquery({name",{"_index":803,"title":{},"body":{"controllers/CoursesController.html":{}}}],["getalllessonbyinstructionn",{"_index":1560,"title":{},"body":{"injectables/LessonsService.html":{}}}],["getalllessonbyinstructionn(slug",{"_index":1571,"title":{},"body":{"injectables/LessonsService.html":{}}}],["geterror",{"_index":1723,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["getfilename",{"_index":2213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfilename(file",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gethello",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["getinstructorenrollscourses",{"_index":1240,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getinstructorenrollscourses(@user",{"_index":1270,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getinstructorenrollscourses(user",{"_index":1251,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getlimit",{"_index":1693,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["getmany",{"_index":1321,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["getmetrics",{"_index":1772,"title":{},"body":{"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{}}}],["getmetrics(@res",{"_index":1778,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["getmetrics(res",{"_index":1773,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["getone",{"_index":1317,"title":{},"body":{"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["getpage",{"_index":1694,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["getprofile",{"_index":1724,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/UserService.html":{}}}],["getprofile(@user",{"_index":1759,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["getprofile(authuser",{"_index":2113,"title":{},"body":{"injectables/UserService.html":{}}}],["getprofile(user",{"_index":1729,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getrole",{"_index":16,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["getrole(undefined",{"_index":46,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["getstudentenrollscourses",{"_index":1241,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getstudentenrollscourses(@user",{"_index":1266,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getstudentenrollscourses(user",{"_index":1254,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["getting",{"_index":2272,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuploadpath",{"_index":2126,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuploadpath(user.profile_picture",{"_index":2171,"title":{},"body":{"injectables/UserService.html":{}}}],["global",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{},"modules/I18nConfigModule.html":{},"modules/PrometheusModule.html":{},"modules/SharedModule.html":{}}}],["google",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["googlecallback",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlecallback(@req",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlecallback(req",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":377,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":2342,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2402,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":322,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":323,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["guest",{"_index":2267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["handlebars",{"_index":2235,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1660,"title":{},"body":{"modules/MailModule.html":{}}}],["handleexceptions",{"_index":1632,"title":{},"body":{"classes/Logger.html":{}}}],["hashedpassword",{"_index":2133,"title":{},"body":{"injectables/UserService.html":{}}}],["headerresolver",{"_index":1444,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["headerresolver(['x",{"_index":1459,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["helmet",{"_index":2237,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1855,"title":{},"body":{"injectables/PrometheusService.html":{},"index.html":{}}}],["helper",{"_index":1883,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["hereby",{"_index":2341,"title":{},"body":{"license.html":{}}}],["hierarchies",{"_index":11,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy",{"_index":27,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(currentrole",{"_index":79,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.get(requiredrole",{"_index":81,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["hierarchy.set(role",{"_index":75,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["histogram",{"_index":1860,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["holders",{"_index":2387,"title":{},"body":{"license.html":{}}}],["host",{"_index":716,"title":{},"body":{"interfaces/Config.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"modules/MailModule.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1137,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["http",{"_index":1393,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["http://localhost:3000/auth/google/callback",{"_index":724,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["http_request_duration_seconds",{"_index":1862,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["http_requests_total",{"_index":1854,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["httpexception",{"_index":1110,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["httpexception(errorresponse",{"_index":1173,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["httpexceptionfilter",{"_index":1373,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{}}}],["httprequestduration",{"_index":1811,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["httprequeststotal",{"_index":1812,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["https://example.com/icon.png",{"_index":954,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["httpstatus",{"_index":1109,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["httpstatus.conflict",{"_index":1900,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":1142,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{}}}],["httpstatus.ok",{"_index":1114,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["httpstatus.unprocessable_entity",{"_index":1402,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["i18n",{"_index":160,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/ImagePicDto.html":{},"injectables/LanguageMiddleware.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{}}}],["i18nconfigmodule",{"_index":191,"title":{"modules/I18nConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/I18nConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["i18ncontext",{"_index":157,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/UserService.html":{}}}],["i18ncontext.current().lang",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/UserService.html":{}}}],["i18nmodule",{"_index":1441,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["i18nmodule.forrootasync",{"_index":1446,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["i18npath",{"_index":2203,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["i18nservice",{"_index":158,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/LanguageMiddleware.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["i18ntranslations",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["i18nvalidationmessage",{"_index":937,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iat",{"_index":533,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["icon",{"_index":955,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["icon_url",{"_index":540,"title":{},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["id",{"_index":89,"title":{},"body":{"entities/AnswerOption.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto-1.html":{},"injectables/JwtStrategy.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":2187,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1478,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":977,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"miscellaneous/variables.html":{}}}],["imagepicdto",{"_index":1097,"title":{"classes/ImagePicDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["imageprofile",{"_index":2119,"title":{},"body":{"injectables/UserService.html":{}}}],["imageprofile?.profile_picture[0]?.filename",{"_index":2168,"title":{},"body":{"injectables/UserService.html":{}}}],["images",{"_index":893,"title":{},"body":{"injectables/CoursesService.html":{}}}],["implements",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PrometheusMiddleware.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["implied",{"_index":2377,"title":{},"body":{"license.html":{}}}],["import",{"_index":57,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["imports",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}}}],["improve",{"_index":2330,"title":{},"body":{"index.html":{}}}],["included",{"_index":2371,"title":{},"body":{"license.html":{}}}],["including",{"_index":2352,"title":{},"body":{"license.html":{}}}],["increment",{"_index":1884,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["incrementcourseenrollments",{"_index":1815,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["incrementcourseenrollments(courseid",{"_index":1822,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["incrementhttprequests",{"_index":1816,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["incrementhttprequests(method",{"_index":1824,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["incrementquizcompletions",{"_index":1817,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["incrementquizcompletions(quizid",{"_index":1826,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":232,"title":{},"body":{"interfaces/AssociativeArray.html":{},"interfaces/ValidationResponse-1.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{}}}],["info.level",{"_index":1645,"title":{},"body":{"classes/Logger.html":{}}}],["info.log",{"_index":1634,"title":{},"body":{"classes/Logger.html":{}}}],["info.message",{"_index":1646,"title":{},"body":{"classes/Logger.html":{}}}],["info.timestamp",{"_index":1644,"title":{},"body":{"classes/Logger.html":{}}}],["initially",{"_index":773,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["inject",{"_index":1108,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"injectables/FileRequestFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessContorlService.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["injectrepository(answer",{"_index":1948,"title":{},"body":{"injectables/QuizService.html":{}}}],["injectrepository(answeroption",{"_index":1947,"title":{},"body":{"injectables/QuizService.html":{}}}],["injectrepository(category",{"_index":678,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["injectrepository(course",{"_index":887,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["injectrepository(enroll",{"_index":1303,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["injectrepository(lesson",{"_index":1575,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["injectrepository(question",{"_index":1946,"title":{},"body":{"injectables/QuizService.html":{}}}],["injectrepository(quiz",{"_index":1576,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["injectrepository(user",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EnrollsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["injectrepository(usercategory",{"_index":2075,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["installation",{"_index":2311,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2313,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1140,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{}}}],["instructor",{"_index":1322,"title":{},"body":{"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"miscellaneous/enumerations.html":{}}}],["instructor.sub",{"_index":1323,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["instructorgetenrollscourses",{"_index":1291,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["int",{"_index":1499,"title":{},"body":{"entities/Lesson.html":{}}}],["integrated",{"_index":2308,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2296,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1153,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["intercept(context",{"_index":1154,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["interface",{"_index":61,"title":{"interfaces/AssociativeArray.html":{},"interfaces/Config.html":{},"interfaces/IsAuthorizedParams.html":{},"interfaces/Request.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IsAuthorizedParams.html":{},"interfaces/Request.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["interfaces",{"_index":230,"title":{},"body":{"interfaces/AssociativeArray.html":{},"interfaces/Config.html":{},"interfaces/IsAuthorizedParams.html":{},"interfaces/Request.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"overview.html":{}}}],["internal",{"_index":1170,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["irequest",{"_index":1119,"title":{"classes/IRequest.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["iresponsedata",{"_index":1113,"title":{"classes/IResponseData.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["isarray",{"_index":1036,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["isauthorized",{"_index":17,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["isauthorized(undefined",{"_index":49,"title":{},"body":{"injectables/AccessContorlService.html":{}}}],["isauthorizedparams",{"_index":47,"title":{"interfaces/IsAuthorizedParams.html":{}},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["isboolean",{"_index":1980,"title":{},"body":{"classes/ResponseDto.html":{}}}],["iscorrect",{"_index":1027,"title":{},"body":{"classes/CreateQuizDto.html":{},"injectables/QuizService.html":{}}}],["isemail",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["isemail(username",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemailexists",{"_index":2127,"title":{},"body":{"injectables/UserService.html":{}}}],["isenum",{"_index":1012,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["isenum(lessontype",{"_index":1017,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["isfree",{"_index":741,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["isglobal",{"_index":1183,"title":{},"body":{"modules/DbModule.html":{}}}],["isin",{"_index":238,"title":{},"body":{"interfaces/AssociativeArray.html":{}}}],["isin(key",{"_index":254,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["isnotempty",{"_index":563,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["isnumber",{"_index":936,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{}}}],["isnumber({allownan",{"_index":1690,"title":{},"body":{"classes/OTPDto.html":{}}}],["isoptional",{"_index":961,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/ResponseDto.html":{}}}],["ispasswordmatch",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["isphonenumber('rw",{"_index":1075,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["ispublished",{"_index":993,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["isstring",{"_index":564,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{}}}],["isstring()@isnotempty({message",{"_index":1051,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring({message",{"_index":929,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["isusernameexists",{"_index":2129,"title":{},"body":{"injectables/UserService.html":{}}}],["items",{"_index":805,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["iurl",{"_index":1712,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["iurl.searchparams.get('limit",{"_index":1715,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["iurl.searchparams.get('page",{"_index":1717,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["john",{"_index":1018,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["john_doe",{"_index":1060,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["johndoe",{"_index":1050,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["join",{"_index":1662,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":1674,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":1227,"title":{},"body":{"entities/Enroll.html":{}}}],["jointable",{"_index":1228,"title":{},"body":{"entities/Enroll.html":{}}}],["json",{"_index":1633,"title":{},"body":{"classes/Logger.html":{}}}],["jsonb",{"_index":1491,"title":{},"body":{"entities/Lesson.html":{}}}],["jwt",{"_index":1471,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":1476,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"modules/UserModule.html":{}}}],["jwtstrategy",{"_index":378,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":233,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["keys",{"_index":249,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["kigali",{"_index":1089,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["kind",{"_index":2376,"title":{},"body":{"license.html":{}}}],["label",{"_index":90,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["labelnames",{"_index":1857,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["lang",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules/I18nConfigModule.html":{},"injectables/LanguageMiddleware.html":{},"injectables/UserService.html":{}}}],["languagemiddleware",{"_index":211,"title":{"injectables/LanguageMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["large",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":1369,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["learning",{"_index":1848,"title":{},"body":{"injectables/PrometheusService.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["leason",{"_index":1004,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["leftjoinandselect('course.creator",{"_index":1599,"title":{},"body":{"injectables/LessonsService.html":{}}}],["leftjoinandselect('enroll.course",{"_index":1314,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["leftjoinandselect('lesson.course",{"_index":1592,"title":{},"body":{"injectables/LessonsService.html":{}}}],["legend",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["lesson",{"_index":113,"title":{"entities/Lesson.html":{}},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{},"index.html":{}}}],["lesson.contenturl",{"_index":1609,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson.dto",{"_index":1536,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateLessonDto.html":{}}}],["lesson.dto.ts",{"_index":990,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["lesson.dto.ts:14",{"_index":1007,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:19",{"_index":1000,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:26",{"_index":1011,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:34",{"_index":998,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:40",{"_index":1002,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:50",{"_index":996,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:59",{"_index":1003,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["lesson.dto.ts:63",{"_index":1342,"title":{},"body":{"classes/FilesDTO.html":{}}}],["lesson.dto.ts:64",{"_index":1343,"title":{},"body":{"classes/FilesDTO.html":{}}}],["lesson.id",{"_index":763,"title":{},"body":{"entities/Course.html":{}}}],["lesson.quiz",{"_index":126,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["lesson.thumbnail",{"_index":1610,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson/${files.content_url[0]?.filename",{"_index":1584,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson/${files.thumbnail[0]?.filename",{"_index":1585,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lesson_slug",{"_index":1525,"title":{},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["lessonid",{"_index":1921,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{}}}],["lessonquery",{"_index":1590,"title":{},"body":{"injectables/LessonsService.html":{}}}],["lessonrepository",{"_index":1566,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["lessons",{"_index":742,"title":{},"body":{"entities/Course.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["lessons.controller",{"_index":1556,"title":{},"body":{"modules/LessonsModule.html":{}}}],["lessons.service",{"_index":1535,"title":{},"body":{"controllers/LessonsController.html":{},"modules/LessonsModule.html":{}}}],["lessons/entities/lesson.entity",{"_index":1937,"title":{},"body":{"modules/QuizModule.html":{},"injectables/QuizService.html":{}}}],["lessonscontroller",{"_index":1512,"title":{"controllers/LessonsController.html":{}},"body":{"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"coverage.html":{}}}],["lessonsmodule",{"_index":192,"title":{"modules/LessonsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LessonsModule.html":{},"modules.html":{},"overview.html":{}}}],["lessonsservice",{"_index":1534,"title":{"injectables/LessonsService.html":{}},"body":{"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"coverage.html":{},"overview.html":{}}}],["lessontype",{"_index":1008,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["lessontype.pdf",{"_index":1016,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["level",{"_index":1615,"title":{},"body":{"classes/Logger.html":{}}}],["liability",{"_index":2391,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2388,"title":{},"body":{"license.html":{}}}],["lib",{"_index":1711,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["license",{"_index":2333,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2335,"title":{},"body":{"index.html":{}}}],["limit",{"_index":255,"title":{},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["limitation",{"_index":2353,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2378,"title":{},"body":{"license.html":{}}}],["line",{"_index":835,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["link",{"_index":241,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["link.charat(0",{"_index":245,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":43,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["listed",{"_index":1015,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/FilesDTO.html":{}}}],["listed'})@isstring()@isnotempty({message",{"_index":1006,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["literal",{"_index":580,"title":{},"body":{"controllers/CategoryController.html":{},"interfaces/Config.html":{},"controllers/CoursesController.html":{},"classes/CreateQuizDto.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"injectables/UserCategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":1184,"title":{},"body":{"modules/DbModule.html":{}}}],["loaderoptions",{"_index":1449,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["lodash",{"_index":1395,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["logger",{"_index":1181,"title":{"classes/Logger.html":{}},"body":{"modules/DbModule.html":{},"classes/Logger.html":{},"coverage.html":{}}}],["logger.logger.error(`failed",{"_index":1208,"title":{},"body":{"modules/DbModule.html":{}}}],["logger.logger.log(`database",{"_index":1206,"title":{},"body":{"modules/DbModule.html":{}}}],["logging",{"_index":1453,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["login",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithgoogle",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logoutdecorator",{"_index":2198,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logs/%date",{"_index":1621,"title":{},"body":{"classes/Logger.html":{}}}],["lts.1",{"_index":2241,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":711,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["mail.service",{"_index":1657,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule",{"_index":1658,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forroot",{"_index":1664,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1683,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":193,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mails/mail.module",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["mails/mail.service",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailservice",{"_index":410,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["make",{"_index":2331,"title":{},"body":{"index.html":{}}}],["manage",{"_index":2416,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["management",{"_index":2284,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1578,"title":{},"body":{"injectables/LessonsService.html":{}}}],["manager.getrepository(lesson",{"_index":1579,"title":{},"body":{"injectables/LessonsService.html":{}}}],["manager.save(lesson",{"_index":1588,"title":{},"body":{"injectables/LessonsService.html":{}}}],["manytoone",{"_index":108,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/UserCategory.html":{}}}],["manytoone(undefined",{"_index":99,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Question.html":{},"entities/UserCategory.html":{}}}],["map",{"_index":72,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CustomResponseInterceptor.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["map((data",{"_index":1162,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["matches",{"_index":1064,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["matches(/^[a",{"_index":1081,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["matching",{"_index":84,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchroles",{"_index":327,"title":{},"body":{"guards/AuthGuard.html":{}}}],["matchroles(roles",{"_index":339,"title":{},"body":{"guards/AuthGuard.html":{}}}],["materials",{"_index":2303,"title":{},"body":{"index.html":{}}}],["math.floor(100000",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.floor(date.now",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["math.random",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxcount",{"_index":634,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["maxdecimalplaces",{"_index":943,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["maxfiles",{"_index":1630,"title":{},"body":{"classes/Logger.html":{}}}],["maxlength",{"_index":1062,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["maxlength(50",{"_index":1071,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["maxsize",{"_index":1628,"title":{},"body":{"classes/Logger.html":{}}}],["mcqs",{"_index":138,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["media",{"_index":2304,"title":{},"body":{"index.html":{}}}],["mentor",{"_index":2268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["merchantability",{"_index":2380,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2356,"title":{},"body":{"license.html":{}}}],["message",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/LessonsService.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1231,"title":{},"body":{"entities/Enroll.html":{},"injectables/FileRequestFilter.html":{},"dependencies.html":{}}}],["metadata.data",{"_index":1338,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["metadata.type",{"_index":1337,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["method",{"_index":24,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["metrics",{"_index":1771,"title":{},"body":{"controllers/PrometheusController.html":{},"injectables/PrometheusService.html":{}}}],["middlewareconsumer",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewares",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}}}],["minlength",{"_index":1063,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["minlength(6",{"_index":1079,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["miscellaneous",{"_index":2260,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2334,"title":{},"body":{"index.html":{},"license.html":{}}}],["mm",{"_index":1625,"title":{},"body":{"classes/Logger.html":{}}}],["mode",{"_index":2315,"title":{},"body":{"index.html":{}}}],["modify",{"_index":2355,"title":{},"body":{"license.html":{}}}],["module",{"_index":152,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthenticateMiddleware.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"interfaces/Request.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":179,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/I18nConfigModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/category/category.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/category/entities/category.entity",{"_index":780,"title":{},"body":{"entities/Course.html":{},"entities/UserCategory.html":{}}}],["modules/courses/courses.module",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/courses/entities/course.entity",{"_index":1229,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["modules/enrolls/enrolls.module",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/enrolls/entities/enroll.entity",{"_index":781,"title":{},"body":{"entities/Course.html":{}}}],["modules/lessons/entities/lesson.entity",{"_index":114,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["modules/lessons/lessons.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":1659,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":1661,"title":{},"body":{"modules/MailModule.html":{}}}],["modules/mails/mail.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/prometheus",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/quiz/entities/quiz.entity",{"_index":1508,"title":{},"body":{"entities/Lesson.html":{}}}],["modules/quiz/quiz.module",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"entities/Category.html":{},"entities/User.html":{}}}],["modules/user/entities/user.entity",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/UserCategory.html":{}}}],["monitoring",{"_index":2307,"title":{},"body":{"index.html":{}}}],["more",{"_index":2288,"title":{},"body":{"index.html":{}}}],["multer",{"_index":2239,"title":{},"body":{"dependencies.html":{}}}],["multiple_choice",{"_index":118,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"miscellaneous/enumerations.html":{}}}],["name",{"_index":37,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImagePicDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":1370,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":1368,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.tolowercase",{"_index":707,"title":{},"body":{"injectables/CategoryService.html":{}}}],["navigation",{"_index":2300,"title":{},"body":{"index.html":{}}}],["ndacyayisenga",{"_index":2338,"title":{},"body":{"license.html":{}}}],["nest",{"_index":1652,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["nested",{"_index":2181,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["nestinterceptor",{"_index":1152,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["nestjs",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"modules/I18nConfigModule.html":{},"classes/ImagePicDto.html":{},"injectables/LanguageMiddleware.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":1180,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":343,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1067,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":625,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"controllers/LessonsController.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":526,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PrometheusMiddleware.html":{},"interfaces/Request.html":{}}}],["nestmodule",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":73,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CoursesController.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":523,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"controllers/CoursesController.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LanguageMiddleware.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusMiddleware.html":{},"interfaces/Request.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["next.handle().pipe",{"_index":1161,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["nextfunction",{"_index":524,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PrometheusMiddleware.html":{},"interfaces/Request.html":{}}}],["nodemailer",{"_index":2245,"title":{},"body":{"dependencies.html":{}}}],["noninfringement",{"_index":2384,"title":{},"body":{"license.html":{}}}],["notice",{"_index":2369,"title":{},"body":{"license.html":{}}}],["null",{"_index":365,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":122,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["number",{"_index":55,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"controllers/CoursesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/ForgetPasswordDto.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/PrometheusService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{}}}],["number'})@apiquery({name",{"_index":804,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/UserController.html":{}}}],["number(decoded.otp",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth20",{"_index":1359,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object.entries",{"_index":1413,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["object.keys(filters",{"_index":250,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["object.values(error.constraints",{"_index":1432,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["observable",{"_index":347,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{}}}],["observehttpduration",{"_index":1818,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["observehttpduration(method",{"_index":1829,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["obtaining",{"_index":2346,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":1146,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["offset",{"_index":256,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["ondelete",{"_index":101,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["one",{"_index":34,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["onetomany",{"_index":109,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["onetomany(undefined",{"_index":1905,"title":{},"body":{"entities/Question.html":{},"entities/Quiz.html":{}}}],["onetoone",{"_index":110,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["onetoone(undefined",{"_index":746,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{},"entities/Quiz.html":{}}}],["online",{"_index":2281,"title":{},"body":{"index.html":{}}}],["open",{"_index":2325,"title":{},"body":{"index.html":{}}}],["option",{"_index":133,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["option.question",{"_index":134,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["optional",{"_index":39,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":135,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"modules/I18nConfigModule.html":{},"modules/MailModule.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["orderby('lesson.position",{"_index":1595,"title":{},"body":{"injectables/LessonsService.html":{}}}],["orderby('users.created_at",{"_index":2149,"title":{},"body":{"injectables/UserService.html":{}}}],["organization",{"_index":2298,"title":{},"body":{"index.html":{}}}],["organize",{"_index":2291,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":2396,"title":{},"body":{"license.html":{}}}],["otp",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["otp.otp",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["otp/:token",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["otpdto",{"_index":293,"title":{"classes/OTPDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["out",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2404,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2217,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":257,"title":{},"body":{"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["paginate",{"_index":1709,"title":{},"body":{"injectables/PaginateHelper.html":{},"dependencies.html":{}}}],["paginate(query",{"_index":1718,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["paginatehelper",{"_index":871,"title":{"injectables/PaginateHelper.html":{}},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["pagination",{"_index":1564,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{}}}],["paginationtype",{"_index":1719,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["paginationtypeenum",{"_index":1710,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["paginationtypeenum.take_and_skip",{"_index":1720,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["param",{"_index":70,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["param('course_slug",{"_index":1546,"title":{},"body":{"controllers/LessonsController.html":{}}}],["param('courseid",{"_index":1274,"title":{},"body":{"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{}}}],["param('id",{"_index":644,"title":{},"body":{"controllers/CategoryController.html":{}}}],["param('lessonid",{"_index":1931,"title":{},"body":{"controllers/QuizController.html":{}}}],["param('slug",{"_index":850,"title":{},"body":{"controllers/CoursesController.html":{}}}],["param('token",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":35,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.mail_port",{"_index":730,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["parseint(process.env.port",{"_index":718,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["parseintpipe",{"_index":824,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["parseuuidpipe",{"_index":615,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/LessonsController.html":{}}}],["partial",{"_index":1234,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["partialtype",{"_index":1066,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/ResponseService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1997,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createcoursedto",{"_index":1999,"title":{},"body":{"classes/UpdateCourseDto.html":{}}}],["partialtype(createlessondto",{"_index":2001,"title":{},"body":{"classes/UpdateLessonDto.html":{}}}],["partialtype(createquizdto",{"_index":2003,"title":{},"body":{"classes/UpdateQuizDto.html":{}}}],["partialtype(createusercategorydto",{"_index":2006,"title":{},"body":{"classes/UpdateUserCategoryDto.html":{}}}],["partialtype(createuserdto",{"_index":1085,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(iresponsedata",{"_index":1120,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["particular",{"_index":2382,"title":{},"body":{"license.html":{}}}],["pass",{"_index":717,"title":{},"body":{"interfaces/Config.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["passed",{"_index":1827,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["passport",{"_index":1358,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1357,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1348,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["password/:token",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["passworddto",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":609,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserController.html":{}}}],["patch('/:courseid/status",{"_index":1279,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["patch(':id",{"_index":643,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["patch(':id/status",{"_index":649,"title":{},"body":{"controllers/CategoryController.html":{}}}],["patch(':slug",{"_index":849,"title":{},"body":{"controllers/CoursesController.html":{}}}],["patch('profile",{"_index":1761,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["patch('profile')@apiconsumes('multipart/form",{"_index":1735,"title":{},"body":{"controllers/ProfileController.html":{}}}],["path",{"_index":1116,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"modules/MailModule.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"miscellaneous/typealiases.html":{}}}],["path.join",{"_index":1456,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["path.join(__dirname",{"_index":1450,"title":{},"body":{"modules/I18nConfigModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserCategoryController.html":{}}}],["payload.role",{"_index":1481,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1480,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1510,"title":{},"body":{"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["per",{"_index":806,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["performance",{"_index":2309,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2340,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2363,"title":{},"body":{"license.html":{}}}],["person",{"_index":2345,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2364,"title":{},"body":{"license.html":{}}}],["pg",{"_index":2250,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["phoneexists",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos",{"_index":1365,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":1371,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":1087,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["pipetransform",{"_index":1335,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["platform",{"_index":2276,"title":{},"body":{"index.html":{}}}],["port",{"_index":712,"title":{},"body":{"interfaces/Config.html":{},"modules/DbModule.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":2373,"title":{},"body":{"license.html":{}}}],["position",{"_index":1490,"title":{},"body":{"entities/Lesson.html":{},"injectables/LessonsService.html":{}}}],["post",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["post('/:courseid",{"_index":1272,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["post('/forget",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/reset",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/verify",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':lessonid",{"_index":1930,"title":{},"body":{"controllers/QuizController.html":{}}}],["postgres",{"_index":1191,"title":{},"body":{"modules/DbModule.html":{},"dependencies.html":{}}}],["precision",{"_index":766,"title":{},"body":{"entities/Course.html":{}}}],["prefix",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"interfaces/Config.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["price",{"_index":743,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["primarycolumn",{"_index":95,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["priority",{"_index":12,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"interfaces/ValidationResponse.html":{}}}],["privileged",{"_index":32,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["process.env.backend_domain",{"_index":243,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["process.env.backend_domain}/uploads/${filename",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.google_callback_url",{"_index":723,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.google_client_id",{"_index":721,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.google_client_secret",{"_index":722,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":720,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_from",{"_index":733,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_host",{"_index":725,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_pass",{"_index":728,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.mail_user",{"_index":727,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.prefix",{"_index":244,"title":{},"body":{"interfaces/AssociativeArray.html":{},"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":2317,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1086,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/UserController.html":{},"index.html":{}}}],["profile'})@apibearerauth()@roles(rolesenum.all)@useguards(authguard)@get",{"_index":1731,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile_picture",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profilecontroller",{"_index":1721,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["profiledto",{"_index":1083,"title":{"classes/ProfileDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["project",{"_index":2326,"title":{},"body":{"index.html":{}}}],["prom",{"_index":1844,"title":{},"body":{"injectables/PrometheusService.html":{},"dependencies.html":{}}}],["prometheus",{"_index":1804,"title":{},"body":{"modules/PrometheusModule.html":{},"dependencies.html":{},"index.html":{}}}],["prometheus.controller",{"_index":1800,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheus.middleware",{"_index":1801,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheus.service",{"_index":1776,"title":{},"body":{"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{}}}],["prometheuscontroller",{"_index":1769,"title":{"controllers/PrometheusController.html":{}},"body":{"controllers/PrometheusController.html":{},"modules/PrometheusModule.html":{},"coverage.html":{}}}],["prometheusmiddleware",{"_index":221,"title":{"injectables/PrometheusMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"coverage.html":{},"overview.html":{}}}],["prometheusmodule",{"_index":194,"title":{"modules/PrometheusModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrometheusModule.html":{},"modules.html":{},"overview.html":{}}}],["prometheusmodules",{"_index":1802,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheusmodules.register",{"_index":1805,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["prometheusservice",{"_index":1775,"title":{"injectables/PrometheusService.html":{}},"body":{"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":338,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomResponseInterceptor.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"entities/Category.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"entities/Lesson.html":{},"classes/Logger.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"classes/ProfileDto.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"properties.html":{},"classes/swaggerConfig.html":{}}}],["protected",{"_index":660,"title":{},"body":{"injectables/CategoryService.html":{}}}],["provide",{"_index":1994,"title":{},"body":{"modules/SharedModule.html":{}}}],["provided",{"_index":2374,"title":{},"body":{"license.html":{}}}],["providers",{"_index":176,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":2277,"title":{},"body":{"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"injectables/AccessContorlService.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/Logger.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"classes/ValidationException.html":{},"classes/swaggerConfig.html":{}}}],["publish",{"_index":2357,"title":{},"body":{"license.html":{}}}],["pugadapter",{"_index":1677,"title":{},"body":{"modules/MailModule.html":{}}}],["purpose",{"_index":2383,"title":{},"body":{"license.html":{}}}],["put",{"_index":822,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["put('/:courseid",{"_index":1276,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["put(':id/role",{"_index":1751,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["put('change",{"_index":853,"title":{},"body":{"controllers/CoursesController.html":{}}}],["q",{"_index":247,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["q.alias",{"_index":252,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["q.andwhere(`${alias}.createdat",{"_index":259,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":614,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":842,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('page",{"_index":840,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('role",{"_index":1753,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["query('status",{"_index":855,"title":{},"body":{"controllers/CoursesController.html":{}}}],["queryfailederror",{"_index":1896,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["queryfailedfilter",{"_index":1890,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["queryresolver",{"_index":1443,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["question",{"_index":91,"title":{"entities/Question.html":{}},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{}}}],["question.correctanswers",{"_index":1951,"title":{},"body":{"injectables/QuizService.html":{}}}],["question.options",{"_index":100,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["question.quiz",{"_index":124,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["question.text",{"_index":1955,"title":{},"body":{"injectables/QuizService.html":{}}}],["question.type",{"_index":1956,"title":{},"body":{"injectables/QuizService.html":{}}}],["questionrepository",{"_index":1941,"title":{},"body":{"injectables/QuizService.html":{}}}],["questions",{"_index":125,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{}}}],["questiontype",{"_index":116,"title":{},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"miscellaneous/enumerations.html":{}}}],["questiontype.single_choice",{"_index":1026,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["questiontype.text",{"_index":1029,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz",{"_index":119,"title":{"entities/Quiz.html":{}},"body":{"entities/AnswerOption.html":{},"classes/CreateQuizDto.html":{},"entities/Lesson.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"injectables/PrometheusService.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["quiz.controller",{"_index":1936,"title":{},"body":{"modules/QuizModule.html":{}}}],["quiz.dto",{"_index":1926,"title":{},"body":{"controllers/QuizController.html":{},"injectables/QuizService.html":{},"classes/UpdateQuizDto.html":{}}}],["quiz.dto.ts",{"_index":1021,"title":{},"body":{"classes/CreateQuizDto.html":{},"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["quiz.dto.ts:14",{"_index":1022,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz.dto.ts:34",{"_index":1023,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz.dto.ts:9",{"_index":1024,"title":{},"body":{"classes/CreateQuizDto.html":{}}}],["quiz.questions",{"_index":132,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["quiz.service",{"_index":1925,"title":{},"body":{"controllers/QuizController.html":{},"modules/QuizModule.html":{}}}],["quiz/entities/quiz.entity",{"_index":1557,"title":{},"body":{"modules/LessonsModule.html":{},"injectables/LessonsService.html":{}}}],["quiz_completions_total",{"_index":1880,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["quiz_id",{"_index":1881,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["quizcompletions",{"_index":1813,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["quizcontroller",{"_index":1917,"title":{"controllers/QuizController.html":{}},"body":{"controllers/QuizController.html":{},"modules/QuizModule.html":{},"coverage.html":{}}}],["quizid",{"_index":1567,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/PrometheusService.html":{}}}],["quizmodule",{"_index":195,"title":{"modules/QuizModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuizModule.html":{},"modules.html":{},"overview.html":{}}}],["quizrepository",{"_index":1944,"title":{},"body":{"injectables/QuizService.html":{}}}],["quizservice",{"_index":1924,"title":{"injectables/QuizService.html":{}},"body":{"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"coverage.html":{},"overview.html":{}}}],["quizzes",{"_index":2287,"title":{},"body":{"index.html":{}}}],["quizzesrepository",{"_index":1562,"title":{},"body":{"injectables/LessonsService.html":{}}}],["r",{"_index":1398,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.error",{"_index":1408,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.message",{"_index":1403,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.message[0",{"_index":1401,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["r.statuscode",{"_index":1407,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["readonly",{"_index":162,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/swaggerConfig.html":{}}}],["record",{"_index":584,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/HttpExceptionFilter.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{},"classes/ResponseDto.html":{},"interfaces/ValidationResponse.html":{}}}],["reflect",{"_index":1230,"title":{},"body":{"entities/Enroll.html":{},"dependencies.html":{}}}],["reflector",{"_index":331,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["refresh_token",{"_index":2009,"title":{},"body":{"entities/User.html":{}}}],["regexp(/https",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":1814,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["registers",{"_index":1859,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["registration",{"_index":2290,"title":{},"body":{"index.html":{}}}],["regix",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regix.test(filename",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations",{"_index":912,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["relationship",{"_index":128,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["remove",{"_index":574,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":647,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":598,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(undefined",{"_index":2073,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["removefile",{"_index":677,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["removefile(category.icon_url",{"_index":699,"title":{},"body":{"injectables/CategoryService.html":{}}}],["removefile(course.thumbnail",{"_index":922,"title":{},"body":{"injectables/CoursesService.html":{}}}],["removefile(files.icon_url[0].filename",{"_index":681,"title":{},"body":{"injectables/CategoryService.html":{}}}],["removefile(files.thumbnail_url[0].filename",{"_index":891,"title":{},"body":{"injectables/CoursesService.html":{}}}],["removefile(lesson.contenturl",{"_index":1604,"title":{},"body":{"injectables/LessonsService.html":{}}}],["removefile(lesson.thumbnail",{"_index":1606,"title":{},"body":{"injectables/LessonsService.html":{}}}],["removefile(user.profile_picture",{"_index":2167,"title":{},"body":{"injectables/UserService.html":{}}}],["removewhitespace",{"_index":2214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["removewhitespace(name",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace",{"_index":2158,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["replace(/[^\\w",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace(/[^a",{"_index":2160,"title":{},"body":{"injectables/UserService.html":{}}}],["replace(/\\s/g",{"_index":2162,"title":{},"body":{"injectables/UserService.html":{}}}],["reply",{"_index":732,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusMiddleware.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":528,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["req.headers['x",{"_index":1486,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["req.method",{"_index":1792,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["req.path",{"_index":1791,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["req.route?.path",{"_index":1790,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["req.user",{"_index":532,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["req.user.email",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.firstname",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.lastname",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.user.picture",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":344,"title":{"interfaces/Request.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PaginateHelper.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.filter.ts",{"_index":1327,"title":{},"body":{"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{}}}],["request.filter.ts:11",{"_index":1334,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["request.filter.ts:19",{"_index":1378,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:20",{"_index":1379,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:22",{"_index":1385,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:41",{"_index":1382,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:58",{"_index":1388,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:9",{"_index":1330,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["request.url",{"_index":1165,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["request.user",{"_index":368,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["requestid",{"_index":1117,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{}}}],["requests",{"_index":1851,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["require_tld",{"_index":1044,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["required",{"_index":591,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ResponseDto.html":{},"controllers/UserController.html":{}}}],["requiredpriority",{"_index":80,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["requiredrole",{"_index":63,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["requiredroles",{"_index":358,"title":{},"body":{"guards/AuthGuard.html":{}}}],["res",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["res.on('finish",{"_index":1788,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["res.send(metrics",{"_index":1782,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["res.setheader('content",{"_index":1780,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["res.status(200).json",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res.statuscode.tostring",{"_index":1793,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["reset",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(payload",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassworddto",{"_index":287,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resolvers",{"_index":1458,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["resources",{"_index":2418,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["response",{"_index":345,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LanguageMiddleware.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["response(result",{"_index":1125,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["response.category.category_created_successfully",{"_index":689,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.category.category_deleted_successfully",{"_index":705,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.category.category_status_updated_successfully",{"_index":709,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.category.category_updated_successfully",{"_index":703,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response.dto",{"_index":1112,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["response.message",{"_index":1163,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":1901,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":1149,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["response.status(statuscode).json(formattederrors",{"_index":1410,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["response.statuscode",{"_index":1160,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["responsedto",{"_index":1111,"title":{"classes/ResponseDto.html":{}},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["responseservice",{"_index":151,"title":{"injectables/ResponseService.html":{}},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["responseservices",{"_index":333,"title":{},"body":{"guards/AuthGuard.html":{}}}],["restriction",{"_index":2351,"title":{},"body":{"license.html":{}}}],["result",{"_index":1143,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.data",{"_index":1131,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.key",{"_index":1130,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.message",{"_index":1134,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.requestid",{"_index":1133,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.statuscode",{"_index":1129,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["result.success",{"_index":1128,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["results",{"_index":83,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/JwtStrategy.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":44,"title":{},"body":{"injectables/AccessContorlService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"controllers/EnrollsController.html":{},"injectables/FileRequestFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/ResponseService.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rfw",{"_index":787,"title":{},"body":{"entities/Course.html":{}}}],["rights",{"_index":2354,"title":{},"body":{"license.html":{}}}],["role",{"_index":22,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":69,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["role.all",{"_index":353,"title":{},"body":{"guards/AuthGuard.html":{}}}],["role.user",{"_index":68,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["role_key",{"_index":349,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":31,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"controllers/EnrollsController.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(rolesenum.admin",{"_index":630,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["roles(rolesenum.all",{"_index":1758,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["roles.foreach((role",{"_index":74,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["roles.some((role",{"_index":352,"title":{},"body":{"guards/AuthGuard.html":{}}}],["roles.user",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"entities/User.html":{}}}],["roles[role",{"_index":2135,"title":{},"body":{"injectables/UserService.html":{}}}],["rolesenum",{"_index":59,"title":{},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"controllers/EnrollsController.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/QuizController.html":{},"entities/User.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["rolesenum.all",{"_index":1264,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@get('courses",{"_index":1255,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@patch('/:courseid/status",{"_index":1245,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@put('/:courseid",{"_index":1258,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.all)@useguards(authguard)@post('/:courseid",{"_index":1249,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.instructor",{"_index":631,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/QuizController.html":{}}}],["rolesenum.instructor)@apiconsumes('multipart/form",{"_index":819,"title":{},"body":{"controllers/CoursesController.html":{}}}],["rolesenum.instructor)@apiquery({name",{"_index":793,"title":{},"body":{"controllers/CoursesController.html":{}}}],["rolesenum.instructor)@delete(':id",{"_index":815,"title":{},"body":{"controllers/CoursesController.html":{}}}],["rolesenum.instructor)@get(':course_slug/instructor')@apiquery({name",{"_index":1527,"title":{},"body":{"controllers/LessonsController.html":{}}}],["rolesenum.instructor)@patch(':id')@apiconsumes('multipart/form",{"_index":1531,"title":{},"body":{"controllers/LessonsController.html":{}}}],["rolesenum.instructor)@post(':lessonid')@apiacceptedresponse({description",{"_index":1922,"title":{},"body":{"controllers/QuizController.html":{}}}],["rolesenum.instructor)@post()@apiconsumes('multipart/form",{"_index":799,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/LessonsController.html":{}}}],["rolesenum.instructor)@post()@version('1')@apiconsumes('multipart/form",{"_index":582,"title":{},"body":{"controllers/CategoryController.html":{}}}],["rolesenum.mentor",{"_index":1268,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.mentor)@useguards(authguard)@get('instructor",{"_index":1252,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["rolesenum.user",{"_index":2051,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["rotate",{"_index":1650,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["route",{"_index":1126,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"injectables/ResponseService.html":{}}}],["route.path",{"_index":1132,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["run",{"_index":1695,"title":{},"body":{"injectables/PaginateHelper.html":{},"index.html":{}}}],["run(query",{"_index":1702,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["rwanda",{"_index":1090,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["rxjs",{"_index":348,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CustomResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1159,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["savedlesson",{"_index":1587,"title":{},"body":{"injectables/LessonsService.html":{}}}],["savedquestions",{"_index":1957,"title":{},"body":{"injectables/QuizService.html":{}}}],["savedquiz",{"_index":1959,"title":{},"body":{"injectables/QuizService.html":{}}}],["scale",{"_index":767,"title":{},"body":{"entities/Course.html":{}}}],["scope",{"_index":1107,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["scope.default",{"_index":1123,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["scope.request",{"_index":1121,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/PaginateHelper.html":{},"injectables/ResponseService.html":{}}}],["scope.transient",{"_index":1122,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["seconds",{"_index":1863,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["secret",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"injectables/JwtStrategy.html":{},"interfaces/Request.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1479,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1667,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["seen",{"_index":1387,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{}}}],["seen.add(error",{"_index":1429,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["seen.has(error",{"_index":1428,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["select",{"_index":2139,"title":{},"body":{"injectables/UserService.html":{}}}],["selectquerybuilder",{"_index":235,"title":{},"body":{"interfaces/AssociativeArray.html":{},"injectables/PaginateHelper.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":2361,"title":{},"body":{"license.html":{}}}],["sendforgotpasswordemail",{"_index":1681,"title":{},"body":{"injectables/MailService.html":{}}}],["sendforgotpasswordemail(email",{"_index":1685,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["sentry",{"_index":1727,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["sentry/cli",{"_index":2225,"title":{},"body":{"dependencies.html":{}}}],["sentry/nestjs",{"_index":2227,"title":{},"body":{"dependencies.html":{}}}],["sentry/nestjs/setup",{"_index":1992,"title":{},"body":{"modules/SharedModule.html":{}}}],["sentryglobalfilter",{"_index":1990,"title":{},"body":{"modules/SharedModule.html":{}}}],["sentrymodule",{"_index":1991,"title":{},"body":{"modules/SharedModule.html":{}}}],["sentrymodule.forroot",{"_index":1993,"title":{},"body":{"modules/SharedModule.html":{}}}],["server",{"_index":1171,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["service",{"_index":2421,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["set",{"_index":30,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/LessonsService.html":{}}}],["setactiveusers",{"_index":1819,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["setactiveusers(count",{"_index":1831,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["setlimit",{"_index":1696,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["setlimit(limit",{"_index":1704,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["setmetadata(role_key",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setpage",{"_index":1697,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["setpage(page",{"_index":1706,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["shall",{"_index":2370,"title":{},"body":{"license.html":{}}}],["shared",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["sharedmodule",{"_index":196,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["signoptions",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":136,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["single_choice",{"_index":117,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"miscellaneous/enumerations.html":{}}}],["slug",{"_index":744,"title":{},"body":{"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["smtp.gmail.com",{"_index":726,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":1093,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"license.html":{}}}],["solution",{"_index":2280,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AssociativeArray.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"modules/LessonsModule.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"modules/PrometheusModule.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"modules/QuizModule.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"modules/SharedModule.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCourseDto.html":{},"classes/UpdateLessonDto.html":{},"classes/UpdateQuizDto.html":{},"classes/UpdateUserCategoryDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"index.html":{},"classes/swaggerConfig.html":{}}}],["specified",{"_index":29,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["src/.../auth",{"_index":2436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.guard.ts",{"_index":2428,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../config.ts",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helper.ts",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../i18n.generated.ts",{"_index":2429,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../lesson.entity.ts",{"_index":2262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../lib.ts",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logout.decorator.ts",{"_index":2434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../quiz.entity.ts",{"_index":2263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.ts",{"_index":2264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../validation.exception.ts",{"_index":2271,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:34",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["src/configs/config.ts",{"_index":710,"title":{},"body":{"interfaces/Config.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configs/db.module.ts",{"_index":1175,"title":{},"body":{"modules/DbModule.html":{}}}],["src/configs/db.module.ts:35",{"_index":1177,"title":{},"body":{"modules/DbModule.html":{}}}],["src/configs/i18n.module.ts",{"_index":1440,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["src/configs/swagger.ts",{"_index":2192,"title":{},"body":{"coverage.html":{},"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:2",{"_index":2423,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:3",{"_index":2425,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:4",{"_index":2419,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/configs/swagger.ts:6",{"_index":2422,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["src/decorators/auth",{"_index":2195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/logout.decorator.ts",{"_index":2197,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":2199,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/enums/roles.ts",{"_index":2265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/filters/bad",{"_index":1374,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{}}}],["src/filters/file",{"_index":1326,"title":{},"body":{"injectables/FileRequestFilter.html":{},"coverage.html":{}}}],["src/filters/query",{"_index":1891,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/generated/i18n.generated.ts",{"_index":1457,"title":{},"body":{"modules/I18nConfigModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/guards/auth.guard.ts",{"_index":324,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/guards/auth.guard.ts:16",{"_index":332,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guards/auth.guard.ts:22",{"_index":341,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/guards/auth.guard.ts:28",{"_index":336,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/interceptors/response.interceptor.ts",{"_index":1151,"title":{},"body":{"classes/CustomResponseInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/response.interceptor.ts:7",{"_index":1156,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["src/main.ts",{"_index":2204,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/authenticate.middleware.ts",{"_index":518,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/middlewares/authenticate.middleware.ts:11",{"_index":521,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{}}}],["src/middlewares/authenticate.middleware.ts:17",{"_index":525,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{}}}],["src/middlewares/language.middleware.ts",{"_index":1482,"title":{},"body":{"injectables/LanguageMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/language.middleware.ts:6",{"_index":1484,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["src/middlewares/language.middleware.ts:8",{"_index":1485,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:26",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:32",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:38",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:43",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:48",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:53",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:113",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:116",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:120",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:127",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:134",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:164",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:20",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:226",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:269",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:30",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:317",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:66",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:78",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/create",{"_index":927,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/entities/auth.entity.ts",{"_index":262,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/modules/category/category.controller.ts",{"_index":571,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/modules/category/category.controller.ts:115",{"_index":600,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:124",{"_index":608,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:58",{"_index":588,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:75",{"_index":594,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:80",{"_index":597,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.controller.ts:99",{"_index":605,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/category/category.module.ts",{"_index":655,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/modules/category/category.service.ts",{"_index":659,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/modules/category/category.service.ts:112",{"_index":676,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:12",{"_index":664,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:162",{"_index":675,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:197",{"_index":667,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:209",{"_index":669,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:22",{"_index":671,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:64",{"_index":673,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/category.service.ts:77",{"_index":674,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/category/dto/create",{"_index":948,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"coverage.html":{}}}],["src/modules/category/dto/update",{"_index":1996,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/modules/category/entities/category.entity.ts",{"_index":537,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/modules/category/entities/category.entity.ts:24",{"_index":553,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:29",{"_index":555,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:34",{"_index":551,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:37",{"_index":556,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:42",{"_index":552,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:46",{"_index":546,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:50",{"_index":558,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:54",{"_index":548,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/category/entities/category.entity.ts:57",{"_index":561,"title":{},"body":{"entities/Category.html":{}}}],["src/modules/courses/courses.controller.ts",{"_index":789,"title":{},"body":{"controllers/CoursesController.html":{},"coverage.html":{}}}],["src/modules/courses/courses.controller.ts:122",{"_index":821,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:137",{"_index":816,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:146",{"_index":796,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:58",{"_index":801,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:82",{"_index":807,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:94",{"_index":811,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.controller.ts:98",{"_index":814,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/modules/courses/courses.module.ts",{"_index":861,"title":{},"body":{"modules/CoursesModule.html":{}}}],["src/modules/courses/courses.service.ts",{"_index":866,"title":{},"body":{"injectables/CoursesService.html":{},"coverage.html":{}}}],["src/modules/courses/courses.service.ts:114",{"_index":881,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:137",{"_index":883,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:195",{"_index":882,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:21",{"_index":872,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:231",{"_index":876,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:241",{"_index":874,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:274",{"_index":880,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:33",{"_index":877,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/courses.service.ts:91",{"_index":878,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/modules/courses/dto/create",{"_index":966,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{},"coverage.html":{}}}],["src/modules/courses/dto/update",{"_index":1998,"title":{},"body":{"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["src/modules/courses/entities/course.entity.ts",{"_index":735,"title":{},"body":{"entities/Course.html":{},"coverage.html":{}}}],["src/modules/courses/entities/course.entity.ts:100",{"_index":749,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:103",{"_index":779,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:106",{"_index":754,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:30",{"_index":760,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:35",{"_index":778,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:45",{"_index":775,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:53",{"_index":756,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:58",{"_index":777,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:66",{"_index":769,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:75",{"_index":753,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:78",{"_index":761,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:81",{"_index":776,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:84",{"_index":759,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:87",{"_index":750,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:90",{"_index":758,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:93",{"_index":748,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/courses/entities/course.entity.ts:97",{"_index":764,"title":{},"body":{"entities/Course.html":{}}}],["src/modules/default/default.module.ts",{"_index":147,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"coverage.html":{}}}],["src/modules/default/default.module.ts:13",{"_index":1213,"title":{},"body":{"injectables/DefaultService.html":{}}}],["src/modules/default/default.module.ts:33",{"_index":150,"title":{},"body":{"controllers/AppController.html":{}}}],["src/modules/default/default.module.ts:8",{"_index":1212,"title":{},"body":{"injectables/DefaultService.html":{}}}],["src/modules/enrolls/enrolls.controller.ts",{"_index":1236,"title":{},"body":{"controllers/EnrollsController.html":{},"coverage.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:16",{"_index":1256,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:23",{"_index":1253,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:31",{"_index":1250,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:39",{"_index":1259,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.controller.ts:47",{"_index":1246,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["src/modules/enrolls/enrolls.module.ts",{"_index":1285,"title":{},"body":{"modules/EnrollsModule.html":{}}}],["src/modules/enrolls/enrolls.service.ts",{"_index":1290,"title":{},"body":{"injectables/EnrollsService.html":{},"coverage.html":{}}}],["src/modules/enrolls/enrolls.service.ts:102",{"_index":1300,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:13",{"_index":1296,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:137",{"_index":1301,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:162",{"_index":1298,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:26",{"_index":1299,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/enrolls.service.ts:72",{"_index":1302,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts",{"_index":1214,"title":{},"body":{"entities/Enroll.html":{},"coverage.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:14",{"_index":1222,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:18",{"_index":1218,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:22",{"_index":1225,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:25",{"_index":1224,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:28",{"_index":1220,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:30",{"_index":1226,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/enrolls/entities/enroll.entity.ts:32",{"_index":1221,"title":{},"body":{"entities/Enroll.html":{}}}],["src/modules/lessons/dto/create",{"_index":989,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"coverage.html":{}}}],["src/modules/lessons/dto/update",{"_index":2000,"title":{},"body":{"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts",{"_index":1488,"title":{},"body":{"entities/Lesson.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:21",{"_index":1498,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:31",{"_index":1502,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:35",{"_index":1494,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:38",{"_index":1505,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:41",{"_index":1497,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:44",{"_index":1506,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:47",{"_index":1500,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:50",{"_index":1493,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:53",{"_index":1504,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:56",{"_index":1492,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:59",{"_index":1503,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:62",{"_index":1501,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:65",{"_index":1495,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:68",{"_index":1507,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/entities/lesson.entity.ts:71",{"_index":1496,"title":{},"body":{"entities/Lesson.html":{}}}],["src/modules/lessons/lessons.controller.ts",{"_index":1513,"title":{},"body":{"controllers/LessonsController.html":{},"coverage.html":{}}}],["src/modules/lessons/lessons.controller.ts:107",{"_index":1524,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:131",{"_index":1533,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:142",{"_index":1529,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:49",{"_index":1517,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:73",{"_index":1520,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.controller.ts:98",{"_index":1528,"title":{},"body":{"controllers/LessonsController.html":{}}}],["src/modules/lessons/lessons.module.ts",{"_index":1555,"title":{},"body":{"modules/LessonsModule.html":{}}}],["src/modules/lessons/lessons.service.ts",{"_index":1559,"title":{},"body":{"injectables/LessonsService.html":{},"coverage.html":{}}}],["src/modules/lessons/lessons.service.ts:128",{"_index":1574,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:13",{"_index":1565,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:168",{"_index":1573,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:196",{"_index":1572,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:25",{"_index":1568,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:71",{"_index":1569,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/lessons/lessons.service.ts:98",{"_index":1570,"title":{},"body":{"injectables/LessonsService.html":{}}}],["src/modules/mails/mail.module.ts",{"_index":1656,"title":{},"body":{"modules/MailModule.html":{}}}],["src/modules/mails/mail.service.ts",{"_index":1680,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/modules/mails/mail.service.ts:5",{"_index":1684,"title":{},"body":{"injectables/MailService.html":{}}}],["src/modules/mails/mail.service.ts:7",{"_index":1686,"title":{},"body":{"injectables/MailService.html":{}}}],["src/modules/prometheus/prometheus.controller.ts",{"_index":1770,"title":{},"body":{"controllers/PrometheusController.html":{},"coverage.html":{}}}],["src/modules/prometheus/prometheus.controller.ts:10",{"_index":1774,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["src/modules/prometheus/prometheus.middleware.ts",{"_index":1783,"title":{},"body":{"injectables/PrometheusMiddleware.html":{},"coverage.html":{}}}],["src/modules/prometheus/prometheus.middleware.ts:6",{"_index":1785,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["src/modules/prometheus/prometheus.middleware.ts:9",{"_index":1786,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["src/modules/prometheus/prometheus.module.ts",{"_index":1799,"title":{},"body":{"modules/PrometheusModule.html":{}}}],["src/modules/prometheus/prometheus.service.ts",{"_index":1808,"title":{},"body":{"injectables/PrometheusService.html":{},"coverage.html":{}}}],["src/modules/prometheus/prometheus.service.ts:10",{"_index":1837,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:11",{"_index":1820,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:59",{"_index":1821,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:6",{"_index":1842,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:64",{"_index":1825,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:68",{"_index":1830,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:7",{"_index":1840,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:72",{"_index":1832,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:76",{"_index":1823,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:8",{"_index":1839,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:80",{"_index":1828,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/prometheus/prometheus.service.ts:9",{"_index":1835,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["src/modules/quiz/dto/create",{"_index":1020,"title":{},"body":{"classes/CreateQuizDto.html":{},"coverage.html":{}}}],["src/modules/quiz/dto/update",{"_index":2002,"title":{},"body":{"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts",{"_index":88,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:17",{"_index":1912,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:20",{"_index":1915,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:23",{"_index":1911,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:26",{"_index":1914,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:29",{"_index":1913,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:32",{"_index":1910,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:35",{"_index":1916,"title":{},"body":{"entities/Quiz.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:44",{"_index":1904,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:47",{"_index":1908,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:50",{"_index":1909,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:53",{"_index":1907,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:56",{"_index":1906,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:59",{"_index":1903,"title":{},"body":{"entities/Question.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:68",{"_index":96,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:71",{"_index":98,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:74",{"_index":104,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/entities/quiz.entity.ts:77",{"_index":103,"title":{},"body":{"entities/AnswerOption.html":{}}}],["src/modules/quiz/quiz.controller.ts",{"_index":1918,"title":{},"body":{"controllers/QuizController.html":{},"coverage.html":{}}}],["src/modules/quiz/quiz.controller.ts:23",{"_index":1923,"title":{},"body":{"controllers/QuizController.html":{}}}],["src/modules/quiz/quiz.module.ts",{"_index":1935,"title":{},"body":{"modules/QuizModule.html":{}}}],["src/modules/quiz/quiz.service.ts",{"_index":1939,"title":{},"body":{"injectables/QuizService.html":{},"coverage.html":{}}}],["src/modules/quiz/quiz.service.ts:11",{"_index":1943,"title":{},"body":{"injectables/QuizService.html":{}}}],["src/modules/quiz/quiz.service.ts:27",{"_index":1945,"title":{},"body":{"injectables/QuizService.html":{}}}],["src/modules/user",{"_index":1031,"title":{},"body":{"classes/CreateUserCategoryDto.html":{},"classes/UpdateUserCategoryDto.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["src/modules/user/dto/create",{"_index":1040,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/update",{"_index":2007,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":2008,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts:22",{"_index":2017,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:28",{"_index":2018,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:34",{"_index":2016,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:37",{"_index":2029,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:42",{"_index":2021,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:45",{"_index":2026,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:52",{"_index":2025,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:57",{"_index":2022,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:62",{"_index":2010,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:67",{"_index":2011,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:74",{"_index":2020,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:78",{"_index":2024,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:82",{"_index":2013,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:85",{"_index":2027,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:88",{"_index":2014,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:91",{"_index":2028,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":1722,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:113",{"_index":1732,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/user/user.controller.ts:134",{"_index":1738,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/user/user.controller.ts:146",{"_index":1728,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/modules/user/user.controller.ts:39",{"_index":2083,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:58",{"_index":2085,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:72",{"_index":2087,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:79",{"_index":2091,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:86",{"_index":2089,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:99",{"_index":2095,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":2099,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":2102,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:111",{"_index":2111,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:130",{"_index":2117,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:159",{"_index":2116,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:174",{"_index":2108,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:182",{"_index":2125,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:190",{"_index":2112,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:199",{"_index":2123,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:207",{"_index":2120,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:22",{"_index":2105,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:244",{"_index":2114,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:266",{"_index":2121,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:30",{"_index":2106,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:84",{"_index":2110,"title":{},"body":{"injectables/UserService.html":{}}}],["src/shared/access",{"_index":6,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{},"coverage.html":{}}}],["src/shared/exceptions/validation.exception.ts",{"_index":2173,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/exceptions/validation.exception.ts:34",{"_index":2175,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/shared/exceptions/validation.exception.ts:35",{"_index":2176,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/shared/exceptions/validation.exception.ts:8",{"_index":2184,"title":{},"body":{"interfaces/ValidationResponse-1.html":{}}}],["src/shared/shared.module.ts",{"_index":1988,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/strategy/google.strategy.ts",{"_index":1347,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/strategy/google.strategy.ts:18",{"_index":1355,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/strategy/google.strategy.ts:8",{"_index":1350,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/strategy/jwt.strategy.ts",{"_index":1470,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/strategy/jwt.strategy.ts:15",{"_index":1474,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/strategy/jwt.strategy.ts:5",{"_index":1472,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/utils/helper.ts",{"_index":2212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lib.ts",{"_index":231,"title":{},"body":{"interfaces/AssociativeArray.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/lib.ts:16",{"_index":234,"title":{},"body":{"interfaces/AssociativeArray.html":{}}}],["src/utils/logger.ts",{"_index":1612,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/utils/logger.ts:6",{"_index":1647,"title":{},"body":{"classes/Logger.html":{}}}],["src/utils/paginate.ts",{"_index":1692,"title":{},"body":{"injectables/PaginateHelper.html":{},"coverage.html":{}}}],["src/utils/paginate.ts:14",{"_index":1708,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:15",{"_index":1699,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:25",{"_index":1705,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:29",{"_index":1700,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:33",{"_index":1707,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:37",{"_index":1701,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/paginate.ts:41",{"_index":1703,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["src/utils/response/index.ts",{"_index":1099,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/utils/response/index.ts:17",{"_index":1467,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:18",{"_index":1466,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:19",{"_index":1460,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:20",{"_index":1464,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:21",{"_index":1463,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:22",{"_index":1465,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:23",{"_index":1468,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:24",{"_index":1462,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:25",{"_index":1461,"title":{},"body":{"classes/IResponseData.html":{}}}],["src/utils/response/index.ts:31",{"_index":1982,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/utils/response/index.ts:33",{"_index":1983,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/utils/response/index.ts:50",{"_index":1102,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["src/utils/response/index.ts:52",{"_index":1105,"title":{},"body":{"classes/CustomExceptionFilter.html":{}}}],["src/utils/response/response.dto.ts",{"_index":1963,"title":{},"body":{"classes/ResponseDto.html":{},"coverage.html":{}}}],["src/utils/response/response.dto.ts:16",{"_index":1977,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:20",{"_index":1975,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:24",{"_index":1969,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:27",{"_index":1965,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:31",{"_index":1967,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:38",{"_index":1972,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:45",{"_index":1971,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:48",{"_index":1973,"title":{},"body":{"classes/ResponseDto.html":{}}}],["src/utils/response/response.dto.ts:53",{"_index":1979,"title":{},"body":{"classes/ResponseDto.html":{}}}],["stack",{"_index":1640,"title":{},"body":{"classes/Logger.html":{}}}],["standard",{"_index":2179,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["start",{"_index":1787,"title":{},"body":{"injectables/PrometheusMiddleware.html":{},"index.html":{}}}],["start:dev",{"_index":2316,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2318,"title":{},"body":{"index.html":{}}}],["started",{"_index":2273,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":2188,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1613,"title":{},"body":{"classes/Logger.html":{},"classes/swaggerConfig.html":{}}}],["status",{"_index":541,"title":{},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"entities/Lesson.html":{},"injectables/LessonsService.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"injectables/ResponseService.html":{},"entities/User.html":{}}}],["status'})@get",{"_index":593,"title":{},"body":{"controllers/CategoryController.html":{}}}],["status/:slug",{"_index":795,"title":{},"body":{"controllers/CoursesController.html":{}}}],["status_code",{"_index":1858,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["status_codes",{"_index":1392,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["status_codes[status",{"_index":1902,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[statuscode",{"_index":1409,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["statuscode",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"classes/HttpExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/LessonsService.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"interfaces/ValidationResponse.html":{}}}],["storage",{"_index":626,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage('/category",{"_index":642,"title":{},"body":{"controllers/CategoryController.html":{}}}],["storage('/profile",{"_index":1762,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["storage('category",{"_index":635,"title":{},"body":{"controllers/CategoryController.html":{}}}],["storage('course",{"_index":831,"title":{},"body":{"controllers/CoursesController.html":{}}}],["storage('lesson",{"_index":1539,"title":{},"body":{"controllers/LessonsController.html":{}}}],["str",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["str.replace(/\\s/g",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":381,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":1679,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":93,"title":{},"body":{"entities/AnswerOption.html":{},"interfaces/AssociativeArray.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/PrometheusService.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["structured",{"_index":2293,"title":{},"body":{"index.html":{}}}],["student",{"_index":1215,"title":{},"body":{"entities/Enroll.html":{},"injectables/EnrollsService.html":{}}}],["student.sub",{"_index":1304,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["studentenroll",{"_index":1292,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["studentenrollchangestatus",{"_index":1293,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["studentgetenrollscourses",{"_index":1294,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["sub",{"_index":351,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{}}}],["subject",{"_index":1688,"title":{},"body":{"injectables/MailService.html":{},"license.html":{}}}],["sublicense",{"_index":2359,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":2372,"title":{},"body":{"license.html":{}}}],["success",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"interfaces/Request.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"injectables/UserCategoryService.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":585,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["summary",{"_index":1757,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1360,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["super(errors",{"_index":2183,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{}}}],["support",{"_index":2302,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2400,"title":{},"body":{"modules.html":{}}}],["swaggerconfig",{"_index":2193,"title":{"classes/swaggerConfig.html":{}},"body":{"coverage.html":{},"classes/swaggerConfig.html":{}}}],["synchronize",{"_index":1200,"title":{},"body":{"modules/DbModule.html":{}}}],["syntax",{"_index":1417,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["system",{"_index":2292,"title":{},"body":{"index.html":{}}}],["t",{"_index":1115,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["table",{"_index":2216,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2215,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":1672,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":1675,"title":{},"body":{"modules/MailModule.html":{}}}],["terms",{"_index":2420,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["termsofservice",{"_index":2413,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["test",{"_index":2321,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2324,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2323,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2320,"title":{},"body":{"index.html":{}}}],["text",{"_index":92,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"classes/CreateQuizDto.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"miscellaneous/enumerations.html":{}}}],["text/plain",{"_index":1781,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["this._validationfilter(validationerror.children",{"_index":1423,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this._validationfilter(validationerrors",{"_index":1404,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this.activeusers",{"_index":1871,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.activeusers.set(count",{"_index":1887,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.authmiddleware.use",{"_index":355,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authservice.create(createauthdto",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(forgetpassworddto",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.googlelogin(req",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithgoogle",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(resetpassworddto",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyotp(forgetpassworddto",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.buildroles([role.admin",{"_index":66,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.buildroles([role.guest",{"_index":67,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.categoryexist(createcategorydto.name",{"_index":680,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.create",{"_index":683,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.delete(id",{"_index":704,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.find",{"_index":694,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":696,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"injectables/UserCategoryService.html":{}}}],["this.categoryrepository.save",{"_index":701,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save(category",{"_index":687,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.changestatus(id",{"_index":651,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":637,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(status",{"_index":639,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(id",{"_index":641,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":648,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":645,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.checkemailexists(req.user.email",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkemailexists(user.email",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkphoneexists(user.phone",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('db_database",{"_index":1204,"title":{},"body":{"modules/DbModule.html":{}}}],["this.connecttodatabase",{"_index":1202,"title":{},"body":{"modules/DbModule.html":{}}}],["this.courseenrollments",{"_index":1875,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.courseenrollments.inc",{"_index":1888,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.courseexist(createcoursedto.title",{"_index":889,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursepagination.run(coursesquery",{"_index":907,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.create",{"_index":897,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.createquerybuilder('course",{"_index":905,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.exists",{"_index":925,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.find",{"_index":926,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.findone",{"_index":911,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{}}}],["this.courserepository.save",{"_index":916,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.save(course",{"_index":901,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.courserepository.softdelete(id",{"_index":923,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursesservice.changestatus(slug",{"_index":856,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.create(createcoursedto",{"_index":832,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.findall(filters",{"_index":844,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.findmycourse(user",{"_index":846,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.findone(slug",{"_index":848,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.remove(id",{"_index":852,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.update(slug",{"_index":851,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.datasource.transaction(async",{"_index":1577,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.defaultservice.gethello",{"_index":175,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["this.emailexists(email",{"_index":2128,"title":{},"body":{"injectables/UserService.html":{}}}],["this.enrollrepository.create",{"_index":1309,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.createquerybuilder('enroll",{"_index":1313,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.findone",{"_index":1306,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.remove(enroll",{"_index":1311,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.save",{"_index":1319,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollrepository.save(enroll",{"_index":1310,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["this.enrollsservice.instructorgetenrollscourses(user",{"_index":1271,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.studentenroll(courseid",{"_index":1275,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.studentenrollchangestatus(courseid",{"_index":1281,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.studentgetenrollscourses(user",{"_index":1267,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.enrollsservice.unenrollcourse(courseid",{"_index":1278,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["this.filerequest",{"_index":1339,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["this.formaterrors(error.children",{"_index":1435,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this.formaterrors(r.message",{"_index":1406,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["this.formatusername(req.user.firstname",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.formatusername(username",{"_index":2131,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hierarchies",{"_index":78,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.hierarchies.push(hierarchy",{"_index":77,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.httprequestduration",{"_index":1861,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.httprequestduration.observe",{"_index":1886,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.httprequeststotal",{"_index":1853,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.httprequeststotal.inc",{"_index":1885,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.i18n.t",{"_index":688,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserCategoryService.html":{}}}],["this.i18n.t('response.auth.invalid_credentials",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.auth.login_success",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.auth.otp_invalid",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.auth.user_not_found",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.t('response.category.category_exist",{"_index":682,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.i18n.t('response.category.category_fetch_successfully",{"_index":695,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.i18n.t('response.category.category_not_found",{"_index":697,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CoursesService.html":{}}}],["this.i18n.t('response.course.course_created_successfully",{"_index":902,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.i18n.t('response.course.course_exist",{"_index":892,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.i18n.t('response.course.course_failed_to_create",{"_index":903,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.i18n.t('validation.user_register.email_exists",{"_index":2132,"title":{},"body":{"injectables/UserService.html":{}}}],["this.i18n.t('validation.user_register.user_fail",{"_index":692,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserService.html":{}}}],["this.i18n.t('validation.user_register.user_success",{"_index":2136,"title":{},"body":{"injectables/UserService.html":{}}}],["this.i18nservice.resolvelanguage(lang",{"_index":1487,"title":{},"body":{"injectables/LanguageMiddleware.html":{}}}],["this.i18nservice.translate('response.default_message",{"_index":172,"title":{},"body":{"controllers/AppController.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{}}}],["this.id",{"_index":120,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["this.isemail(user?.email",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.decode(token",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":531,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["this.lessonrepository.create",{"_index":1583,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonrepository.createquerybuilder('lesson",{"_index":1591,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonrepository.delete(id",{"_index":1611,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonrepository.findone",{"_index":1602,"title":{},"body":{"injectables/LessonsService.html":{},"injectables/QuizService.html":{}}}],["this.lessonrepository.save",{"_index":1608,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.lessonsservice.create(createlessondto",{"_index":1540,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.findall(slug",{"_index":1544,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.findone(lesson_slug",{"_index":1549,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.getalllessonbyinstructionn(course_slug",{"_index":1547,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.remove(id",{"_index":1552,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.lessonsservice.update(id",{"_index":1551,"title":{},"body":{"controllers/LessonsController.html":{}}}],["this.limit",{"_index":1714,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["this.mailerservice.sendmail",{"_index":1687,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendforgotpasswordemail",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.matchroles(requiredroles",{"_index":370,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.page",{"_index":1716,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["this.pagination.run(lessonquery",{"_index":1598,"title":{},"body":{"injectables/LessonsService.html":{}}}],["this.priority",{"_index":76,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/IsAuthorizedParams.html":{}}}],["this.prometheusservice.getmetrics",{"_index":1779,"title":{},"body":{"controllers/PrometheusController.html":{}}}],["this.prometheusservice.incrementhttprequests(method",{"_index":1794,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["this.prometheusservice.observehttpduration(method",{"_index":1795,"title":{},"body":{"injectables/PrometheusMiddleware.html":{}}}],["this.questionrepository.save(questions",{"_index":1958,"title":{},"body":{"injectables/QuizService.html":{}}}],["this.quizcompletions",{"_index":1879,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.quizcompletions.inc",{"_index":1889,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.quizrepository.create",{"_index":1952,"title":{},"body":{"injectables/QuizService.html":{}}}],["this.quizrepository.save",{"_index":1960,"title":{},"body":{"injectables/QuizService.html":{}}}],["this.quizservice.createquiz(createquizdto",{"_index":1932,"title":{},"body":{"controllers/QuizController.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":359,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.register",{"_index":1845,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.register.metrics",{"_index":1882,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.register.setdefaultlabels",{"_index":1846,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["this.request",{"_index":1127,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["this.responseservice.response",{"_index":166,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["this.responseservice.response(result",{"_index":1148,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["this.responseservices.response",{"_index":363,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.usercategoryrepository.create",{"_index":2077,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryrepository.find",{"_index":2079,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryrepository.save(usercategory",{"_index":2078,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryrepository.softdelete(id",{"_index":2080,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["this.usercategoryservice.create(payload",{"_index":2053,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["this.usercategoryservice.findall",{"_index":2055,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["this.usercategoryservice.remove",{"_index":2058,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["this.usernameexists",{"_index":2130,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usernameformat(username",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userpagination.run(q",{"_index":2152,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository",{"_index":2137,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.exists",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EnrollsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findoneorfail",{"_index":2164,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":2155,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.softdelete(id",{"_index":2156,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":1745,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findall(filters",{"_index":1746,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":1747,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.getprofile(user",{"_index":1760,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1749,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":1748,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.updateprofile(updateuserdto",{"_index":1763,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.updaterole(id",{"_index":1754,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["this.userservice.userdetail(user.sub",{"_index":896,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.validateuser(user",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":362,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"interfaces/Request.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{},"miscellaneous/variables.html":{}}}],["throwerror",{"_index":1157,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["thumbnail",{"_index":745,"title":{},"body":{"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{}}}],["thumbnail_url",{"_index":830,"title":{},"body":{"controllers/CoursesController.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["tilte",{"_index":1005,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["timestamp",{"_index":569,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"entities/Enroll.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"entities/Lesson.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["timestamp'})@type(undefined",{"_index":545,"title":{},"body":{"entities/Category.html":{}}}],["title",{"_index":121,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto-1.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["tolowercase",{"_index":2163,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["topsecret",{"_index":729,"title":{},"body":{"interfaces/Config.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":2395,"title":{},"body":{"license.html":{}}}],["total",{"_index":1856,"title":{},"body":{"injectables/PrometheusService.html":{}}}],["tracking",{"_index":2286,"title":{},"body":{"index.html":{}}}],["transform",{"_index":1328,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["transform(value",{"_index":1332,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["transformer",{"_index":565,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["translation",{"_index":1418,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["transport",{"_index":1665,"title":{},"body":{"modules/MailModule.html":{}}}],["transports",{"_index":1618,"title":{},"body":{"classes/Logger.html":{}}}],["transports.console",{"_index":1635,"title":{},"body":{"classes/Logger.html":{}}}],["transports.dailyrotatefile",{"_index":1619,"title":{},"body":{"classes/Logger.html":{}}}],["true",{"_index":123,"title":{},"body":{"entities/AnswerOption.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"modules/I18nConfigModule.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"injectables/LessonsService.html":{},"classes/Logger.html":{},"modules/MailModule.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/PrometheusModule.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["true})@exclude",{"_index":2023,"title":{},"body":{"entities/User.html":{}}}],["true})@isboolean()@isnotempty",{"_index":1976,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isemail()@isnotempty()@unique('email",{"_index":2015,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":1968,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isnumber",{"_index":1974,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isoptional()@isnumber",{"_index":1978,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isstring()@isnotempty",{"_index":550,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["true})@isstring()@isoptional",{"_index":1970,"title":{},"body":{"classes/ResponseDto.html":{}}}],["true})@isstring()@unique('slug",{"_index":771,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["try",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["type",{"_index":38,"title":{},"body":{"injectables/AccessContorlService.html":{},"entities/AnswerOption.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/CustomExceptionFilter.html":{},"classes/CustomResponseInterceptor.html":{},"modules/DbModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguageMiddleware.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"injectables/MailService.html":{},"classes/OTPDto.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"controllers/PrometheusController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"controllers/QuizController.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"injectables/ResponseService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"coverage.html":{},"classes/swaggerConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined",{"_index":560,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["type(undefined)@createdatecolumn({type",{"_index":2012,"title":{},"body":{"entities/User.html":{}}}],["type(undefined)@manytoone(undefined",{"_index":1216,"title":{},"body":{"entities/Enroll.html":{},"entities/Lesson.html":{}}}],["type(undefined)@onetomany(undefined",{"_index":762,"title":{},"body":{"entities/Course.html":{}}}],["typealiases",{"_index":2426,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":112,"title":{},"body":{"entities/AnswerOption.html":{},"interfaces/AssociativeArray.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"injectables/CoursesService.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"entities/Lesson.html":{},"injectables/LessonsService.html":{},"injectables/PaginateHelper.html":{},"classes/QueryFailedFilter.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DbModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/QuizModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":658,"title":{},"body":{"modules/CategoryModule.html":{}}}],["typeormmodule.forfeature([course",{"_index":865,"title":{},"body":{"modules/CoursesModule.html":{}}}],["typeormmodule.forfeature([enroll",{"_index":1289,"title":{},"body":{"modules/EnrollsModule.html":{}}}],["typeormmodule.forfeature([lesson",{"_index":1558,"title":{},"body":{"modules/LessonsModule.html":{}}}],["typeormmodule.forfeature([quiz",{"_index":1938,"title":{},"body":{"modules/QuizModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([usercategory",{"_index":2064,"title":{},"body":{"modules/UserCategoryModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1189,"title":{},"body":{"modules/DbModule.html":{}}}],["types",{"_index":1068,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":836,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{},"index.html":{}}}],["typesoutputpath",{"_index":1455,"title":{},"body":{"modules/I18nConfigModule.html":{}}}],["unauthorized",{"_index":367,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["unauthorizedexception",{"_index":342,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Request.html":{}}}],["unauthorizedexception(this.responseservices.response",{"_index":372,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":82,"title":{},"body":{"injectables/AccessContorlService.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"entities/Course.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateQuizDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IsAuthorizedParams.html":{},"classes/ProfileDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isenum(lessontype",{"_index":1010,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["undefined})@isnotempty()@apiproperty({example",{"_index":930,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["undefined})@isnotempty()@maxlength(50",{"_index":1048,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty({message",{"_index":952,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["undefined})@isoptional",{"_index":997,"title":{},"body":{"classes/CreateLessonDto.html":{}}}],["undefined})@isoptional({message",{"_index":958,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{}}}],["undefined})@matches(/^[a",{"_index":1053,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@minlength(6",{"_index":1052,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unenrollcourse",{"_index":1242,"title":{},"body":{"controllers/EnrollsController.html":{},"injectables/EnrollsService.html":{}}}],["unenrollcourse(@user",{"_index":1277,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["unenrollcourse(user",{"_index":1257,"title":{},"body":{"controllers/EnrollsController.html":{}}}],["unenrolled",{"_index":1312,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["unexpected",{"_index":1145,"title":{},"body":{"classes/CustomExceptionFilter.html":{},"classes/IRequest.html":{},"classes/IResponseData.html":{},"injectables/ResponseService.html":{}}}],["unique",{"_index":770,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{}}}],["unique('email",{"_index":2031,"title":{},"body":{"entities/User.html":{}}}],["unique('slug",{"_index":783,"title":{},"body":{"entities/Course.html":{},"entities/Lesson.html":{}}}],["unit",{"_index":2319,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":369,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LessonsService.html":{},"injectables/QuizService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2411,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":838,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["update",{"_index":575,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["update(@param('id",{"_index":1550,"title":{},"body":{"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":601,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CoursesService.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(slug",{"_index":817,"title":{},"body":{"controllers/CoursesController.html":{}}}],["updatecategorydto",{"_index":602,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecoursedto",{"_index":818,"title":{"classes/UpdateCourseDto.html":{}},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/UpdateCourseDto.html":{},"coverage.html":{}}}],["updatecoursedto.featured",{"_index":919,"title":{},"body":{"injectables/CoursesService.html":{}}}],["updatecoursedto.isfree",{"_index":917,"title":{},"body":{"injectables/CoursesService.html":{}}}],["updatecoursedto})@useinterceptors(undefined)@patch(':slug",{"_index":820,"title":{},"body":{"controllers/CoursesController.html":{}}}],["updated",{"_index":921,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/EnrollsService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{}}}],["updated_at",{"_index":542,"title":{},"body":{"entities/Category.html":{},"entities/Enroll.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["updatedat",{"_index":131,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{}}}],["updatedatecolumn",{"_index":111,"title":{},"body":{"entities/AnswerOption.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["updatedatecolumn({type",{"_index":557,"title":{},"body":{"entities/Category.html":{},"entities/Course.html":{},"entities/Lesson.html":{},"entities/User.html":{},"entities/UserCategory.html":{}}}],["updatedcategory",{"_index":700,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedcourse",{"_index":915,"title":{},"body":{"injectables/CoursesService.html":{}}}],["updatedenroll",{"_index":1318,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["updatedlesson",{"_index":1607,"title":{},"body":{"injectables/LessonsService.html":{}}}],["updateduser",{"_index":2154,"title":{},"body":{"injectables/UserService.html":{}}}],["updatelessondto",{"_index":1530,"title":{"classes/UpdateLessonDto.html":{}},"body":{"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"classes/UpdateLessonDto.html":{},"coverage.html":{}}}],["updateprofile",{"_index":1725,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateprofile(updateuserdto",{"_index":2118,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(user",{"_index":1733,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updatequizdto",{"_index":1927,"title":{"classes/UpdateQuizDto.html":{}},"body":{"controllers/QuizController.html":{},"classes/UpdateQuizDto.html":{},"coverage.html":{}}}],["updaterole",{"_index":2081,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updaterole(@param('id",{"_index":1752,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["updaterole(id",{"_index":2092,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatestatus",{"_index":576,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatestatus(@param('id",{"_index":650,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatestatus(id",{"_index":606,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updateusercategorydto",{"_index":2004,"title":{"classes/UpdateUserCategoryDto.html":{}},"body":{"classes/UpdateUserCategoryDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1734,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/ProfileController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["upload",{"_index":2301,"title":{},"body":{"index.html":{}}}],["uploadedfiles",{"_index":611,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["uploads",{"_index":2305,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["uploads/${filename",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url",{"_index":240,"title":{},"body":{"interfaces/AssociativeArray.html":{},"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{},"injectables/PaginateHelper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["url(url(req.url",{"_index":1713,"title":{},"body":{"injectables/PaginateHelper.html":{}}}],["usd",{"_index":785,"title":{},"body":{"entities/Course.html":{},"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["usd'})@isstring()@isnotempty",{"_index":752,"title":{},"body":{"entities/Course.html":{}}}],["use",{"_index":519,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"modules/I18nConfigModule.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PrometheusMiddleware.html":{},"license.html":{}}}],["use(req",{"_index":522,"title":{},"body":{"injectables/AuthenticateMiddleware.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PrometheusMiddleware.html":{},"interfaces/Request.html":{}}}],["useclass",{"_index":1995,"title":{},"body":{"modules/SharedModule.html":{}}}],["used",{"_index":2415,"title":{},"body":{"classes/swaggerConfig.html":{}}}],["usefactory",{"_index":1190,"title":{},"body":{"modules/DbModule.html":{},"modules/I18nConfigModule.html":{}}}],["useguards",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":629,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/EnrollsController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/QuizController.html":{},"controllers/UserCategoryController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('google",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":612,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CoursesController.html":{},"controllers/LessonsController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":33,"title":{"entities/User.html":{}},"body":{"injectables/AccessContorlService.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"interfaces/Config.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"entities/Enroll.html":{},"controllers/EnrollsController.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"classes/FilesDTO.html":{},"injectables/GoogleStrategy.html":{},"classes/ImagePicDto.html":{},"interfaces/IsAuthorizedParams.html":{},"controllers/LessonsController.html":{},"modules/MailModule.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"interfaces/Request.html":{},"classes/UpdateUserCategoryDto.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibearerauth()@roles(rolesenum.all)@useguards(authguard",{"_index":1737,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user'})@isemail({allow_ip_domain",{"_index":1042,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isoptional",{"_index":1058,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isphonenumber('rw",{"_index":1056,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user'})@isstring({message",{"_index":1047,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ProfileDto.html":{}}}],["user'})@put(':id/role",{"_index":2094,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":2100,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator.ts",{"_index":2196,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1740,"title":{},"body":{"controllers/ProfileController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":1041,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:112",{"_index":1054,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:128",{"_index":1768,"title":{},"body":{"classes/ProfileDto.html":{}}}],["user.dto.ts:139",{"_index":1766,"title":{},"body":{"classes/ProfileDto.html":{}}}],["user.dto.ts:150",{"_index":1767,"title":{},"body":{"classes/ProfileDto.html":{}}}],["user.dto.ts:153",{"_index":1469,"title":{},"body":{"classes/ImagePicDto.html":{}}}],["user.dto.ts:32",{"_index":1061,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":1049,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1045,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:83",{"_index":1057,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":1059,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{}}}],["user.profile_picture",{"_index":2170,"title":{},"body":{"injectables/UserService.html":{}}}],["user.role",{"_index":371,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["user.service",{"_index":1739,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.sub",{"_index":2057,"title":{},"body":{"controllers/UserCategoryController.html":{}}}],["user.then((res",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.usercategories",{"_index":2039,"title":{},"body":{"entities/UserCategory.html":{}}}],["user/entities/user.entity",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnrollsModule.html":{},"injectables/EnrollsService.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{}}}],["user/user.service",{"_index":885,"title":{},"body":{"injectables/CoursesService.html":{}}}],["user?.profile_picture",{"_index":2166,"title":{},"body":{"injectables/UserService.html":{}}}],["usercategories",{"_index":543,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{},"injectables/UserCategoryService.html":{}}}],["usercategory",{"_index":559,"title":{"entities/UserCategory.html":{}},"body":{"entities/Category.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{}}}],["usercategorycontroller",{"_index":2042,"title":{"controllers/UserCategoryController.html":{}},"body":{"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"coverage.html":{}}}],["usercategorymodule",{"_index":197,"title":{"modules/UserCategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserCategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["usercategoryrepository",{"_index":2068,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["usercategoryservice",{"_index":2049,"title":{"injectables/UserCategoryService.html":{}},"body":{"controllers/UserCategoryController.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":1744,"title":{"controllers/UserController.html":{}},"body":{"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdetail",{"_index":895,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UserService.html":{}}}],["userdetail(id",{"_index":2122,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":2056,"title":{},"body":{"controllers/UserCategoryController.html":{},"injectables/UserCategoryService.html":{}}}],["usermodule",{"_index":198,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"classes/ForgetPasswordDto.html":{},"classes/ImagePicDto.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["usernameexists",{"_index":2103,"title":{},"body":{"injectables/UserService.html":{}}}],["usernameexists(username",{"_index":2124,"title":{},"body":{"injectables/UserService.html":{}}}],["usernameformat",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["usernameformat(username",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpagination",{"_index":2104,"title":{},"body":{"injectables/UserService.html":{}}}],["userrepository",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EnrollsService.html":{},"injectables/UserCategoryService.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":340,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["users",{"_index":1869,"title":{},"body":{"injectables/PrometheusService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/swaggerConfig.html":{}}}],["users.created_at",{"_index":2146,"title":{},"body":{"injectables/UserService.html":{}}}],["users.deleted_at",{"_index":2148,"title":{},"body":{"injectables/UserService.html":{}}}],["users.email",{"_index":2143,"title":{},"body":{"injectables/UserService.html":{}}}],["users.id",{"_index":2140,"title":{},"body":{"injectables/UserService.html":{}}}],["users.name",{"_index":2141,"title":{},"body":{"injectables/UserService.html":{}}}],["users.phone",{"_index":2144,"title":{},"body":{"injectables/UserService.html":{}}}],["users.role",{"_index":2147,"title":{},"body":{"injectables/UserService.html":{}}}],["users.status",{"_index":2145,"title":{},"body":{"injectables/UserService.html":{}}}],["users.username",{"_index":2142,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":869,"title":{"injectables/UserService.html":{}},"body":{"injectables/CoursesService.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":106,"title":{},"body":{"entities/AnswerOption.html":{},"controllers/AppController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthenticateMiddleware.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"modules/DbModule.html":{},"modules/DefaultModule.html":{},"injectables/DefaultService.html":{},"entities/Enroll.html":{},"injectables/EnrollsService.html":{},"entities/Lesson.html":{},"controllers/LessonsController.html":{},"injectables/LessonsService.html":{},"controllers/ProfileController.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"injectables/QuizService.html":{},"interfaces/Request.html":{},"modules/SharedModule.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"modules/UserCategoryModule.html":{},"injectables/UserCategoryService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["utils/paginate",{"_index":886,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["uuid",{"_index":105,"title":{},"body":{"entities/AnswerOption.html":{},"interfaces/AssociativeArray.html":{},"entities/Category.html":{},"entities/Course.html":{},"entities/Enroll.html":{},"entities/Lesson.html":{},"entities/Question.html":{},"entities/Quiz.html":{},"entities/User.html":{},"entities/UserCategory.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["uuidv4",{"_index":237,"title":{},"body":{"interfaces/AssociativeArray.html":{},"miscellaneous/variables.html":{}}}],["v1",{"_index":1164,"title":{},"body":{"classes/CustomResponseInterceptor.html":{}}}],["v4",{"_index":236,"title":{},"body":{"interfaces/AssociativeArray.html":{}}}],["validate",{"_index":1349,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(_accesstoken",{"_index":1351,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":1473,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":1013,"title":{},"body":{"classes/CreateLessonDto.html":{},"classes/FilesDTO.html":{}}}],["validateuser",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(user",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1436,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}}}],["validation.auth_login.otp_required",{"_index":945,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["validation.auth_login.password_required",{"_index":940,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["validation.auth_login.user_name",{"_index":938,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/OTPDto.html":{},"classes/ResetPasswordDto.html":{}}}],["validation.category_register.description_required",{"_index":963,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["validation.category_register.icon_url_required",{"_index":965,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["validation.category_register.name_required",{"_index":962,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/FilesDto.html":{}}}],["validation.courses.course_category_required",{"_index":987,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_current_price_required",{"_index":983,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_description_required",{"_index":981,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_is_featured_required",{"_index":986,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_is_free_required",{"_index":984,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_name_required",{"_index":980,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_price_required",{"_index":982,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.courses.course_thumbnail_required",{"_index":985,"title":{},"body":{"classes/CreateCourseDto.html":{},"classes/FilesDto-1.html":{}}}],["validation.user_category_register.category_id_required",{"_index":1038,"title":{},"body":{"classes/CreateUserCategoryDto.html":{}}}],["validation.user_category_register.category_not_found",{"_index":2076,"title":{},"body":{"injectables/UserCategoryService.html":{}}}],["validation.user_register.address_required",{"_index":1092,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.bio_required",{"_index":1096,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.email_invalid",{"_index":1073,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.email_required",{"_index":1074,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.name_required",{"_index":1070,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.password_match",{"_index":1082,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.password_min",{"_index":1080,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.password_required",{"_index":1078,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.phone_invalid",{"_index":1076,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.phone_required",{"_index":1077,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.profile_pic_required",{"_index":1088,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validation.user_register.username_required",{"_index":1069,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{}}}],["validationerror",{"_index":1381,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["validationerror.constraints",{"_index":1414,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["validationerror.constraints[constraintkey",{"_index":1419,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["validationerrors",{"_index":1383,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ValidationResponse.html":{}}}],["validationexception",{"_index":2172,"title":{"classes/ValidationException.html":{}},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{}}}],["validationexception(formattederrors",{"_index":2178,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/variables.html":{}}}],["validationexceptionfactory",{"_index":2177,"title":{},"body":{"classes/ValidationException.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationresponse",{"_index":1391,"title":{"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":239,"title":{},"body":{"interfaces/AssociativeArray.html":{},"entities/Category.html":{},"entities/Course.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCourseDto.html":{},"classes/CreateLessonDto.html":{},"classes/CreateUserCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/FilesDTO.html":{},"classes/FilesDto.html":{},"classes/FilesDto-1.html":{},"classes/ForgetPasswordDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImagePicDto.html":{},"entities/Lesson.html":{},"classes/OTPDto.html":{},"classes/ProfileDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseDto.html":{},"entities/User.html":{},"interfaces/ValidationResponse.html":{},"dependencies.html":{}}}],["value",{"_index":53,"title":{},"body":{"injectables/AccessContorlService.html":{},"interfaces/AssociativeArray.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDto.html":{},"injectables/EnrollsService.html":{},"injectables/FileRequestFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/IResponseData.html":{},"controllers/LessonsController.html":{},"classes/Logger.html":{},"injectables/PaginateHelper.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/swaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["value[this.filerequest",{"_index":1340,"title":{},"body":{"injectables/FileRequestFilter.html":{}}}],["variable",{"_index":2190,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2430,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":839,"title":{},"body":{"controllers/CoursesController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"interfaces/ValidationResponse.html":{}}}],["verifycallback",{"_index":1354,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["verifyotp",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyotp(@param('token",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyotp(otp",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyotp(token",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":613,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CustomResponseInterceptor.html":{},"properties.html":{},"classes/swaggerConfig.html":{}}}],["version('1",{"_index":632,"title":{},"body":{"controllers/CategoryController.html":{}}}],["version('1')@apiconsumes('multipart/form",{"_index":603,"title":{},"body":{"controllers/CategoryController.html":{}}}],["video",{"_index":1509,"title":{},"body":{"entities/Lesson.html":{},"miscellaneous/enumerations.html":{}}}],["void",{"_index":45,"title":{},"body":{"injectables/AccessContorlService.html":{},"modules/AppModule.html":{},"classes/CustomExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LanguageMiddleware.html":{},"injectables/PaginateHelper.html":{},"controllers/ProfileController.html":{},"injectables/PrometheusMiddleware.html":{},"injectables/PrometheusService.html":{},"classes/QueryFailedFilter.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":2379,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2375,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1451,"title":{},"body":{"modules/I18nConfigModule.html":{},"index.html":{}}}],["weakset",{"_index":1390,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/ValidationException.html":{},"interfaces/ValidationResponse.html":{},"interfaces/ValidationResponse-1.html":{},"miscellaneous/functions.html":{}}}],["welcome",{"_index":2329,"title":{},"body":{"index.html":{}}}],["where('course.creator.id",{"_index":1324,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["where('course.slug",{"_index":1593,"title":{},"body":{"injectables/LessonsService.html":{}}}],["where('courseid",{"_index":1581,"title":{},"body":{"injectables/LessonsService.html":{}}}],["where('enroll.student.id",{"_index":1315,"title":{},"body":{"injectables/EnrollsService.html":{}}}],["where('lesson.slug",{"_index":1600,"title":{},"body":{"injectables/LessonsService.html":{}}}],["whether",{"_index":2392,"title":{},"body":{"license.html":{}}}],["willsoto/nestjs",{"_index":1803,"title":{},"body":{"modules/PrometheusModule.html":{},"dependencies.html":{}}}],["winston",{"_index":1648,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["winstonmodule",{"_index":1651,"title":{},"body":{"classes/Logger.html":{}}}],["winstonmodule.createlogger",{"_index":1614,"title":{},"body":{"classes/Logger.html":{}}}],["withdeleted",{"_index":2153,"title":{},"body":{"injectables/UserService.html":{}}}],["without",{"_index":2350,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":2312,"title":{},"body":{"index.html":{}}}],["yes",{"_index":879,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/LessonsService.html":{},"injectables/UserService.html":{}}}],["yyyy",{"_index":1624,"title":{},"body":{"classes/Logger.html":{}}}],["z0",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/UserService.html":{}}}],["z]{2",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["za",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/ImagePicDto.html":{},"classes/ProfileDto.html":{},"injectables/UserService.html":{}}}],["zippedarchive",{"_index":1627,"title":{},"body":{"classes/Logger.html":{}}}],["zoom",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CoursesModule.html":{},"modules/DefaultModule.html":{},"modules/EnrollsModule.html":{},"modules/LessonsModule.html":{},"modules/MailModule.html":{},"modules/PrometheusModule.html":{},"modules/QuizModule.html":{},"modules/SharedModule.html":{},"modules/UserCategoryModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessContorlService.html":{"url":"injectables/AccessContorlService.html","title":"injectable - AccessContorlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessContorlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/access-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hierarchies\n                            \n                            \n                                    Private\n                                priority\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildRoles\n                            \n                            \n                                    Public\n                                getRole\n                            \n                            \n                                    Public\n                                isAuthorized\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/access-control.service.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildRoles(roles: Role[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/access-control.service.ts:24\n                        \n                    \n\n\n            \n                \n                        The buildRoles method allows for creating a role hierarchy between specified set of roles.\nRoles have to be specified from least privileged user to the most privileged one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                        Role[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array that contains a list of roles\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRole(undefined: IsAuthorizedParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/access-control.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IsAuthorizedParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Role\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthorized\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthorized(undefined: IsAuthorizedParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/access-control.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IsAuthorizedParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hierarchies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/shared/access-control.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/shared/access-control.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RolesEnum as Role } from '@/enums';\n\ninterface IsAuthorizedParams {\n  currentRole: Role;\n  requiredRole: Role;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority = 1;\n\n  constructor() {\n    this.buildRoles([Role.ADMIN]);\n    this.buildRoles([Role.GUEST, Role.USER, Role.ADMIN]);\n  }\n\n  /**\n   * The buildRoles method allows for creating a role hierarchy between specified set of roles.\n   * Roles have to be specified from least privileged user to the most privileged one\n   * @param roles Array that contains a list of roles\n   */\n  private buildRoles(roles: Role[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach((role) => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n\n      if (\n        priority !== undefined &&\n        requiredPriority !== undefined &&\n        priority \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AnswerOption.html":{"url":"entities/AnswerOption.html","title":"entity - AnswerOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AnswerOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/entities/quiz.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                question\n                            \n                            \n                                    \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, question => question.options, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:74\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from \"@/utils\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, OneToMany, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { Lesson } from \"@/modules/lessons/entities/lesson.entity\";\n\nexport enum QuestionType {\n    SINGLE_CHOICE = 'single_choice',\n    MULTIPLE_CHOICE = 'multiple_choice',\n    TEXT = 'text',\n}\n\n@Entity()\nexport class Quiz {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @OneToMany(() => Question, (question) => question.quiz, { cascade: true })\n    questions: Question[];\n\n    @OneToOne(() => Lesson, (lesson) => lesson.quiz) // Bidirectional relationship\n    lesson: Lesson;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n@Entity()\nexport class Question {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    text: string;\n\n    @Column({ type: 'enum', enum: QuestionType })\n    type: QuestionType;\n\n    @ManyToOne(() => Quiz, (quiz) => quiz.questions, { onDelete: 'CASCADE' })\n    quiz: Quiz;\n\n    @OneToMany(() => AnswerOption, (option) => option.question, { cascade: true })\n    options: AnswerOption[];\n\n    @Column({ type: 'simple-array', nullable: true })\n    correctAnswers?: string[]; // For MCQs: [\"A\", \"C\"], for text: [\"exact answer\"]\n}\n\n@Entity()\nexport class AnswerOption {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    label: string; // e.g., \"A\", \"B\", \"C\"\n\n    @Column()\n    text: string;\n\n    @ManyToOne(() => Question, (question) => question.options, { onDelete: 'CASCADE' })\n    question: Question;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/default/default.module.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/default/default.module.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { ResponseService } from '@/utils';\nimport { Controller, Get, Injectable, Module } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class DefaultService {\n  constructor(\n    private readonly responseService: ResponseService,\n    private readonly I18nService: I18nService,\n  ) {}\n  getHello() {\n    const lang = I18nContext.current().lang;\n    return this.responseService.Response({\n      success: true,\n      statusCode: 200,\n      data: {\n        message: this.I18nService.translate('response.DEFAULT_MESSAGE', {\n          lang,\n        }),\n      },\n      message: this.I18nService.translate('response.DEFAULT_MESSAGE', { lang }),\n    });\n  }\n}\n\n@Controller('/')\n@ApiTags('App')\nclass AppController {\n  constructor(private readonly DefaultService: DefaultService) {}\n  @Get()\n  getHello() {\n    return this.DefaultService.getHello();\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  providers: [ResponseService, DefaultService],\n})\nexport class DefaultModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCoursesModule\n\nCoursesModule\n\nAppModule -->\n\nCoursesModule->AppModule\n\n\n\n\n\nDefaultModule\n\nDefaultModule\n\nAppModule -->\n\nDefaultModule->AppModule\n\n\n\n\n\nEnrollsModule\n\nEnrollsModule\n\nAppModule -->\n\nEnrollsModule->AppModule\n\n\n\n\n\nI18nConfigModule\n\nI18nConfigModule\n\nAppModule -->\n\nI18nConfigModule->AppModule\n\n\n\n\n\nLessonsModule\n\nLessonsModule\n\nAppModule -->\n\nLessonsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPrometheusModule\n\nPrometheusModule\n\nAppModule -->\n\nPrometheusModule->AppModule\n\n\n\n\n\nQuizModule\n\nQuizModule\n\nAppModule -->\n\nQuizModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUserCategoryModule\n\nUserCategoryModule\n\nAppModule -->\n\nUserCategoryModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CoursesModule\n                        \n                        \n                            DefaultModule\n                        \n                        \n                            EnrollsModule\n                        \n                        \n                            I18nConfigModule\n                        \n                        \n                            LessonsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PrometheusModule\n                        \n                        \n                            QuizModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UserCategoryModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { I18nConfigModule } from '@/configs';\nimport { UserModule, DefaultModule } from './modules';\nimport { LanguageMiddleware } from '@/middlewares';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { MailModule } from './modules/mails/mail.module';\nimport { CategoryModule } from './modules/category/category.module';\nimport { UserCategoryModule } from './modules/user-category/user-category.module';\nimport { CoursesModule } from './modules/courses/courses.module';\nimport { SharedModule } from './shared';\nimport { PrometheusModule, PrometheusMiddleware } from './modules/prometheus';\nimport { EnrollsModule } from './modules/enrolls/enrolls.module';\nimport { LessonsModule } from './modules/lessons/lessons.module';\nimport { QuizModule } from './modules/quiz/quiz.module';\n\n@Module({\n  imports: [\n    SharedModule,\n    DefaultModule,\n    I18nConfigModule,\n    UserModule,\n    AuthModule,\n    MailModule,\n    CategoryModule,\n    UserCategoryModule,\n    CoursesModule,\n    PrometheusModule,\n    EnrollsModule,\n    LessonsModule,\n    QuizModule,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LanguageMiddleware).forRoutes('*');\n\n    consumer.apply(PrometheusMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AssociativeArray.html":{"url":"interfaces/AssociativeArray.html","title":"interface - AssociativeArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AssociativeArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/lib.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | boolean | number\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/lib.ts:16\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { SelectQueryBuilder } from 'typeorm';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isIn } from 'class-validator';\n\nexport const uuid = () => uuidv4();\n\nexport const url = (link: string) => {\n  const base = process.env.BACKEND_DOMAIN + '/' + process.env.PREFIX;\n\n  if (link.charAt(0) == '/') {\n    return base + link;\n  }\n  return base + '/' + link;\n};\n\nexport interface AssociativeArray {\n  [key: string]: string | boolean | number;\n}\n\nexport const filterQueryBuilderFromRequest = (\n  q: SelectQueryBuilder,\n  filters?: AssociativeArray,\n) => {\n  if (filters) {\n    const keys = Object.keys(filters);\n\n    const alias = q.alias;\n\n    for (const key of keys) {\n      const value = filters[key];\n\n      if (isIn(key, ['limit', 'offset', 'page'])) continue;\n\n      if (key === 'from') {\n        q.andWhere(`${alias}.createdAt >= '${value}'`);\n        continue;\n      }\n      if (key === 'to') {\n        q.andWhere(`${alias}.createdAt \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                forgetPassword\n                            \n                            \n                                    \n                                    \n                                google\n                            \n                            \n                                    \n                                    \n                                googleCallback\n                            \n                            \n                                    \n                                resetPassword\n                            \n                            \n                                    \n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAuthDto\n                                            \n                                                            CreateAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        forgetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgetPassword(forgetPasswordDto: ForgetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/forget-password')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                forgetPasswordDto\n                                            \n                                                            ForgetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        google\n                        \n                    \n                \n            \n            \n                \n                        \n                    google()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        googleCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleCallback(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google/callback')@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(token: string, resetPasswordDto: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/reset-password/:token')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                resetPasswordDto\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(token: string, forgetPasswordDto: OTPDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/verify-otp/:token')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                forgetPasswordDto\n                                            \n                                                            OTPDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n  Get,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {\n  CreateAuthDto,\n  ForgetPasswordDto,\n  OTPDto,\n  ResetPasswordDto,\n} from './dto/create-auth.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) { }\n\n  @Post('/login')\n  create(@Body() createAuthDto: CreateAuthDto) {\n    return this.authService.create(createAuthDto);\n  }\n\n  @Get('/google')\n  @UseGuards(AuthGuard('google'))\n  google() {\n    return this.authService.loginWithGoogle();\n  }\n\n  @Get('/google/callback')\n  @UseGuards(AuthGuard('google'))\n  googleCallback(@Req() req) {\n    return this.authService.googleLogin(req);\n  }\n\n  @Post('/forget-password')\n  forgetPassword(@Body() forgetPasswordDto: ForgetPasswordDto) {\n    return this.authService.forgotPassword(forgetPasswordDto);\n  }\n\n  @Post('/verify-otp/:token')\n  verifyOtp(@Param('token') token: string, @Body() forgetPasswordDto: OTPDto) {\n    return this.authService.verifyOtp(forgetPasswordDto, token);\n  }\n\n  @Post('/reset-password/:token')\n  resetPassword(\n    @Param('token') token: string,\n    @Body() resetPasswordDto: ResetPasswordDto,\n  ) {\n    return this.authService.resetPassword(resetPasswordDto, token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                matchRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(responseServices: ResponseService, authMiddleware: AuthenticateMiddleware, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/guards/auth.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        responseServices\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authMiddleware\n                                                  \n                                                        \n                                                                        AuthenticateMiddleware\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/auth.guard.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchRoles\n                        \n                    \n                \n            \n            \n                \nmatchRoles(roles: Role[], userRole: Role)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guards/auth.guard.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                        Role[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            Role\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ResponseService } from '@/utils';\nimport { Request, Response } from 'express';\n// import { Observable } from 'rxjs';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { ROLE_KEY } from '@/decorators';\nimport { RolesEnum as Role } from '@/enums';\n\nexport type AuthUserType = {\n  sub: string;\n  role: string;\n};\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly responseServices: ResponseService,\n    private authMiddleware: AuthenticateMiddleware,\n    private reflector: Reflector,\n  ) { }\n  matchRoles(roles: Role[], userRole: Role) {\n    return roles.some((role) => {\n      if (role === Role.ALL) return true;\n      return role === userRole;\n    });\n  }\n  async canActivate(context: ExecutionContext): Promise {\n    await this.authMiddleware.use(\n      context.switchToHttp().getRequest(),\n      context.switchToHttp().getResponse(),\n      () => { },\n    );\n    const requiredRoles = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      throw new UnauthorizedException(\n\n        this.responseServices.Response({\n          success: false,\n          data: null,\n          statusCode: 401,\n          message: 'Unauthorized',\n        })\n      );\n    }\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user as unknown as AuthUserType;\n    if (!user) {\n      throw this.responseServices.Response({\n        success: false,\n        data: null,\n        statusCode: 401,\n        message: 'Unauthorized',\n      });\n    }\n\n    if (!this.matchRoles(requiredRoles, user.role as Role)) {\n\n      throw new UnauthorizedException(this.responseServices.Response({\n        success: false,\n        data: null,\n        statusCode: 401,\n        message: 'Unauthorized',\n      }));\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from '@/strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { config } from '@/configs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { ResponseService } from '@/utils';\nimport { GoogleStrategy } from '@/strategy';\nimport { MailModule } from '../mails/mail.module';\n\n@Module({\n  imports: [\n    JwtModule.register({\n      secret: config().secret,\n      signOptions: { expiresIn: '1d' },\n      global: true,\n    }),\n    TypeOrmModule.forFeature([User]),\n    MailModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, ResponseService, GoogleStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkEmailExists\n                            \n                            \n                                    Async\n                                checkPhoneExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                formatUsername\n                            \n                            \n                                    Async\n                                googleLogin\n                            \n                            \n                                isEmail\n                            \n                            \n                                loginWithGoogle\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                usernameFormat\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                            \n                                    Async\n                                verifyOtp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService, i18n: I18nService, responseService: ResponseService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkEmailExists\n                        \n                    \n                \n            \n            \n                \ncheckEmailExists(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkPhoneExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkPhoneExists(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAuthDto: CreateAuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAuthDto\n                                            \n                                                            CreateAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(passwordDto: ForgetPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                passwordDto\n                                            \n                                                            ForgetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatUsername\n                        \n                    \n                \n            \n            \n                \nformatUsername(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:317\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin(req: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmail\n                        \n                    \n                \n            \n            \n                \nisEmail(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \nloginWithGoogle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { code: number; message: string; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(payload: ResetPasswordDto, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            ResetPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameFormat\n                        \n                    \n                \n            \n            \n                \nusernameFormat(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { email: string; phone?: undefined; } | { phone: string; email?: undefined; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(user: any, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOtp\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOtp(otp: OTPDto, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                otp\n                                            \n                                                            OTPDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  CreateAuthDto,\n  ForgetPasswordDto,\n  OTPDto,\n  ResetPasswordDto,\n} from './dto/create-auth.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@/modules/user/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseService } from '@/utils';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport * as bcrypt from 'bcrypt';\nimport { RolesEnum as Roles } from '@/enums';\nimport { MailService } from '../mails/mail.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly i18n: I18nService,\n    private readonly responseService: ResponseService,\n    private readonly mailService: MailService,\n  ) { }\n\n  async create(createAuthDto: CreateAuthDto) {\n    const lang = I18nContext.current().lang;\n\n    try {\n      const { username, password } = createAuthDto;\n      const user = this.usernameFormat(username);\n      if (this.isEmail(user?.email)) {\n        const emailExists = await this.checkEmailExists(user.email);\n        if (!emailExists) {\n          return this.responseService.Response({\n            data: null,\n            message: await this.i18n.t('response.AUTH.USER_NOT_FOUND', {\n              lang,\n            }),\n          });\n        }\n      }\n      const phoneExists = await this.checkPhoneExists(user.phone);\n      if (!phoneExists) {\n        return this.responseService.Response({\n          data: null,\n          message: await this.i18n.t('response.AUTH.USER_NOT_FOUND', {\n            lang,\n          }),\n        });\n      }\n      return this.validateUser(user, password);\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: errorMsg,\n      });\n    }\n  }\n\n  usernameFormat(username: string) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (emailRegex.test(username)) {\n      return {\n        email: username,\n      };\n    }\n    return {\n      phone: username,\n    };\n  }\n\n  async validateUser(user: any, password: string) {\n    const lang = I18nContext.current().lang;\n\n    const foundUser = await this.userRepository.findOne({\n      where: user,\n    });\n    if (!foundUser) {\n      return this.responseService.Response({\n        data: null,\n        message: await this.i18n.t('response.AUTH.USER_NOT_FOUND', {\n          lang,\n        }),\n      });\n    }\n    const isPasswordMatch = await bcrypt.compare(password, foundUser.password);\n    if (!isPasswordMatch) {\n      return this.responseService.Response({\n        data: null,\n        message: await this.i18n.t('response.AUTH.INVALID_CREDENTIALS', {\n          lang,\n        }),\n      });\n    }\n    const payload = { sub: foundUser.id, role: foundUser.role };\n    return this.responseService.Response({\n      data: this.jwtService.sign(payload),\n      statusCode: 200,\n      success: true,\n      message: await this.i18n.t('response.AUTH.LOGIN_SUCCESS', {\n        lang,\n      }),\n      key: 'access_token',\n    });\n  }\n\n  checkEmailExists(email: string): Promise {\n    return this.userRepository.exists({ where: { email } });\n  }\n  isEmail(username: string) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(username);\n  }\n  async checkPhoneExists(phone: string): Promise {\n    const user = this.userRepository.findOne({ where: { phone } });\n    return user.then((res) => {\n      return res ? true : false;\n    });\n  }\n\n  loginWithGoogle() {\n    return {\n      code: 200,\n      message: 'Login with Google',\n    };\n  }\n\n  async googleLogin(req: any) {\n    const lang = I18nContext.current().lang;\n    const emailExists = await this.checkEmailExists(req.user.email);\n    if (!emailExists) {\n      const userRole = Roles.USER;\n      const user = this.userRepository.create({\n        email: req.user.email,\n        name: req.user.firstName + ' ' + req.user.lastName,\n        role: userRole,\n        username: this.formatUsername(req.user.firstName),\n        password: await bcrypt.hash('password', 10),\n        profile_picture: req.user.picture,\n      });\n      await this.userRepository.save(user);\n    }\n    const user = await this.userRepository.findOne({\n      where: { email: req.user.email },\n    });\n    const payload = { sub: user.id, role: user.role };\n    return this.responseService.Response({\n      data: this.jwtService.sign(payload),\n      statusCode: 200,\n      success: true,\n      message: await this.i18n.t('response.AUTH.LOGIN_SUCCESS', {\n        lang,\n      }),\n      key: 'access_token',\n    });\n  }\n\n  async forgotPassword(passwordDto: ForgetPasswordDto) {\n    try {\n      const { username } = passwordDto;\n      const user = this.usernameFormat(username);\n      if (this.isEmail(user?.email)) {\n        const emailExists = this.checkEmailExists(user.email);\n        if (!emailExists) {\n          return this.responseService.Response({\n            data: null,\n            message: 'Email not found',\n          });\n        }\n      }\n      const phoneExists = await this.checkPhoneExists(user.phone);\n      if (!phoneExists) {\n        return this.responseService.Response({\n          data: null,\n          message: 'Phone number not found',\n          statusCode: 404,\n          success: false,\n        });\n      }\n      const existUser = await this.userRepository.findOne({ where: user });\n      if (!existUser) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n          statusCode: 404,\n          success: false,\n        });\n      }\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      await this.mailService.sendForgotPasswordEmail(\n        user.email,\n        otp,\n        existUser?.name,\n      );\n\n      const payload = {\n        otp,\n        exps: Math.floor(Date.now() / 1000) + 60 * 60,\n        id: existUser.id,\n      };\n\n      const token = this.jwtService.sign(payload);\n      return this.responseService.Response({\n        data: token,\n        message: 'Password reset link sent',\n        statusCode: 200,\n        success: true,\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: errorMsg,\n        statusCode: 500,\n        success: false,\n      });\n    }\n  }\n\n  async verifyOtp(otp: OTPDto, token: string) {\n    try {\n      const lang = I18nContext.current().lang;\n      const decoded = this.jwtService.decode(token) as any;\n      if (Number(decoded.otp) !== otp.otp) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.AUTH.OTP_INVALID', {\n            lang,\n          }),\n          statusCode: 400,\n          success: false,\n        });\n      }\n      if (decoded.exps \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticateMiddleware.html":{"url":"injectables/AuthenticateMiddleware.html","title":"injectable - AuthenticateMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticateMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/authenticate.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/middlewares/authenticate.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/authenticate.middleware.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport {\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Response, Request, NextFunction } from 'express';\nimport { ResponseService } from '@/utils';\n\n@Injectable()\nexport class AuthenticateMiddleware implements NestMiddleware {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly responseService: ResponseService,\n  ) { }\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const [bearer, token] = authHeader.split(' ');\n      if (bearer !== 'Bearer' || !token) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const user = await this.jwtService.verifyAsync(token, {\n        secret: 'secret',\n      });\n\n      req.user = user as User;\n    } catch (error) {\n      throw new UnauthorizedException(\n        this.responseService.Response({\n          success: false,\n          statusCode: 401,\n          message: 'Unauthorized',\n        }),\n      );\n    }\n    next();\n  }\n}\ninterface User {\n  sub: string;\n  iat: number;\n  exp: number;\n  readonly role: string;\n}\n\ndeclare module 'express' {\n  interface Request {\n    user?: User;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                created_at\n                            \n                            \n                                    \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                icon_url\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                updated_at\n                            \n                            \n                                    \n                                userCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        icon_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCategories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/entities/category.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { uuid } from '@/utils';\n\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nimport { UserCategory } from '@/modules/user-category/entities/user-category.entity';\n\n@Entity('categories')\nexport class Category {\n  constructor() {\n    this.id = uuid();\n  }\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  icon_url: string;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  @Type(() => Date)\n  created_at: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  @Type(() => Date)\n  updated_at: Date;\n\n  @DeleteDateColumn({ type: 'timestamp' })\n  @Type(() => Date)\n  deleted_at: Date;\n\n  @Type(() => UserCategory)\n  userCategories: UserCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post()@Version('1')@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateCategoryDto})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status: boolean | string | undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiQuery({name: 'status', required: false, type: Boolean, description: 'Filter by status'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                        boolean | string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('category')@ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Version('1')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)@ApiBearerAuth()@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('category')@ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN)@Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/category/category.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFiles,\n  UseInterceptors,\n  Version,\n  UseGuards,\n  Query,\n  ParseUUIDPipe,\n} from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport {\n  ApiTags,\n  ApiAcceptedResponse,\n  ApiConsumes,\n  ApiBearerAuth,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { storage } from '@/utils';\nimport { AuthGuard } from '@/guards';\nimport { Roles } from '@/decorators';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post()\n  @Version('1')\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateCategoryDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('category') },\n    ),\n  )\n  create(\n    @Body() createCategoryDto: CreateCategoryDto,\n    @UploadedFiles()\n    files: {\n      icon_url: Express.Multer.File;\n    },\n  ) {\n    return this.categoryService.create(createCategoryDto, files);\n  }\n\n  @ApiQuery({\n    name: 'status',\n    required: false,\n    type: Boolean,\n    description: 'Filter by status',\n  })\n  @Get()\n  findAll(@Query('status') status: boolean | string | undefined) {\n    return this.categoryService.findAll(status);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.categoryService.findOne(id);\n  }\n\n  @Version('1')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('/category') },\n    ),\n  )\n  @ApiBearerAuth()\n  @Patch(':id')\n  update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n    @UploadedFiles()\n    files: {\n      icon_url: Express.Multer.File;\n    },\n  ) {\n    return this.categoryService.update(id, updateCategoryDto, files);\n  }\n\n  @ApiTags('category')\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Delete(':id')\n  remove(@Param('id', ParseUUIDPipe) id: string) {\n    return this.categoryService.remove(id);\n  }\n\n  @ApiTags('category')\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Patch(':id/status')\n  updateStatus(@Param('id') id: string) {\n    return this.categoryService.changeStatus(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_exports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService \n\nCategoryService \n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryService  -->\n\nCategoryModule->CategoryService \n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nCategoryModule -->\n\nResponseService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\nimport { ResponseService } from '@/utils';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoryController],\n  providers: [CategoryService, ResponseService],\n  exports: [CategoryService],\n})\nexport class CategoryModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                categoryExist\n                            \n                            \n                                    Async\n                                changeStatus\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository, responseService: ResponseService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/category/category.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        categoryExist\n                        \n                    \n                \n            \n            \n                \n                        \n                    categoryExist(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatus(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto, files: FilesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: boolean | string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        boolean | string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto, files: FilesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/category/category.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCategoryDto, FilesDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\nimport { Repository } from 'typeorm';\nimport { removeFile, ResponseService } from '@/utils';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n  ) { }\n  /*\n   *Create Category function\n   */\n  async create(createCategoryDto: CreateCategoryDto, files: FilesDto) {\n    try {\n      const lang = I18nContext.current().lang;\n      const categoryExist = await this.categoryExist(createCategoryDto.name);\n      if (categoryExist) {\n        removeFile(files.icon_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_EXIST', { lang }),\n        });\n      }\n      const category = this.categoryRepository.create({\n        name: createCategoryDto.name.toLowerCase(),\n        description: createCategoryDto.description,\n        icon_url: 'category/' + files.icon_url[0]?.filename as string,\n        status: false,\n      });\n      await this.categoryRepository.save(category);\n      return this.responseService.Response({\n        data: category,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_CREATED_SUCCESSFULLY',\n          { lang },\n        ),\n        key: 'category',\n        statusCode: 201,\n        success: true,\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      const lang = I18nContext.current().lang;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: await this.i18n.t('validation.USER_REGISTER.USER_FAIL', {\n          lang,\n        }),\n        success: false,\n        key: 'categories',\n      });\n    }\n  }\n\n  async findAll(filter: boolean | string | null) {\n    const lang = I18nContext.current().lang;\n    const categories = await this.categoryRepository.find({\n      where: filter ? { status: filter as boolean } : {},\n    });\n    return this.responseService.Response({\n      data: categories,\n      message: this.i18n.t('response.CATEGORY.CATEGORY_FETCH_SUCCESSFULLY', {\n        lang,\n      }),\n    });\n  }\n\n  async findOne(id: string) {\n    const lang = I18nContext.current().lang;\n    try {\n      const categoryExist = await this.categoryRepository.findOne({\n        where: { id },\n      });\n      if (!categoryExist) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      return this.responseService.Response({\n        data: category,\n        message: this.i18n.t('response.CATEGORY.CATEGORY_FETCH_SUCCESSFULLY', {\n          lang,\n        }),\n        key: 'category',\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n\n  async update(\n    id: string,\n    updateCategoryDto: UpdateCategoryDto,\n    files: FilesDto,\n  ) {\n    const lang = I18nContext.current().lang;\n    try {\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      if (!category) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      if (files.icon_url) {\n        removeFile(category.icon_url);\n      }\n\n      const updatedCategory = await this.categoryRepository.save({\n        ...category,\n        ...updateCategoryDto,\n        icon_url: files\n          ? ('category/' + files.icon_url[0]?.filename as string)\n          : category.icon_url,\n      });\n      return this.responseService.Response({\n        data: updatedCategory,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_UPDATED_SUCCESSFULLY',\n          {\n            lang,\n          },\n        ),\n        key: 'category',\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const lang = I18nContext.current().lang;\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      if (!category) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      removeFile(category.icon_url);\n      await this.categoryRepository.delete(id);\n      return this.responseService.Response({\n        data: null,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_DELETED_SUCCESSFULLY',\n          {\n            lang,\n          },\n        ),\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n  protected async categoryExist(name: string): Promise {\n    const exist = await this.categoryRepository.findOne({\n      where: {\n        name: name.toLowerCase(),\n      },\n    });\n    if (exist) {\n      return true;\n    }\n    return false;\n  }\n\n  async changeStatus(id: string) {\n    const lang = I18nContext.current().lang;\n    try {\n      const category = await this.categoryRepository.findOne({ where: { id } });\n      if (!category) {\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND', {\n            lang,\n          }),\n          success: false,\n          statusCode: 404,\n        });\n      }\n      const updatedCategory = await this.categoryRepository.save({\n        ...category,\n        status: !category.status,\n      });\n      return this.responseService.Response({\n        data: updatedCategory,\n        message: this.i18n.t(\n          'response.CATEGORY.CATEGORY_STATUS_UPDATED_SUCCESSFULLY',\n          {\n            lang,\n          },\n        ),\n        key: 'category',\n      });\n    } catch (e) {\n      const { message } = e as Error;\n      return this.responseService.Response({\n        data: null,\n        message,\n        success: false,\n        statusCode: 500,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configs/config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            google\n                                        \n                                \n                                \n                                        \n                                            mail\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            prefix\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        google:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mail:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefix:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface Config {\n  prefix: string;\n  port: number;\n  secret: string;\n  google: {\n    clientId: string;\n    clientSecret: string;\n    callbackURL?: string;\n  };\n  mail: {\n    host: string;\n    auth: {\n      user: string;\n      pass: string;\n    };\n    port?: number;\n    from?: string;\n  };\n}\n\nexport const config = (): Config => ({\n  prefix: process.env.PREFIX || '!',\n  port: parseInt(process.env.PORT, 10) || 3000,\n  secret: process.env.JWT_SECRET || 'secret',\n  google: {\n    clientId: process.env.GOOGLE_CLIENT_ID || '',\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n    callbackURL:\n      process.env.GOOGLE_CALLBACK_URL ||\n      'http://localhost:3000/auth/google/callback',\n  },\n  mail: {\n    host: process.env.MAIL_HOST || 'smtp.gmail.com',\n    auth: {\n      user: process.env.MAIL_USER || '',\n      pass: process.env.MAIL_PASS || 'topsecret',\n    },\n    port: parseInt(process.env.MAIL_PORT, 10) || 587,\n    from:\n      `\"No Reply\" ${process.env.MAIL_FROM}` ||\n      '\"No Reply\" ',\n  },\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Course.html":{"url":"entities/Course.html","title":"entity - Course","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/entities/course.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                creator\n                            \n                            \n                                    \n                                    \n                                    \n                                currency\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                enroll\n                            \n                            \n                                    \n                                featured\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isFree\n                            \n                            \n                                    \n                                    \n                                lessons\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                thumbnail\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, category => category.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, default: 'USD'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        enroll\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Enroll\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, enroll => enroll.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isFree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lessons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Lesson[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@OneToMany(undefined, lesson => lesson.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 10, scale: 2})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})@IsString()@Unique('slug', ['slug'], {deferrable: 'INITIALLY DEFERRED'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/entities/course.entity.ts:103\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToOne,\n  ManyToOne,\n  DeleteDateColumn,\n  Unique,\n  OneToMany,\n} from 'typeorm';\n\nimport { IsString, IsNotEmpty } from 'class-validator';\nimport { uuid } from '@/utils';\n\nimport { User } from '@/modules/user/entities/user.entity';\nimport { Category } from '@/modules/category/entities/category.entity';\nimport { Enroll } from '@/modules/enrolls/entities/enroll.entity';\nimport { Lesson } from '@/modules/lessons/entities/lesson.entity';\nimport { Type } from 'class-transformer';\n\n@Entity('courses')\nexport class Course {\n  constructor() {\n    this.id = uuid();\n  }\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @Column({\n    nullable: false,\n    unique: true,\n  })\n  @IsString()\n  @Unique('slug', ['slug'], {\n    deferrable: 'INITIALLY DEFERRED',\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: false,\n  })\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  thumbnail: string;\n\n  @Column('decimal', {\n    precision: 10,\n    scale: 2,\n  })\n  @IsString()\n  @IsNotEmpty()\n  price: string;\n\n  @Column({\n    type: 'enum',\n    enum: ['USD', 'EUR', 'RFW'],\n    default: 'USD',\n  })\n  @IsString()\n  @IsNotEmpty()\n  currency: string;\n\n  @Column({ nullable: false, default: false })\n  isFree: boolean;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({ nullable: false, default: false })\n  featured: boolean;\n\n  @ManyToOne(() => User, (user) => user.id)\n  creator: User;\n\n  @ManyToOne(() => Enroll, (enroll) => enroll.id)\n  enroll: Enroll;\n\n  @OneToOne(() => Category, (category) => category.id)\n  category: Category;\n\n  @Type(() => Lesson)\n  @OneToMany(() => Lesson, (lesson) => lesson.id)\n  lessons: Lesson[];\n\n  @CreateDateColumn({ type: 'timestamp', nullable: false })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', nullable: false })\n  updatedAt: Date;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CoursesController.html":{"url":"controllers/CoursesController.html","title":"controller - CoursesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CoursesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/courses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                courses\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                changeStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findMyCourse\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatus(slug: string, status: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@ApiQuery({name: 'status', required: true, type: Boolean})@Put('change-status/:slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCourseDto: CreateCourseDto, files: literal type, user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post()@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateCourseDto})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCourseDto\n                                            \n                                                            CreateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findMyCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMyCourse(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('my-course')@ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(slug: string, updateCourseDto: UpdateCourseDto, files: literal type, user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: UpdateCourseDto})@UseInterceptors(undefined)@Patch(':slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/courses/courses.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCourseDto\n                                            \n                                                            UpdateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  UseInterceptors,\n  UploadedFiles,\n  Put,\n  Query,\n  DefaultValuePipe,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { CoursesService } from './courses.service';\nimport { CreateCourseDto } from './dto/create-course.dto';\nimport { UpdateCourseDto } from './dto/update-course.dto';\nimport {\n  ApiAcceptedResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { RolesEnum } from '@/enums';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { AssociativeArray, storage } from '@/utils';\n\n@ApiTags('courses')\n@Controller('courses')\nexport class CoursesController {\n  constructor(private readonly coursesService: CoursesService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post()\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateCourseDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'thumbnail_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('course') },\n    ),\n  )\n  create(\n    @Body() createCourseDto: CreateCourseDto,\n    @UploadedFiles()\n    files: {\n      thumbnail_url: Express.Multer.File[];\n    },\n    @User() user: AuthUserType,\n  ) {\n    return this.coursesService.create(createCourseDto, files, user);\n  }\n\n  @Get()\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,) {\n    return this.coursesService.findAll(filters);\n  }\n\n  @Get('my-course')\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  findMyCourse(@User() user: AuthUserType) {\n    return this.coursesService.findMyCourse(user);\n  }\n  @Get(':slug')\n  findOne(@Param('slug') slug: string) {\n    return this.coursesService.findOne(slug);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: UpdateCourseDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'thumbnail_url',\n          maxCount: 1,\n        },\n      ],\n      { storage },\n    ),\n  )\n  @Patch(':slug')\n  update(\n    @Param('slug') slug: string,\n    @Body() updateCourseDto: UpdateCourseDto,\n    @UploadedFiles()\n    files: {\n      thumbnail_url: Express.Multer.File[];\n    },\n    @User() user: AuthUserType,\n  ) {\n    return this.coursesService.update(slug, updateCourseDto, files, user);\n  }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.coursesService.remove(id);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @ApiQuery({ name: 'status', required: true, type: Boolean })\n  @Put('change-status/:slug')\n  changeStatus(@Param('slug') slug: string, @Query('status') status: boolean) {\n    return this.coursesService.changeStatus(slug, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoursesModule.html":{"url":"modules/CoursesModule.html","title":"module - CoursesModule","body":"\n                   \n\n\n\n\n    Modules\n    CoursesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoursesModule\n\n\n\ncluster_CoursesModule_exports\n\n\n\ncluster_CoursesModule_providers\n\n\n\ncluster_CoursesModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nCoursesModule\n\nCoursesModule\n\nCoursesModule -->\n\nUserModule->CoursesModule\n\n\n\n\n\nCoursesService \n\nCoursesService \n\nCoursesService  -->\n\nCoursesModule->CoursesService \n\n\n\n\n\nCoursesService\n\nCoursesService\n\nCoursesModule -->\n\nCoursesService->CoursesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/courses/courses.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CoursesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CoursesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CoursesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CoursesService } from './courses.service';\nimport { CoursesController } from './courses.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Course } from './entities/course.entity';\nimport { UserModule } from '../user';\nimport { Category } from '../category/entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Course, Category]), UserModule],\n  controllers: [CoursesController],\n  providers: [CoursesService],\n  exports: [CoursesService],\n})\nexport class CoursesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CoursesService.html":{"url":"injectables/CoursesService.html","title":"injectable - CoursesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CoursesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/courses.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeStatus\n                            \n                            \n                                    Async\n                                courseExist\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findMyCourse\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(courseRepository: Repository, categoryRepository: Repository, responseService: ResponseService, i18n: I18nService, userService: UserService, coursePagination: PaginateHelper)\n                    \n                \n                        \n                            \n                                Defined in src/modules/courses/courses.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        courseRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        coursePagination\n                                                  \n                                                        \n                                                                        PaginateHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatus(id: string, status: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:241\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        courseExist\n                        \n                    \n                \n            \n            \n                \n                        \n                    courseExist(title: string, slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCourseDto: CreateCourseDto, files: FilesDto, user: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCourseDto\n                                            \n                                                            CreateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMyCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMyCourse(user: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:274\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCourseDto: UpdateCourseDto, files: FilesDto, user: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/courses/courses.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCourseDto\n                                            \n                                                            UpdateCourseDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCourseDto, FilesDto } from './dto/create-course.dto';\nimport { UpdateCourseDto } from './dto/update-course.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Course } from './entities/course.entity';\nimport { Repository } from 'typeorm';\nimport {\n  generateSlug, removeFile, ResponseService,\n  AssociativeArray,\n  filterQueryBuilderFromRequest,\n} from '@/utils';\nimport { I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { AuthUserType } from '@/guards';\nimport { UserService } from '../user/user.service';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { Category } from '../category/entities/category.entity';\n\n@Injectable()\nexport class CoursesService {\n  constructor(\n    @InjectRepository(Course)\n    private courseRepository: Repository,\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n    private readonly userService: UserService,\n    private readonly coursePagination: PaginateHelper,\n  ) { }\n\n  async create(\n    createCourseDto: CreateCourseDto,\n    files: FilesDto,\n    user: AuthUserType,\n  ) {\n    try {\n      const slug = generateSlug(createCourseDto.title);\n      const courseExist = await this.courseExist(createCourseDto.title, slug);\n      const category = await this.categoryRepository.findOne({\n        where: { id: createCourseDto.category_id },\n      });\n      if (!category) {\n        removeFile(files.thumbnail_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.CATEGORY.CATEGORY_NOT_FOUND'),\n        });\n      }\n      if (courseExist) {\n        removeFile(files.thumbnail_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: this.i18n.t('response.COURSE.COURSE_EXIST'),\n        });\n      }\n\n      const images = 'course/' + files.thumbnail_url[0]?.filename;\n      const userDetail = await this.userService.userDetail(user.sub);\n      const course = this.courseRepository.create({\n        ...createCourseDto,\n        price: createCourseDto.price.toString(),\n        slug,\n        thumbnail: images,\n        isFree: createCourseDto.isFree === 'true',\n        featured: createCourseDto.featured === 'true',\n        creator: userDetail,\n        category\n      });\n      await this.courseRepository.save(course);\n      return this.responseService.Response({\n        data: course,\n        message: this.i18n.t('response.COURSE.COURSE_CREATED_SUCCESSFULLY'),\n        key: 'course',\n        statusCode: 201,\n        success: true,\n      });\n    } catch (e) {\n      removeFile(files.thumbnail_url[0].filename);\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: this.i18n.t('response.COURSE.COURSE_FAILED_TO_CREATE'),\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async findAll(filter?: AssociativeArray) {\n    try {\n      const coursesQuery = this.courseRepository.createQueryBuilder('course');\n      filterQueryBuilderFromRequest(coursesQuery, filter);\n      const courses = await this.coursePagination.run(coursesQuery);\n\n      return this.responseService.Response({\n        data: courses,\n        message: 'Courses fetched successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch courses',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async findOne(slug: string) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { slug },\n        relations: ['creator'],\n      });\n      return this.responseService.Response({\n        data: course,\n        message: 'Course fetched successfully',\n        success: true,\n        key: 'course',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch course',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async update(\n    id: string,\n    updateCourseDto: UpdateCourseDto,\n    files: FilesDto,\n    user: AuthUserType,\n  ) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id },\n        relations: ['creator'],\n      });\n      if (!course) {\n        removeFile(files.thumbnail_url[0].filename);\n        return this.responseService.Response({\n          data: null,\n          message: 'Course not found',\n          success: false,\n          key: 'courses',\n        });\n      }\n      let images: string;\n      if (files.thumbnail_url) {\n        images = files.thumbnail_url[0]?.filename;\n      } else {\n        images = course.thumbnail;\n      }\n\n      const userDetail = await this.userService.userDetail(user.sub);\n      const updatedCourse = await this.courseRepository.save({\n        ...course,\n        ...updateCourseDto,\n        thumbnail: images,\n        creator: userDetail,\n        isFree: updateCourseDto.isFree\n          ? updateCourseDto.isFree === 'true'\n          : course.isFree,\n        featured: updateCourseDto.featured\n          ? updateCourseDto.featured === 'true'\n          : course.featured,\n      });\n      return this.responseService.Response({\n        data: updatedCourse,\n        message: 'Course updated successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      removeFile(files.thumbnail_url[0].filename);\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to update course',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id },\n        relations: ['creator'],\n      })\n      if (!course) {\n        return this.responseService.Response({\n          data: null,\n          message: 'Course not found',\n          success: false,\n          key: 'courses',\n        });\n      }\n      if (course.thumbnail) {\n        removeFile(course.thumbnail);\n      }\n      await this.courseRepository.softDelete(id);\n\n      return this.responseService.Response({\n        data: null,\n        message: 'Course deleted successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to delete course',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n\n  async courseExist(title: string, slug: string): Promise {\n    const course = await this.courseRepository.exists({\n      where: {\n        title,\n        slug,\n      },\n    });\n    return course;\n  }\n\n  async changeStatus(id: string, status: boolean) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id },\n      });\n      if (!course) {\n        return this.responseService.Response({\n          data: null,\n          message: 'Course not found',\n          success: false,\n          key: 'courses',\n        });\n      }\n      const updatedCourse = await this.courseRepository.save({\n        ...course,\n        status,\n      });\n      return this.responseService.Response({\n        data: updatedCourse,\n        message: 'Course status updated successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to update course status',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n  async findMyCourse(user: AuthUserType) {\n    try {\n      const creator = await this.userService.userDetail(user.sub);\n      const courses = await this.courseRepository.find({\n        where: { creator },\n      });\n\n      return this.responseService.Response({\n        data: courses,\n        message: 'Courses fetched successfully',\n        success: true,\n        key: 'courses',\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch courses',\n        success: false,\n        key: 'courses',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'example@example.com | 078888888'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon_url\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Category Description', description: 'The description of the category'})@IsString({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'The icon url of the category', type: 'string', format: 'binary'})@IsString({message: undefined})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Category Name', description: 'The name of the category'})@IsString({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCategoryDto {\n  @ApiProperty({\n    example: 'Category Name',\n    description: 'The name of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  name: string;\n\n  @ApiProperty({\n    example: 'Category Description',\n    description: 'The description of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The icon url of the category',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  icon_url?: Express.Multer.File;\n}\n\nexport class FilesDto {\n  icon_url: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCourseDto.html":{"url":"classes/CreateCourseDto.html","title":"class - CreateCourseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCourseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/dto/create-course.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                category_id\n                            \n                            \n                                    \n                                    \n                                    \n                                currency\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                featured\n                            \n                            \n                                    \n                                    \n                                isFree\n                            \n                            \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                thumbnail_url\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        category_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'category Id', description: 'The category of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'USD', description: 'The currency of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Course Description', description: 'The description of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, type: 'boolean'})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isFree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, type: 'boolean'})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 200, description: 'The price of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        thumbnail_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'the Thumbnail Image', type: 'string', format: 'binary'})@IsString({message: undefined})@IsOptional({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Course Name', description: 'The name of the course'})@IsString()@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCourseDto {\n  @ApiProperty({\n    example: 'Course Name',\n    description: 'The name of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_NAME_REQUIRED',\n    ),\n  })\n  title: string;\n\n  @ApiProperty({\n    example: 'Course Description',\n    description: 'The description of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 200,\n    description: 'The price of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_PRICE_REQUIRED',\n    ),\n  })\n  price: string;\n\n  @ApiProperty({\n    example: 'USD',\n    description: 'The currency of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CURRENT_PRICE_REQUIRED',\n    ),\n  })\n  currency: string;\n\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FREE_REQUIRED',\n    ),\n  })\n  isFree: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'the Thumbnail Image',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  thumbnail_url: string;\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FEATURED_REQUIRED',\n    ),\n  })\n  featured: string;\n\n  @ApiProperty({\n    example: 'category Id',\n    description: 'The category of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CATEGORY_REQUIRED',\n    ),\n  })\n  category_id: string;\n}\n\nexport class FilesDto {\n  thumbnail_url: Express.Multer.File[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLessonDto.html":{"url":"classes/CreateLessonDto.html","title":"class - CreateLessonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLessonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/dto/create-lesson.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                content_url\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                contentMetadata\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isPublished\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                thumbnail\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        content_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'the File content ', type: 'string', format: 'binary'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contentMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isPublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false, type: 'boolean'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'the thumbnail', type: 'string', format: 'binary'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Lesson Title', description: 'Leason tilte must be listed'})@IsString()@IsNotEmpty({message: 'Lesson title is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LessonType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: LessonType, default: undefined})@IsEnum(LessonType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsEnum, ValidateIf } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { LessonType } from '../entities/lesson.entity';\n\nexport class CreateLessonDto {\n    @ApiProperty({\n        example: 'Lesson Title',\n        description: 'Leason tilte must be listed'\n    })\n    @IsString()\n    @IsNotEmpty({\n        message: 'Lesson title is required'\n    })\n    title: string;\n\n    @ApiProperty()\n    @IsString()\n    @IsOptional()\n    description?: string;\n\n    @ApiProperty({\n        enum: LessonType,\n        default: LessonType.PDF\n    })\n    @IsEnum(LessonType)\n    type: LessonType;\n\n    @ApiProperty({\n        example: {\n            \"user\": \"john\"\n        }\n    })\n    @IsOptional()\n    contentMetadata?: Record;\n    @ApiProperty({\n        example: false,\n        type: 'boolean'\n    })\n    @IsOptional()\n    isPublished?: boolean;\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the File content ',\n        type: 'string',\n        format: 'binary',\n\n    })\n    @IsOptional()\n    content_url?: string\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the thumbnail',\n        type: 'string',\n        format: 'binary',\n    })\n    @IsOptional()\n    thumbnail?: string\n}\n\nexport class FilesDTO {\n    content_url: Express.Multer.File;\n    thumbnail: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuizDto.html":{"url":"classes/CreateQuizDto.html","title":"class - CreateQuizDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuizDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/dto/create-quiz.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                questions\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Quiz Description', description: 'Quiz description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/dto/create-quiz.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/dto/create-quiz.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Quiz Title', description: 'Quiz title must be listed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/dto/create-quiz.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { QuestionType } from '../entities/quiz.entity';\n\nexport class CreateQuizDto {\n  @ApiProperty({\n    example: 'Quiz Title',\n    description: 'Quiz title must be listed',\n  })\n  title: string;\n  @ApiProperty({\n    example: 'Quiz Description',\n    description: 'Quiz description',\n  })\n  description?: string;\n  @ApiProperty({\n    example: [\n      {\n        text: 'Question 1',\n        type: QuestionType.SINGLE_CHOICE,\n        options: [\n          { text: 'Option A', isCorrect: true },\n          { text: 'Option B', isCorrect: false },\n          { text: 'Option C', isCorrect: false },\n          { text: 'Option D', isCorrect: false },\n        ],\n      },\n      {\n        text: 'Question 2',\n        type: QuestionType.TEXT,\n        correctAnswers: ['Answer 1'],\n      },\n    ],\n  })\n  questions: {\n    text: string;\n    type: QuestionType;\n    options?: {\n      text: string;\n      isCorrect: boolean;\n    }[];\n    correctAnswers?: string[];\n  }[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCategoryDto.html":{"url":"classes/CreateUserCategoryDto.html","title":"class - CreateUserCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/dto/create-user-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                categoryId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({})@IsArray()@IsString({each: true, message: undefined})@IsNotEmpty({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/dto/create-user-category.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsArray } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateUserCategoryDto {\n  @ApiProperty({})\n  @IsArray()\n  @IsString({\n    each: true,\n    message: i18nValidationMessage(\n      'validation.USER_CATEGORY_REGISTER.CATEGORY_ID_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_CATEGORY_REGISTER.CATEGORY_ID_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_CATEGORY_REGISTER.CATEGORY_ID_REQUIRED',\n    ),\n  })\n  categoryId: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'example@example.com', description: 'The email of the user'})@IsEmail({allow_ip_domain: false, allow_utf8_local_part: true, require_tld: true}, {message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe', description: 'The name of the user'})@IsString({message: undefined})@IsNotEmpty()@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'johndoe', description: 'The password '})@IsString()@IsNotEmpty({message: undefined})@MinLength(6, {message: undefined})@Matches(/^[a-zA-Z0-9]+$/, {message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+250788888888', description: 'The phone number of the user'})@IsPhoneNumber('RW', {message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Default value : Roles.USER\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user', description: 'The role of the user'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john_doe', description: 'The username of the user'})@IsString({message: undefined})@IsNotEmpty({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n  IsPhoneNumber,\n  IsOptional,\n} from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { RolesEnum as Roles } from '@/enums';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john_doe',\n    description: 'The username of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The name of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @MaxLength(50)\n  name: string;\n\n  @ApiProperty({\n    example: 'example@example.com',\n    description: 'The email of the user',\n  })\n  @IsEmail(\n    {\n      allow_ip_domain: false,\n      allow_utf8_local_part: true,\n      require_tld: true,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.USER_REGISTER.EMAIL_INVALID',\n      ),\n    },\n  )\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.EMAIL_REQUIRED',\n    ),\n  })\n  email: string;\n  @ApiProperty({\n    example: '+250788888888',\n    description: 'The phone number of the user',\n  })\n  @IsPhoneNumber('RW', {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_INVALID',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_REQUIRED',\n    ),\n  })\n  phone: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'The role of the user',\n  })\n  @IsOptional()\n  role: Roles = Roles.USER;\n\n  @ApiProperty({\n    example: 'johndoe',\n    description: 'The password ',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_REQUIRED',\n    ),\n  })\n  @MinLength(6, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MIN',\n    ),\n  })\n  @Matches(/^[a-zA-Z0-9]+$/, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MATCH',\n    ),\n  })\n  password: string;\n}\n\n\nexport class ProfileDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The profile picture of the user',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PROFILE_PIC_REQUIRED',\n    ),\n  })\n  profile_picture?: Express.Multer.File;\n\n  @ApiProperty({\n    example: 'Kigali, Rwanda',\n    description: 'The address of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.ADDRESS_REQUIRED',\n    ),\n  })\n  address: string;\n\n  @ApiProperty({\n    example: 'I am a software engineer',\n    description: 'The bio of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.BIO_REQUIRED',\n    ),\n  })\n  bio: string;\n}\nexport class ImagePicDto {\n  profile_picture: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomExceptionFilter.html":{"url":"classes/CustomExceptionFilter.html","title":"class - CustomExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/response/index.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/response/index.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomResponseInterceptor.html":{"url":"classes/CustomResponseInterceptor.html","title":"class - CustomResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/response.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/response.interceptor.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, NestInterceptor } from '@nestjs/common';\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nexport class CustomResponseInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    const request = context.switchToHttp().getRequest();\n    const response = context.switchToHttp().getResponse();\n    const statusCode = response.statusCode;\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        statusCode,\n        success: true,\n        message: statusCode >= 400 ? 'Error' : 'Success',\n        error: statusCode >= 400 ? response.message : null,\n        timestamp: Date.now(),\n        version: 'v1',\n        path: request.url,\n      })),\n      catchError((err) => {\n        const statusCode = err instanceof HttpException ? err.getStatus() : 500;\n        const errorResponse = {\n          statusCode,\n          message: err.message || 'Internal server error',\n          error: err.name || 'Error',\n          timestamp: Date.now(),\n          version: 'v1',\n          path: request.url,\n          data: {},\n        };\n        return throwError(() => new HttpException(errorResponse, statusCode));\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configs/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        connectToDatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    connectToDatabase()\n                \n            \n\n\n                    \n                        \n                            Defined in src/configs/db.module.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { config } from './config';\nimport { Logger } from '@/utils';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [config],\n      envFilePath: ['.env', '.env.development', '.env.production'],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DbModule {\n  constructor(private readonly configService: ConfigService) {\n    this.connectToDatabase();\n  }\n\n  private async connectToDatabase() {\n    const databaseName = this.configService.get('DB_DATABASE');\n    const connection = TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE'),\n      }),\n      inject: [ConfigService],\n    });\n\n    try {\n      await connection;\n      Logger.logger.log(`Database is connected successfully 🌏🔥`);\n    } catch (error) {\n      const message = (error as Error).message;\n      Logger.logger.error(`Failed to connect to ${databaseName} database`, {\n        error: message,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DefaultModule.html":{"url":"modules/DefaultModule.html","title":"module - DefaultModule","body":"\n                   \n\n\n\n\n    Modules\n    DefaultModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DefaultModule\n\n\n\ncluster_DefaultModule_providers\n\n\n\n\nDefaultService\n\nDefaultService\n\n\n\nDefaultModule\n\nDefaultModule\n\nDefaultModule -->\n\nDefaultService->DefaultModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nDefaultModule -->\n\nResponseService->DefaultModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/default/default.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DefaultService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ResponseService } from '@/utils';\nimport { Controller, Get, Injectable, Module } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class DefaultService {\n  constructor(\n    private readonly responseService: ResponseService,\n    private readonly I18nService: I18nService,\n  ) {}\n  getHello() {\n    const lang = I18nContext.current().lang;\n    return this.responseService.Response({\n      success: true,\n      statusCode: 200,\n      data: {\n        message: this.I18nService.translate('response.DEFAULT_MESSAGE', {\n          lang,\n        }),\n      },\n      message: this.I18nService.translate('response.DEFAULT_MESSAGE', { lang }),\n    });\n  }\n}\n\n@Controller('/')\n@ApiTags('App')\nclass AppController {\n  constructor(private readonly DefaultService: DefaultService) {}\n  @Get()\n  getHello() {\n    return this.DefaultService.getHello();\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  providers: [ResponseService, DefaultService],\n})\nexport class DefaultModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DefaultService.html":{"url":"injectables/DefaultService.html","title":"injectable - DefaultService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DefaultService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/default/default.module.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(responseService: ResponseService, I18nService: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/default/default.module.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        I18nService\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/default/default.module.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ResponseService } from '@/utils';\nimport { Controller, Get, Injectable, Module } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { I18nTranslations } from '@/generated';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class DefaultService {\n  constructor(\n    private readonly responseService: ResponseService,\n    private readonly I18nService: I18nService,\n  ) {}\n  getHello() {\n    const lang = I18nContext.current().lang;\n    return this.responseService.Response({\n      success: true,\n      statusCode: 200,\n      data: {\n        message: this.I18nService.translate('response.DEFAULT_MESSAGE', {\n          lang,\n        }),\n      },\n      message: this.I18nService.translate('response.DEFAULT_MESSAGE', { lang }),\n    });\n  }\n}\n\n@Controller('/')\n@ApiTags('App')\nclass AppController {\n  constructor(private readonly DefaultService: DefaultService) {}\n  @Get()\n  getHello() {\n    return this.DefaultService.getHello();\n  }\n}\n\n@Module({\n  controllers: [AppController],\n  providers: [ResponseService, DefaultService],\n})\nexport class DefaultModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Enroll.html":{"url":"entities/Enroll.html","title":"entity - Enroll","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Enroll\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/enrolls/entities/enroll.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                course\n                            \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                student\n                            \n                            \n                                    \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        course\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Course\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ManyToOne(undefined, course => course.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        student\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/entities/enroll.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, ManyToOne, JoinColumn, JoinTable } from \"typeorm\";\nimport { User } from \"@/modules/user/entities/user.entity\";\nimport { Course } from '@/modules/courses/entities/course.entity';\nimport { Type } from \"class-transformer\";\nimport { uuid } from \"@/utils\";\nimport \"reflect-metadata\";\n\n@Entity('enrolles')\nexport class Enroll {\n    constructor(partial: Partial) {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Type(() => Course)\n    @ManyToOne(() => Course, course => course.id)\n    course: Course;\n\n    @Type(() => User)\n    @ManyToOne(() => User, user => user.id)\n    student: User;\n\n    @Column({ default: true })\n    status: boolean;\n\n    @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n    created_at: Date;\n    @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n    updated_at: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    deleted_at: Date;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EnrollsController.html":{"url":"controllers/EnrollsController.html","title":"controller - EnrollsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EnrollsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/enrolls/enrolls.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                enrolls\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                changeStatusCourse\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                enrollCourse\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getInstructorEnrollsCourses\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getStudentEnrollsCourses\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                unenrollCourse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        changeStatusCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeStatusCourse(user: AuthUserType, courseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@Patch('/:courseId/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        enrollCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    enrollCourse(user: AuthUserType, courseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@UseGuards(AuthGuard)@Post('/:courseId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getInstructorEnrollsCourses\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInstructorEnrollsCourses(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR, RolesEnum.MENTOR)@UseGuards(AuthGuard)@Get('instructor')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getStudentEnrollsCourses\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStudentEnrollsCourses(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@Get('courses')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        unenrollCourse\n                        \n                    \n                \n            \n            \n                \n                        \n                    unenrollCourse(user: AuthUserType, courseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.ALL)@Put('/:courseId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/enrolls/enrolls.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Patch, Post, Put, UseGuards } from '@nestjs/common';\nimport { EnrollsService } from './enrolls.service';\nimport { Roles, User } from '@/decorators';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('enrolls')\n@Controller('enrolls')\nexport class EnrollsController {\n  constructor(private readonly enrollsService: EnrollsService) { }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @Get('courses')\n  getStudentEnrollsCourses(@User() user: AuthUserType) {\n    return this.enrollsService.studentGetEnrollsCourses(user);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR, RolesEnum.MENTOR)\n  @UseGuards(AuthGuard)\n  @Get('instructor')\n  getInstructorEnrollsCourses(@User() user: AuthUserType) {\n    return this.enrollsService.instructorGetEnrollsCourses(user);\n  }\n\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  @Post('/:courseId')\n  enrollCourse(@User() user: AuthUserType, @Param('courseId') courseId: string) {\n    return this.enrollsService.studentEnroll(courseId, user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @Put('/:courseId')\n  unenrollCourse(@User() user: AuthUserType, @Param('courseId') courseId: string) {\n    return this.enrollsService.unenrollCourse(courseId, user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.ALL)\n  @Patch('/:courseId/status')\n  changeStatusCourse(@User() user: AuthUserType, @Param('courseId') courseId: string) {\n    return this.enrollsService.studentEnrollChangeStatus(courseId, user);\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnrollsModule.html":{"url":"modules/EnrollsModule.html","title":"module - EnrollsModule","body":"\n                   \n\n\n\n\n    Modules\n    EnrollsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EnrollsModule\n\n\n\ncluster_EnrollsModule_providers\n\n\n\ncluster_EnrollsModule_exports\n\n\n\n\nEnrollsService \n\nEnrollsService \n\n\n\nEnrollsModule\n\nEnrollsModule\n\nEnrollsService  -->\n\nEnrollsModule->EnrollsService \n\n\n\n\n\nEnrollsService\n\nEnrollsService\n\nEnrollsModule -->\n\nEnrollsService->EnrollsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/enrolls/enrolls.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EnrollsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EnrollsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EnrollsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EnrollsService } from './enrolls.service';\nimport { EnrollsController } from './enrolls.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Enroll } from './entities/enroll.entity';\nimport { Course } from '../courses/entities/course.entity';\nimport { User } from '../user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Enroll, User, Course])],\n  controllers: [EnrollsController],\n  providers: [EnrollsService],\n  exports: [EnrollsService],\n})\nexport class EnrollsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EnrollsService.html":{"url":"injectables/EnrollsService.html","title":"injectable - EnrollsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EnrollsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/enrolls/enrolls.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                instructorGetEnrollsCourses\n                            \n                            \n                                studentEnroll\n                            \n                            \n                                studentEnrollChangeStatus\n                            \n                            \n                                studentGetEnrollsCourses\n                            \n                            \n                                unenrollCourse\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(enrollRepository: Repository, userRepository: Repository, courseRepository: Repository, responseService: ResponseService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/enrolls/enrolls.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        enrollRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        courseRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        instructorGetEnrollsCourses\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        studentEnroll\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        studentEnrollChangeStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        studentGetEnrollsCourses\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unenrollCourse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/modules/enrolls/enrolls.service.ts:72\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Enroll } from './entities/enroll.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Course } from '../courses/entities/course.entity';\nimport { ResponseService } from '@/utils';\nimport { AuthUserType } from '@/guards';\nimport { I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\n@Injectable()\nexport class EnrollsService {\n    constructor(\n        @InjectRepository(Enroll)\n        private enrollRepository: Repository,\n        @InjectRepository(User)\n        private userRepository: Repository,\n        @InjectRepository(Course)\n        private courseRepository: Repository,\n        private readonly responseService: ResponseService,\n        private readonly i18n: I18nService,\n\n    ) { }\n\n    studentEnroll = async (courseId: string, student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const existUserEnrolled = await this.enrollRepository.findOne({\n                where: {\n                    course: { id: courseId },\n                    student: user,\n                }\n            })\n            if (existUserEnrolled) {\n                return this.responseService.Response({\n                    message: 'You have already enrolled in this course',\n                    data: null\n                })\n            }\n            const course = await this.courseRepository.findOne({\n                where: { id: courseId }\n            })\n            if (!course) {\n                return this.responseService.Response({\n                    message: 'Course not found',\n                    data: null\n                })\n            }\n            const enroll = this.enrollRepository.create({\n                course,\n                student: user\n            })\n            await this.enrollRepository.save(enroll)\n            return this.responseService.Response({\n                message: 'Enrolled successfully',\n                data: enroll,\n                key: 'enroll'\n            })\n\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n\n    unenrollCourse = async (courseId: string, student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const enroll = await this.enrollRepository.findOne({\n                where: {\n                    course: { id: courseId },\n                    student: user\n                }\n            })\n            if (!enroll) {\n                return this.responseService.Response({\n                    message: 'You have not enrolled in this course',\n                    data: null\n                })\n            }\n            await this.enrollRepository.remove(enroll)\n            return this.responseService.Response({\n                message: 'Unenrolled successfully',\n                data: null\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n    studentEnrollChangeStatus = async (courseId: string, student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const enroll = await this.enrollRepository.createQueryBuilder('enroll')\n                .leftJoinAndSelect('enroll.course', 'course')\n                .where('enroll.student.id = :id',\n                    { id: user.id })\n                .andWhere('course.id = :courseId', { courseId })\n                .getOne()\n\n            if (!enroll) {\n                return this.responseService.Response({\n                    message: 'You have not enrolled in this course',\n                    data: null\n                })\n            }\n            const updatedEnroll = await this.enrollRepository.save({\n                ...enroll,\n                status: !enroll.status\n            })\n            return this.responseService.Response({\n                message: 'Enroll status updated successfully',\n                data: updatedEnroll,\n                key: 'enroll'\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n    studentGetEnrollsCourses = async (student: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: student.sub }\n            })\n            const enrolls = await this.enrollRepository.createQueryBuilder('enroll')\n                .leftJoinAndSelect('enroll.course', 'course')\n                .where('enroll.student.id = :id',\n                    { id: user.id })\n                .getMany()\n            return this.responseService.Response({\n                message: 'Enrolls fetched successfully',\n                data: enrolls,\n                key: 'enrolls'\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n\n\n    instructorGetEnrollsCourses = async (instructor: AuthUserType) => {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { id: instructor.sub }\n            })\n            const enrolls = await this.enrollRepository.createQueryBuilder('enroll')\n                .leftJoinAndSelect('enroll.course', 'course')\n                .where('course.creator.id = :id',\n                    { id: user.id })\n                .getMany()\n            return this.responseService.Response({\n                message: 'Enrolls fetched successfully',\n                data: enrolls,\n                key: 'enrolls'\n            })\n        } catch (error) {\n            const message = (error as Error).message\n            return this.responseService.Response({\n                message,\n                data: null\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileRequestFilter.html":{"url":"injectables/FileRequestFilter.html","title":"injectable - FileRequestFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileRequestFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/file-request.filter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fileRequest: string)\n                    \n                \n                        \n                            \n                                Defined in src/filters/file-request.filter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fileRequest\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/file-request.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  Inject,\n} from '@nestjs/common';\n\n@Injectable()\nexport class FileRequestFilter implements PipeTransform {\n  constructor(@Inject('FILE_REQUEST') private readonly fileRequest: string) {}\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (metadata.type === 'body' && metadata.data === this.fileRequest) {\n      const file = value[this.fileRequest];\n      if (file) {\n        value[this.fileRequest] = file[0];\n      }\n    }\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesDTO.html":{"url":"classes/FilesDTO.html","title":"class - FilesDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/dto/create-lesson.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content_url\n                            \n                            \n                                thumbnail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/dto/create-lesson.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsEnum, ValidateIf } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { LessonType } from '../entities/lesson.entity';\n\nexport class CreateLessonDto {\n    @ApiProperty({\n        example: 'Lesson Title',\n        description: 'Leason tilte must be listed'\n    })\n    @IsString()\n    @IsNotEmpty({\n        message: 'Lesson title is required'\n    })\n    title: string;\n\n    @ApiProperty()\n    @IsString()\n    @IsOptional()\n    description?: string;\n\n    @ApiProperty({\n        enum: LessonType,\n        default: LessonType.PDF\n    })\n    @IsEnum(LessonType)\n    type: LessonType;\n\n    @ApiProperty({\n        example: {\n            \"user\": \"john\"\n        }\n    })\n    @IsOptional()\n    contentMetadata?: Record;\n    @ApiProperty({\n        example: false,\n        type: 'boolean'\n    })\n    @IsOptional()\n    isPublished?: boolean;\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the File content ',\n        type: 'string',\n        format: 'binary',\n\n    })\n    @IsOptional()\n    content_url?: string\n\n    @ApiProperty({\n        example: 'https://example.com/icon.png',\n        description: 'the thumbnail',\n        type: 'string',\n        format: 'binary',\n    })\n    @IsOptional()\n    thumbnail?: string\n}\n\nexport class FilesDTO {\n    content_url: Express.Multer.File;\n    thumbnail: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesDto.html":{"url":"classes/FilesDto.html","title":"class - FilesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                icon_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        icon_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/category/dto/create-category.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCategoryDto {\n  @ApiProperty({\n    example: 'Category Name',\n    description: 'The name of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  name: string;\n\n  @ApiProperty({\n    example: 'Category Description',\n    description: 'The description of the category',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The icon url of the category',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.CATEGORY_REGISTER.ICON_URL_REQUIRED',\n    ),\n  })\n  icon_url?: Express.Multer.File;\n}\n\nexport class FilesDto {\n  icon_url: Express.Multer.File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesDto-1.html":{"url":"classes/FilesDto-1.html","title":"class - FilesDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/dto/create-course.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                thumbnail_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        thumbnail_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/courses/dto/create-course.dto.ts:108\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateCourseDto {\n  @ApiProperty({\n    example: 'Course Name',\n    description: 'The name of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_NAME_REQUIRED',\n    ),\n  })\n  title: string;\n\n  @ApiProperty({\n    example: 'Course Description',\n    description: 'The description of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_DESCRIPTION_REQUIRED',\n    ),\n  })\n  description: string;\n\n  @ApiProperty({\n    example: 200,\n    description: 'The price of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_PRICE_REQUIRED',\n    ),\n  })\n  price: string;\n\n  @ApiProperty({\n    example: 'USD',\n    description: 'The currency of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CURRENT_PRICE_REQUIRED',\n    ),\n  })\n  currency: string;\n\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FREE_REQUIRED',\n    ),\n  })\n  isFree: string;\n\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'the Thumbnail Image',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_THUMBNAIL_REQUIRED',\n    ),\n  })\n  thumbnail_url: string;\n  @ApiProperty({\n    example: false,\n    type: 'boolean',\n  })\n  @IsOptional({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_IS_FEATURED_REQUIRED',\n    ),\n  })\n  featured: string;\n\n  @ApiProperty({\n    example: 'category Id',\n    description: 'The category of the course',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.COURSES.COURSE_CATEGORY_REQUIRED',\n    ),\n  })\n  category_id: string;\n}\n\nexport class FilesDto {\n  thumbnail_url: Express.Multer.File[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgetPasswordDto.html":{"url":"classes/ForgetPasswordDto.html","title":"class - ForgetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'email or Phone Number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/google.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/strategy/google.strategy.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/strategy/google.strategy.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\n\nimport { config } from '@/configs';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: config().google.clientId,\n      clientSecret: config().google.clientSecret,\n      callbackURL: config().google.callbackURL,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ) {\n    const { name, emails, photos } = profile;\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n    };\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/bad-request.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _validationFilter\n                            \n                            \n                                catch\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/filters/bad-request.filter.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/filters/bad-request.filter.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    _validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/bad-request.filter.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: BadRequestException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/bad-request.filter.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            BadRequestException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[], seen)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/bad-request.filter.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                seen\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    new WeakSet()\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport { STATUS_CODES } from 'http';\nimport * as _ from 'lodash';\n\ninterface ValidationResponse {\n  data: Record;\n}\n\n@Catch(BadRequestException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(public reflector: Reflector) { }\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const response = ctx.getResponse();\n    let statusCode = exception.getStatus();\n    const r = exception.getResponse();\n\n    if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n      statusCode = HttpStatus.UNPROCESSABLE_ENTITY;\n      const validationErrors = r.message;\n      this._validationFilter(validationErrors);\n    }\n    const formattedErrors = this.formatErrors(r.message);\n    r.statusCode = statusCode;\n    r.error = STATUS_CODES[statusCode];\n\n    throw response.status(statusCode).json(formattedErrors);\n  }\n\n  private _validationFilter(validationErrors: ValidationError[]) {\n    for (const validationError of validationErrors) {\n      for (const [constraintKey, constraint] of Object.entries(\n        validationError.constraints,\n      )) {\n        if (!constraint) {\n          // convert error message to error.fields.{key} syntax for i18n translation\n          validationError.constraints[constraintKey] =\n            'error.fields.' + _.snakeCase(constraintKey);\n        }\n      }\n      if (!_.isEmpty(validationError.children)) {\n        this._validationFilter(validationError.children);\n      }\n    }\n  }\n\n  private formatErrors(\n    errors: ValidationError[],\n    seen = new WeakSet(),\n  ): ValidationResponse {\n    const errMsg = {};\n\n    if (_.isArray(errors) && errors.length === 0) {\n      errors.forEach((error: ValidationError) => {\n        if (seen.has(error)) {\n          return;\n        }\n        seen.add(error);\n\n        if (error.constraints) {\n          errMsg[error.property] = Object.values(error.constraints);\n        } else if (error.children && error.children.length > 0) {\n          errMsg[error.property] = this.formatErrors(error.children);\n        } else {\n          errMsg[error.property] = ['Unknown validation error'];\n        }\n      });\n      const formattedErrors = {\n        data: errMsg,\n      };\n      return formattedErrors;\n    } else if (!_.isEmpty(errors)) {\n      if (_.isString(errors)) {\n        errMsg['error'] = errors;\n        return {\n          data: errMsg,\n        };\n      }\n    } else {\n      return { data: {} };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/I18nConfigModule.html":{"url":"modules/I18nConfigModule.html","title":"module - I18nConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    I18nConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configs/i18n.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {\n  I18nModule,\n  AcceptLanguageResolver,\n  QueryResolver,\n  HeaderResolver,\n  CookieResolver,\n} from 'nestjs-i18n';\nimport * as path from 'path';\nimport { ConfigService } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    I18nModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        global: true,\n        fallbackLanguage: configService.getOrThrow('FALLBACK_LANGUAGE'),\n        loaderOptions: {\n          path: path.join(__dirname, '../i18n/'),\n          watch: configService.get('I18N_WATCH'),\n        },\n        logging: configService.get('I18N_LOGGING'),\n        typesOutputPath: path.join(\n          __dirname,\n          '../../src/generated/i18n.generated.ts',\n        ),\n      }),\n      resolvers: [\n        {\n          use: QueryResolver,\n          options: ['lang'],\n        },\n        new HeaderResolver(['x-lang']),\n        new CookieResolver(),\n        AcceptLanguageResolver,\n      ],\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class I18nConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IRequest.html":{"url":"classes/IRequest.html","title":"class - IRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(IResponseData)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IResponseData.html":{"url":"classes/IResponseData.html","title":"class - IResponseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IResponseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                    Optional\n                                key\n                            \n                            \n                                message\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                            \n                                    Optional\n                                requestId\n                            \n                            \n                                statusCode\n                            \n                            \n                                success\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'data'\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : HttpStatus.OK\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : Date.now()\n                    \n                \n                    \n                        \n                                Defined in src/utils/response/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImagePicDto.html":{"url":"classes/ImagePicDto.html","title":"class - ImagePicDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImagePicDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                profile_picture\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:153\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n  IsPhoneNumber,\n  IsOptional,\n} from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { RolesEnum as Roles } from '@/enums';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john_doe',\n    description: 'The username of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The name of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @MaxLength(50)\n  name: string;\n\n  @ApiProperty({\n    example: 'example@example.com',\n    description: 'The email of the user',\n  })\n  @IsEmail(\n    {\n      allow_ip_domain: false,\n      allow_utf8_local_part: true,\n      require_tld: true,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.USER_REGISTER.EMAIL_INVALID',\n      ),\n    },\n  )\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.EMAIL_REQUIRED',\n    ),\n  })\n  email: string;\n  @ApiProperty({\n    example: '+250788888888',\n    description: 'The phone number of the user',\n  })\n  @IsPhoneNumber('RW', {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_INVALID',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_REQUIRED',\n    ),\n  })\n  phone: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'The role of the user',\n  })\n  @IsOptional()\n  role: Roles = Roles.USER;\n\n  @ApiProperty({\n    example: 'johndoe',\n    description: 'The password ',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_REQUIRED',\n    ),\n  })\n  @MinLength(6, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MIN',\n    ),\n  })\n  @Matches(/^[a-zA-Z0-9]+$/, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MATCH',\n    ),\n  })\n  password: string;\n}\n\n\nexport class ProfileDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The profile picture of the user',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PROFILE_PIC_REQUIRED',\n    ),\n  })\n  profile_picture?: Express.Multer.File;\n\n  @ApiProperty({\n    example: 'Kigali, Rwanda',\n    description: 'The address of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.ADDRESS_REQUIRED',\n    ),\n  })\n  address: string;\n\n  @ApiProperty({\n    example: 'I am a software engineer',\n    description: 'The bio of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.BIO_REQUIRED',\n    ),\n  })\n  bio: string;\n}\nexport class ImagePicDto {\n  profile_picture: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IsAuthorizedParams.html":{"url":"interfaces/IsAuthorizedParams.html","title":"interface - IsAuthorizedParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IsAuthorizedParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/access-control.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentRole\n                                        \n                                \n                                \n                                        \n                                            requiredRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentRole:         Role\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requiredRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requiredRole:         Role\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RolesEnum as Role } from '@/enums';\n\ninterface IsAuthorizedParams {\n  currentRole: Role;\n  requiredRole: Role;\n}\n\n@Injectable()\nexport class AccessContorlService {\n  private hierarchies: Array> = [];\n  private priority = 1;\n\n  constructor() {\n    this.buildRoles([Role.ADMIN]);\n    this.buildRoles([Role.GUEST, Role.USER, Role.ADMIN]);\n  }\n\n  /**\n   * The buildRoles method allows for creating a role hierarchy between specified set of roles.\n   * Roles have to be specified from least privileged user to the most privileged one\n   * @param roles Array that contains a list of roles\n   */\n  private buildRoles(roles: Role[]) {\n    const hierarchy: Map = new Map();\n    roles.forEach((role) => {\n      hierarchy.set(role, this.priority);\n      this.priority++;\n    });\n    this.hierarchies.push(hierarchy);\n  }\n\n  public isAuthorized({ currentRole, requiredRole }: IsAuthorizedParams) {\n    for (const hierarchy of this.hierarchies) {\n      const priority = hierarchy.get(currentRole);\n      const requiredPriority = hierarchy.get(requiredRole);\n\n      if (\n        priority !== undefined &&\n        requiredPriority !== undefined &&\n        priority \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/strategy/jwt.strategy.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/strategy/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secret: 'secret',\n      secretOrKey: 'secret',\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.sub, role: payload.role };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguageMiddleware.html":{"url":"injectables/LanguageMiddleware.html","title":"injectable - LanguageMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguageMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/language.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(i18nService: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/middlewares/language.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i18nService\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/middlewares/language.middleware.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class LanguageMiddleware implements NestMiddleware {\n  constructor(private readonly i18nService: I18nService) {}\n  use(req: Request, res: Response, next: NextFunction) {\n    const lang = req.headers['x-lang'] as string;\n    this.i18nService.resolveLanguage(lang);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Lesson.html":{"url":"entities/Lesson.html","title":"entity - Lesson","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Lesson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/entities/lesson.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                contentMetadata\n                            \n                            \n                                    \n                                    Optional\n                                contentUrl\n                            \n                            \n                                    \n                                    \n                                course\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                position\n                            \n                            \n                                    \n                                    Optional\n                                quiz\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    Optional\n                                thumbnail\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contentMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contentUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        course\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Course\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ManyToOne(undefined, course => course.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        quiz\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Quiz\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})@IsString()@Unique('slug', ['slug'], {deferrable: 'INITIALLY DEFERRED'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LessonType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: LessonType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/lessons/entities/lesson.entity.ts:68\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryColumn, ManyToOne, Unique, CreateDateColumn, UpdateDateColumn, DeleteDateColumn, OneToOne, } from \"typeorm\";\nimport { uuid } from \"@/utils\";\nimport { Type } from \"class-transformer\";\nimport { Course } from \"@/modules/courses/entities/course.entity\";\nimport { IsString } from \"class-validator\";\nimport { Quiz } from \"@/modules/quiz/entities/quiz.entity\";\n\nexport enum LessonType {\n    VIDEO = 'video',\n    PDF = 'pdf',\n    QUIZ = 'quiz',\n    ARTICLE = 'article',\n}\n\n@Entity()\nexport class Lesson {\n    constructor(partial: Partial) {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column({\n        nullable: false,\n        unique: true,\n    })\n    @IsString()\n    @Unique('slug', ['slug'], {\n        deferrable: 'INITIALLY DEFERRED'\n    })\n    slug: string;\n\n    @Type(() => Course)\n    @ManyToOne(() => Course, course => course.id)\n    course: Course;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @Column({ type: 'enum', enum: LessonType })\n    type: LessonType;\n\n    @Column({ type: 'int' })\n    position: number;\n\n    @Column({ nullable: true })\n    contentUrl?: string;\n\n    @Column({ nullable: true })\n    thumbnail?: string\n\n    @Column({ type: 'jsonb', nullable: true })\n    contentMetadata?: Record\n\n    @Column({ nullable: false, default: true })\n    status: boolean;\n\n    @OneToOne(() => Quiz, { nullable: true }) // Only if lesson is a quiz\n    quiz?: Quiz;\n\n    @CreateDateColumn({ type: 'timestamp', nullable: false })\n    createdAt: Date;\n\n    @UpdateDateColumn({ type: 'timestamp', nullable: false })\n    updatedAt: Date;\n\n    @DeleteDateColumn({ type: 'timestamp', nullable: true })\n    deletedAt: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LessonsController.html":{"url":"controllers/LessonsController.html","title":"controller - LessonsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LessonsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/lessons.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lessons\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOneInstructor\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLessonDto: CreateLessonDto, courseId: string, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post()@ApiConsumes('multipart/form-data')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateLessonDto})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLessonDto\n                                            \n                                                            CreateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(slug: string, page: number, limit: number, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(lesson_slug: string, course_slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':lesson_slug/:course_slug')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lesson_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                course_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findOneInstructor\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneInstructor(course_slug: string, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Get(':course_slug/instructor')@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                course_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLessonDto: UpdateLessonDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Patch(':id')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLessonDto\n                                            \n                                                            UpdateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, UseInterceptors, ParseUUIDPipe, UploadedFiles, Query, DefaultValuePipe, ParseIntPipe } from '@nestjs/common';\nimport { LessonsService } from './lessons.service';\nimport { CreateLessonDto } from './dto/create-lesson.dto';\nimport { UpdateLessonDto } from './dto/update-lesson.dto';\nimport {\n  ApiAcceptedResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { RolesEnum } from '@/enums';\n\n\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { AssociativeArray, storage } from '@/utils';\n\n\n@ApiTags('Lesson')\n@Controller('lessons')\nexport class LessonsController {\n  constructor(private readonly lessonsService: LessonsService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post()\n  @ApiConsumes('multipart/form-data')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateLessonDto,\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'content_url',\n          maxCount: 1,\n        },\n        {\n          name: 'thumbnail'\n        }\n      ],\n      { storage: storage('lesson') },\n    ),\n  )\n  create(@Body() createLessonDto: CreateLessonDto,\n    @Param('courseId') courseId: string,\n    @UploadedFiles()\n    files: {\n      content_url: Express.Multer.File,\n      thumbnail: Express.Multer.File\n    }\n  ) {\n    return this.lessonsService.create(createLessonDto, courseId, files);\n  }\n\n  @Get(':slug')\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(@Param('slug') slug: string,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,\n  ) {\n    const { slug: _, ...filteredFilters } = filters; // Exclude 'slug' from filters\n    return this.lessonsService.findAll(slug, filteredFilters);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Get(':course_slug/instructor')\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findOneInstructor(\n    @Param('course_slug') course_slug: string,\n    @Query() filters: AssociativeArray,\n  ) {\n    const { course_slug: _, ...filteredFilters } = filters; // Exclude 'course_slug' from filters\n    return this.lessonsService.getAllLessonByInstructionn(course_slug, filteredFilters);\n  }\n\n  @Get(':lesson_slug/:course_slug')\n  findOne(@Param('lesson_slug') lesson_slug: string,\n    @Param('course_slug') course_slug: string) {\n    return this.lessonsService.findOne(lesson_slug, course_slug);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Patch(':id')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'content_url',\n          maxCount: 1,\n        },\n        {\n          name: 'thumbnail'\n        }\n      ],\n      { storage: storage('lesson') },\n    ),\n  )\n  update(@Param('id') id: string, @Body() updateLessonDto: UpdateLessonDto,\n    @UploadedFiles()\n    files: {\n      content_url: Express.Multer.File,\n      thumbnail: Express.Multer.File\n    }\n  ) {\n    return this.lessonsService.update(id, updateLessonDto, files);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.lessonsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LessonsModule.html":{"url":"modules/LessonsModule.html","title":"module - LessonsModule","body":"\n                   \n\n\n\n\n    Modules\n    LessonsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LessonsModule\n\n\n\ncluster_LessonsModule_providers\n\n\n\n\nLessonsService\n\nLessonsService\n\n\n\nLessonsModule\n\nLessonsModule\n\nLessonsModule -->\n\nLessonsService->LessonsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/lessons/lessons.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LessonsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LessonsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LessonsService } from './lessons.service';\nimport { LessonsController } from './lessons.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Lesson } from './entities/lesson.entity';\nimport { Quiz } from '../quiz/entities/quiz.entity';\nimport { Course } from '../courses/entities/course.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Lesson, Quiz, Course])],\n  controllers: [LessonsController],\n  providers: [LessonsService],\n})\nexport class LessonsModule {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LessonsService.html":{"url":"injectables/LessonsService.html","title":"injectable - LessonsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LessonsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/lessons.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAllLessonByInstructionn\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lessonRepository: Repository, courseRepository: Repository, quizzesRepository: Repository, dataSource: DataSource, responseService: ResponseService, pagination: PaginateHelper)\n                    \n                \n                        \n                            \n                                Defined in src/modules/lessons/lessons.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lessonRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        courseRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        quizzesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagination\n                                                  \n                                                        \n                                                                        PaginateHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createLessonDto: CreateLessonDto, courseId: string, files: FilesDTO, quizId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createLessonDto\n                                            \n                                                            CreateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                quizId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(slug: string, filters?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(lesson_slug: string, course_slug: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lesson_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                course_slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllLessonByInstructionn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllLessonByInstructionn(slug: string, filters?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                slug\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateLessonDto: UpdateLessonDto, files: FilesDTO, quizId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/lessons/lessons.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateLessonDto\n                                            \n                                                            UpdateLessonDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                            FilesDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                quizId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateLessonDto, FilesDTO } from './dto/create-lesson.dto';\nimport { UpdateLessonDto } from './dto/update-lesson.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Lesson } from './entities/lesson.entity';\nimport { DataSource, Repository } from 'typeorm';\nimport { Course } from '../courses/entities/course.entity';\nimport { Quiz } from '../quiz/entities/quiz.entity';\nimport { AssociativeArray, filterQueryBuilderFromRequest, generateSlug, removeFile, ResponseService } from '@/utils';\nimport { PaginateHelper } from '@/utils/paginate';\n\n@Injectable()\nexport class LessonsService {\n  constructor(\n    @InjectRepository(Lesson)\n    private lessonRepository: Repository,\n    @InjectRepository(Course)\n    private courseRepository: Repository,\n    @InjectRepository(Quiz)\n    private quizzesRepository: Repository,\n    private dataSource: DataSource,\n    private readonly responseService: ResponseService,\n    private readonly pagination: PaginateHelper,\n  ) { }\n  async create(createLessonDto: CreateLessonDto, courseId: string, files: FilesDTO, quizId?: string) {\n    try {\n      const course = await this.courseRepository.findOne({\n        where: { id: courseId },\n      });\n\n      if (!course) {\n        this.responseService.Response({\n          message: 'Course not found',\n          statusCode: 404,\n        });\n      }\n\n      this.dataSource.transaction(async (manager) => {\n        await manager.getRepository(Lesson)\n          .createQueryBuilder()\n          .update()\n          .set({ position: () => `\"position\" + 1` })\n          .where('courseId = :courseId', { courseId })\n          .execute();\n        const lesson = this.lessonRepository.create({\n          ...createLessonDto,\n          contentUrl: `lesson/${files.content_url[0]?.filename}`,\n          thumbnail: `lesson/${files.thumbnail[0]?.filename}`,\n          course,\n          slug: generateSlug(createLessonDto.title),\n          position: 1,\n        });\n        const savedLesson = await manager.save(lesson);\n        return this.responseService.Response({\n          message: 'Lesson created successfully',\n          statusCode: 201,\n          data: savedLesson,\n        });\n      })\n\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async findAll(slug: string, filters?: AssociativeArray) {\n    try {\n      const lessonQuery = this.lessonRepository.createQueryBuilder('lesson')\n        .leftJoinAndSelect('lesson.course', 'course')\n        .where('course.slug = :slug', { slug })\n        .andWhere('lesson.status = :status', { status: true })\n        .orderBy('lesson.position', 'ASC');\n      filterQueryBuilderFromRequest(lessonQuery, filters);\n\n      const lessons = await this.pagination.run(lessonQuery);\n\n      return this.responseService.Response({\n        message: 'Lessons fetched successfully',\n        data: lessons,\n        key: 'lessons',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async findOne(lesson_slug: string, course_slug: string) {\n    try {\n      const lesson = await this.lessonRepository.createQueryBuilder('lesson')\n        .leftJoinAndSelect('lesson.course', 'course')\n        .leftJoinAndSelect('course.creator', 'instructor')\n        .where('lesson.slug = :lesson_slug', { lesson_slug })\n        .andWhere('course.slug = :course_slug', { course_slug })\n        .getOne();\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n      }\n      return this.responseService.Response({\n        message: 'Lesson fetched successfully',\n        data: lesson,\n        key: 'lesson',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async update(id: string, updateLessonDto: UpdateLessonDto, files: FilesDTO, quizId?: string) {\n    try {\n      const lesson = await this.lessonRepository.findOne({\n        where: { id },\n      });\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n      }\n      if (files.content_url) {\n        removeFile(lesson.contentUrl);\n\n      }\n      if (files.thumbnail) {\n        removeFile(lesson.thumbnail);\n      }\n      const updatedLesson = await this.lessonRepository.save({\n        ...lesson,\n        ...updateLessonDto,\n        contentUrl: files.content_url ? `lesson/${files.content_url[0]?.filename}` : lesson.contentUrl,\n        thumbnail: files.thumbnail ? `lesson/${files.thumbnail[0]?.filename}` : lesson.thumbnail,\n      });\n      return this.responseService.Response({\n        message: 'Lesson updated successfully',\n        data: updatedLesson,\n        key: 'lesson',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      const lesson = await this.lessonRepository.findOne({\n        where: { id },\n      });\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n\n      }\n      removeFile(lesson.contentUrl);\n      removeFile(lesson.thumbnail);\n      await this.lessonRepository.delete(id);\n      return this.responseService.Response({\n        message: 'Lesson deleted successfully',\n        statusCode: 200,\n      });\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      return this.responseService.Response({\n        message: errorMessage,\n        statusCode: 500,\n      });\n    }\n  }\n\n  async getAllLessonByInstructionn(slug: string, filters?: AssociativeArray) {\n    {\n      try {\n        const lessonQuery = this.lessonRepository.createQueryBuilder('lesson')\n          .leftJoinAndSelect('lesson.course', 'course')\n          .where('course.slug = :slug', { slug })\n          .orderBy('lesson.position', 'ASC');\n        filterQueryBuilderFromRequest(lessonQuery, filters);\n\n        const lessons = await this.pagination.run(lessonQuery);\n\n        return this.responseService.Response({\n          message: 'Lessons fetched successfully',\n          data: lessons,\n          key: 'lessons',\n          statusCode: 200,\n        });\n      } catch (error) {\n        const errorMessage = (error as Error).message;\n        return this.responseService.Response({\n          message: errorMessage,\n          statusCode: 500,\n        });\n\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : WinstonModule.createLogger({\n    level: 'info',\n    format: format.combine(format.timestamp(), format.json()),\n    transports: [\n      new transports.DailyRotateFile({\n        level: 'error',\n        filename: 'logs/%DATE%-error.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: true,\n        maxSize: '20m',\n        maxFiles: '14d',\n        handleExceptions: true,\n        json: true,\n      }),\n      new transports.DailyRotateFile({\n        filename: 'logs/%DATE%-info.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: false,\n        maxFiles: '14d',\n      }),\n      new transports.Console({\n        level: 'debug',\n        format: format.combine(\n          format.timestamp(),\n          format.json(),\n          format.errors({ stack: true }),\n          format.splat(),\n          format.colorize({\n            all: true,\n          }),\n          format.printf(\n            (info) => `${info.timestamp} ${info.level}: ${info.message}`,\n          ),\n        ),\n      }),\n    ],\n  })\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { format, transports } from 'winston';\nimport 'winston-daily-rotate-file';\nimport { WinstonModule } from 'nest-winston';\n\nexport class Logger {\n  public static logger = WinstonModule.createLogger({\n    level: 'info',\n    format: format.combine(format.timestamp(), format.json()),\n    transports: [\n      new transports.DailyRotateFile({\n        level: 'error',\n        filename: 'logs/%DATE%-error.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: true,\n        maxSize: '20m',\n        maxFiles: '14d',\n        handleExceptions: true,\n        json: true,\n      }),\n      new transports.DailyRotateFile({\n        filename: 'logs/%DATE%-info.log',\n        format: format.combine(format.timestamp(), format.json()),\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: false,\n        maxFiles: '14d',\n      }),\n      new transports.Console({\n        level: 'debug',\n        format: format.combine(\n          format.timestamp(),\n          format.json(),\n          format.errors({ stack: true }),\n          format.splat(),\n          format.colorize({\n            all: true,\n          }),\n          format.printf(\n            (info) => `${info.timestamp} ${info.level}: ${info.message}`,\n          ),\n        ),\n      }),\n    ],\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/mails/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { join } from 'path';\nimport { config } from '@/configs/config';\n\n@Module({\n  imports: [\n    MailerModule.forRoot({\n      transport: {\n        host: config().mail.host,\n        secure: false,\n        auth: {\n          user: config().mail.auth.user,\n          pass: config().mail.auth.pass,\n        },\n      },\n      defaults: {\n        from: config().mail.from,\n      },\n      template: {\n        dir: join(__dirname, '../../templates/'),\n        adapter: new HandlebarsAdapter(), // or new PugAdapter() or new EjsAdapter()\n        options: {\n          strict: true,\n        },\n      },\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/mails/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendForgotPasswordEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/mails/mail.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendForgotPasswordEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendForgotPasswordEmail(email: string, otp: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/mails/mail.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\n\n@Injectable()\nexport class MailService {\n  constructor(private readonly mailerService: MailerService) {}\n  async sendForgotPasswordEmail(email: string, otp: string, name: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Forgot Password',\n      template: './forgot-password',\n      context: {\n        name,\n        otp,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OTPDto.html":{"url":"classes/OTPDto.html","title":"class - OTPDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OTPDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                otp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({allowNaN: false, allowInfinity: false, maxDecimalPlaces: 0}, {message: undefined})@IsNotEmpty()@ApiProperty({example: 1234})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginateHelper.html":{"url":"injectables/PaginateHelper.html","title":"injectable - PaginateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/paginate.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                limit\n                            \n                            \n                                    Private\n                                page\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLimit\n                            \n                            \n                                getPage\n                            \n                            \n                                    Async\n                                run\n                            \n                            \n                                setLimit\n                            \n                            \n                                setPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request)\n                    \n                \n                        \n                            \n                                Defined in src/utils/paginate.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getLimit\n                        \n                    \n                \n            \n            \n                \ngetLimit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPage\n                        \n                    \n                \n            \n            \n                \ngetPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(query: SelectQueryBuilder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        SelectQueryBuilder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLimit\n                        \n                    \n                \n            \n            \n                \nsetLimit(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPage\n                        \n                    \n                \n            \n            \n                \nsetPage(page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/paginate.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/utils/paginate.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/utils/paginate.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope, Inject } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport {\n  Pagination,\n  paginate,\n  PaginationTypeEnum,\n} from 'nestjs-typeorm-paginate';\nimport { SelectQueryBuilder } from 'typeorm';\nimport { url } from './lib';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class PaginateHelper {\n  private limit = 10;\n  private page = 1;\n\n  constructor(@Inject(REQUEST) private readonly req: Request) {\n    try {\n      const iurl = new URL(url(req.url));\n      this.limit = +iurl.searchParams.get('limit') || 10;\n      this.page = +iurl.searchParams.get('page') || 1;\n    } catch (error) {}\n  }\n\n  setLimit(limit: number) {\n    this.limit = limit;\n  }\n\n  getLimit() {\n    return this.limit;\n  }\n\n  setPage(page: number) {\n    this.page = page;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  async run(query: SelectQueryBuilder): Promise> {\n    return paginate(query, {\n      limit: this.limit,\n      page: this.page,\n      paginationType: PaginationTypeEnum.TAKE_AND_SKIP,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getError\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getError\n                        \n                    \n                \n            \n            \n                \n                        \n                    getError()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/debug-sentry')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiBearerAuth()@Roles(RolesEnum.ALL)@UseGuards(AuthGuard)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(user: AuthUserType, updateUserDto: ProfileDto, files: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)@ApiOperation({summary: 'Update user'})@ApiBearerAuth()@Roles(RolesEnum.ALL)@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            ProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  UseGuards,\n  UseInterceptors,\n  UploadedFiles,\n  Put,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto, ProfileDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {\n  ApiTags,\n  ApiQuery,\n  ApiBearerAuth,\n  ApiOperation,\n  ApiConsumes,\n} from '@nestjs/swagger';\nimport { AssociativeArray, storage } from '@/utils';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { RolesEnum } from '@/enums';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Get()\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,\n  ) {\n    return this.userService.findAll(filters);\n  }\n\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @ApiQuery({\n    name: 'role',\n    required: true,\n    enum: RolesEnum,\n    description: 'Role to assign to the user',\n  })\n  @Put(':id/role')\n  updateRole(@Param('id') id: string, @Query('role') role: RolesEnum) {\n    return this.userService.updateRole(id, role);\n  }\n}\n\n@ApiTags('Profile')\n@Controller('profile')\nexport class ProfileController {\n  constructor(private readonly userService: UserService) {}\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  @Get('')\n  getProfile(@User() user: AuthUserType) {\n    return this.userService.getProfile(user);\n  }\n\n  @Patch('profile')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('/profile') },\n    ),\n  )\n  @ApiOperation({ summary: 'Update user' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  updateProfile(\n    @User() user: AuthUserType,\n    @Body() updateUserDto: ProfileDto,\n    @UploadedFiles()\n    files: {\n      profile_picture: Express.Multer.File;\n    },\n  ) {\n    return this.userService.updateProfile(updateUserDto, user, files);\n  }\n\n  @Get('/debug-sentry')\n  getError() {\n    throw new Error('My first Sentry error!');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileDto.html":{"url":"classes/ProfileDto.html","title":"class - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                profile_picture\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Kigali, Rwanda', description: 'The address of the user'})@IsString({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'I am a software engineer', description: 'The bio of the user'})@IsString({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Express.Multer.File\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'https://example.com/icon.png', description: 'The profile picture of the user', type: 'string', format: 'binary'})@IsString({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/create-user.dto.ts:128\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n  IsPhoneNumber,\n  IsOptional,\n} from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { RolesEnum as Roles } from '@/enums';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john_doe',\n    description: 'The username of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.USERNAME_REQUIRED',\n    ),\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'John Doe',\n    description: 'The name of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.NAME_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @MaxLength(50)\n  name: string;\n\n  @ApiProperty({\n    example: 'example@example.com',\n    description: 'The email of the user',\n  })\n  @IsEmail(\n    {\n      allow_ip_domain: false,\n      allow_utf8_local_part: true,\n      require_tld: true,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.USER_REGISTER.EMAIL_INVALID',\n      ),\n    },\n  )\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.EMAIL_REQUIRED',\n    ),\n  })\n  email: string;\n  @ApiProperty({\n    example: '+250788888888',\n    description: 'The phone number of the user',\n  })\n  @IsPhoneNumber('RW', {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_INVALID',\n    ),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PHONE_REQUIRED',\n    ),\n  })\n  phone: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'The role of the user',\n  })\n  @IsOptional()\n  role: Roles = Roles.USER;\n\n  @ApiProperty({\n    example: 'johndoe',\n    description: 'The password ',\n  })\n  @IsString()\n  @IsNotEmpty({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_REQUIRED',\n    ),\n  })\n  @MinLength(6, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MIN',\n    ),\n  })\n  @Matches(/^[a-zA-Z0-9]+$/, {\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PASSWORD_MATCH',\n    ),\n  })\n  password: string;\n}\n\n\nexport class ProfileDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    example: 'https://example.com/icon.png',\n    description: 'The profile picture of the user',\n    type: 'string',\n    format: 'binary',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.PROFILE_PIC_REQUIRED',\n    ),\n  })\n  profile_picture?: Express.Multer.File;\n\n  @ApiProperty({\n    example: 'Kigali, Rwanda',\n    description: 'The address of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.ADDRESS_REQUIRED',\n    ),\n  })\n  address: string;\n\n  @ApiProperty({\n    example: 'I am a software engineer',\n    description: 'The bio of the user',\n  })\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.USER_REGISTER.BIO_REQUIRED',\n    ),\n  })\n  bio: string;\n}\nexport class ImagePicDto {\n  profile_picture: Express.Multer.File;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PrometheusController.html":{"url":"controllers/PrometheusController.html","title":"controller - PrometheusController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PrometheusController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                metrics\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMetrics(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { PrometheusService } from './prometheus.service';\n\n@Controller('metrics')\nexport class PrometheusController {\n  constructor(private readonly prometheusService: PrometheusService) {}\n\n  @Get()\n  async getMetrics(@Res() res: Response) {\n    const metrics = await this.prometheusService.getMetrics();\n    res.setHeader('Content-Type', 'text/plain');\n    res.send(metrics);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrometheusMiddleware.html":{"url":"injectables/PrometheusMiddleware.html","title":"injectable - PrometheusMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrometheusMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prometheusService: PrometheusService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/prometheus/prometheus.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prometheusService\n                                                  \n                                                        \n                                                                        PrometheusService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrometheusService } from './prometheus.service';\n\n@Injectable()\nexport class PrometheusMiddleware implements NestMiddleware {\n  constructor(private readonly prometheusService: PrometheusService) {}\n\n  use(req: Request, res: Response, next: NextFunction) {\n    const start = Date.now();\n    res.on('finish', () => {\n      const duration = (Date.now() - start) / 1000;\n      const route = req.route?.path || req.path;\n      const method = req.method;\n      const statusCode = res.statusCode.toString();\n\n      this.prometheusService.incrementHttpRequests(method, route, statusCode);\n      this.prometheusService.observeHttpDuration(method, route, duration);\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrometheusModule.html":{"url":"modules/PrometheusModule.html","title":"module - PrometheusModule","body":"\n                   \n\n\n\n\n    Modules\n    PrometheusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrometheusModule\n\n\n\ncluster_PrometheusModule_providers\n\n\n\ncluster_PrometheusModule_exports\n\n\n\n\nPrometheusMiddleware \n\nPrometheusMiddleware \n\n\n\nPrometheusService \n\nPrometheusService \n\n\n\nPrometheusModule\n\nPrometheusModule\n\nPrometheusMiddleware  -->\n\nPrometheusModule->PrometheusMiddleware \n\n\n\nPrometheusService  -->\n\nPrometheusModule->PrometheusService \n\n\n\n\n\nPrometheusMiddleware\n\nPrometheusMiddleware\n\nPrometheusModule -->\n\nPrometheusMiddleware->PrometheusModule\n\n\n\n\n\nPrometheusService\n\nPrometheusService\n\nPrometheusModule -->\n\nPrometheusService->PrometheusModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrometheusMiddleware\n                        \n                        \n                            PrometheusService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PrometheusController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrometheusMiddleware\n                        \n                        \n                            PrometheusService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { PrometheusService } from './prometheus.service';\nimport { PrometheusController } from './prometheus.controller';\nimport { PrometheusMiddleware } from './prometheus.middleware';\nimport { PrometheusModule as PrometheusModules } from '@willsoto/nestjs-prometheus';\n\n@Global()\n@Module({\n  imports: [\n    PrometheusModules.register({\n      defaultMetrics: {\n        enabled: true,\n      },\n      global: true,\n    }),\n  ],\n  controllers: [PrometheusController],\n  providers: [PrometheusService, PrometheusMiddleware],\n  exports: [PrometheusService, PrometheusMiddleware],\n})\nexport class PrometheusModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrometheusService.html":{"url":"injectables/PrometheusService.html","title":"injectable - PrometheusService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrometheusService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/prometheus/prometheus.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activeUsers\n                            \n                            \n                                    Public\n                                    Readonly\n                                courseEnrollments\n                            \n                            \n                                    Public\n                                    Readonly\n                                httpRequestDuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                httpRequestsTotal\n                            \n                            \n                                    Public\n                                    Readonly\n                                quizCompletions\n                            \n                            \n                                    Private\n                                    Readonly\n                                register\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMetrics\n                            \n                            \n                                incrementCourseEnrollments\n                            \n                            \n                                incrementHttpRequests\n                            \n                            \n                                incrementQuizCompletions\n                            \n                            \n                                observeHttpDuration\n                            \n                            \n                                setActiveUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/prometheus/prometheus.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMetrics\n                        \n                    \n                \n            \n            \n                \ngetMetrics()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        incrementCourseEnrollments\n                        \n                    \n                \n            \n            \n                \nincrementCourseEnrollments(courseId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                courseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        incrementHttpRequests\n                        \n                    \n                \n            \n            \n                \nincrementHttpRequests(method: string, route: string, statusCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                route\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        incrementQuizCompletions\n                        \n                    \n                \n            \n            \n                \nincrementQuizCompletions(quizId: string, status: \"passed\" | \"failed\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                quizId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                        \"passed\" | \"failed\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeHttpDuration\n                        \n                    \n                \n            \n            \n                \nobserveHttpDuration(method: string, route: string, duration: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                method\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                route\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                duration\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setActiveUsers\n                        \n                    \n                \n            \n            \n                \nsetActiveUsers(count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/prometheus/prometheus.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Gauge\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        courseEnrollments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Counter\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        httpRequestDuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Histogram\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        httpRequestsTotal\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Counter\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        quizCompletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Counter\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        register\n                        \n                    \n                \n            \n                \n                    \n                        Type :     client.Registry\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/prometheus/prometheus.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as client from 'prom-client';\n\n@Injectable()\nexport class PrometheusService {\n  private readonly register: client.Registry;\n  public readonly httpRequestsTotal: client.Counter;\n  public readonly httpRequestDuration: client.Histogram;\n  public readonly activeUsers: client.Gauge;\n  public readonly courseEnrollments: client.Counter;\n  public readonly quizCompletions: client.Counter;\n\n  constructor() {\n    this.register = new client.Registry();\n    this.register.setDefaultLabels({ app: 'e-learning-api' });\n    client.collectDefaultMetrics({ register: this.register });\n\n    // HTTP requests counter\n    this.httpRequestsTotal = new client.Counter({\n      name: 'http_requests_total',\n      help: 'Total number of HTTP requests',\n      labelNames: ['method', 'route', 'status_code'],\n      registers: [this.register],\n    });\n\n    // HTTP request duration histogram\n    this.httpRequestDuration = new client.Histogram({\n      name: 'http_request_duration_seconds',\n      help: 'Duration of HTTP requests in seconds',\n      labelNames: ['method', 'route'],\n      buckets: [0.1, 0.5, 1, 2, 5],\n      registers: [this.register],\n    });\n\n    // Active users gauge\n    this.activeUsers = new client.Gauge({\n      name: 'active_users_total',\n      help: 'Number of currently active users',\n      registers: [this.register],\n    });\n\n    // Course enrollments counter\n    this.courseEnrollments = new client.Counter({\n      name: 'course_enrollments_total',\n      help: 'Total number of course enrollments',\n      labelNames: ['course_id'],\n      registers: [this.register],\n    });\n\n    // Quiz completions counter\n    this.quizCompletions = new client.Counter({\n      name: 'quiz_completions_total',\n      help: 'Total number of quiz completions',\n      labelNames: ['quiz_id', 'status'],\n      registers: [this.register],\n    });\n  }\n\n  getMetrics(): Promise {\n    return this.register.metrics();\n  }\n\n  // Helper methods to increment metrics\n  incrementHttpRequests(method: string, route: string, statusCode: string) {\n    this.httpRequestsTotal.inc({ method, route, status_code: statusCode });\n  }\n\n  observeHttpDuration(method: string, route: string, duration: number) {\n    this.httpRequestDuration.observe({ method, route }, duration);\n  }\n\n  setActiveUsers(count: number) {\n    this.activeUsers.set(count);\n  }\n\n  incrementCourseEnrollments(courseId: string) {\n    this.courseEnrollments.inc({ course_id: courseId });\n  }\n\n  incrementQuizCompletions(quizId: string, status: 'passed' | 'failed') {\n    this.quizCompletions.inc({ quiz_id: quizId, status });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/query-fail.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/filters/query-fail.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/filters/query-fail.filter.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/query-fail.filter.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Response } from 'express';\nimport { QueryFailedError } from 'typeorm';\nimport { STATUS_CODES } from 'http';\n\n@Catch(QueryFailedError)\nexport class QueryFailedFilter implements ExceptionFilter {\n  constructor(public reflector: Reflector) {}\n\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status =\n      exception.constraint && exception.constraint.startsWith('UQ')\n        ? HttpStatus.CONFLICT\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    response.status(status).json({\n      statusCode: status,\n      error: STATUS_CODES[status],\n      message: exception.message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Question.html":{"url":"entities/Question.html","title":"entity - Question","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/entities/quiz.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                correctAnswers\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                options\n                            \n                            \n                                    \n                                quiz\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        correctAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-array', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnswerOption[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, option => option.question, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quiz\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Quiz\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, quiz => quiz.questions, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QuestionType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QuestionType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:50\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from \"@/utils\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, OneToMany, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { Lesson } from \"@/modules/lessons/entities/lesson.entity\";\n\nexport enum QuestionType {\n    SINGLE_CHOICE = 'single_choice',\n    MULTIPLE_CHOICE = 'multiple_choice',\n    TEXT = 'text',\n}\n\n@Entity()\nexport class Quiz {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @OneToMany(() => Question, (question) => question.quiz, { cascade: true })\n    questions: Question[];\n\n    @OneToOne(() => Lesson, (lesson) => lesson.quiz) // Bidirectional relationship\n    lesson: Lesson;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n@Entity()\nexport class Question {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    text: string;\n\n    @Column({ type: 'enum', enum: QuestionType })\n    type: QuestionType;\n\n    @ManyToOne(() => Quiz, (quiz) => quiz.questions, { onDelete: 'CASCADE' })\n    quiz: Quiz;\n\n    @OneToMany(() => AnswerOption, (option) => option.question, { cascade: true })\n    options: AnswerOption[];\n\n    @Column({ type: 'simple-array', nullable: true })\n    correctAnswers?: string[]; // For MCQs: [\"A\", \"C\"], for text: [\"exact answer\"]\n}\n\n@Entity()\nexport class AnswerOption {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    label: string; // e.g., \"A\", \"B\", \"C\"\n\n    @Column()\n    text: string;\n\n    @ManyToOne(() => Question, (question) => question.options, { onDelete: 'CASCADE' })\n    question: Question;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Quiz.html":{"url":"entities/Quiz.html","title":"entity - Quiz","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Quiz\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/entities/quiz.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lesson\n                            \n                            \n                                    \n                                questions\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lesson\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Lesson\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, lesson => lesson.quiz)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, question => question.quiz, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quiz/entities/quiz.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from \"@/utils\";\nimport { Column, CreateDateColumn, Entity, ManyToOne, OneToMany, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { Lesson } from \"@/modules/lessons/entities/lesson.entity\";\n\nexport enum QuestionType {\n    SINGLE_CHOICE = 'single_choice',\n    MULTIPLE_CHOICE = 'multiple_choice',\n    TEXT = 'text',\n}\n\n@Entity()\nexport class Quiz {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    title: string;\n\n    @Column({ type: 'text', nullable: true })\n    description?: string;\n\n    @OneToMany(() => Question, (question) => question.quiz, { cascade: true })\n    questions: Question[];\n\n    @OneToOne(() => Lesson, (lesson) => lesson.quiz) // Bidirectional relationship\n    lesson: Lesson;\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n@Entity()\nexport class Question {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    text: string;\n\n    @Column({ type: 'enum', enum: QuestionType })\n    type: QuestionType;\n\n    @ManyToOne(() => Quiz, (quiz) => quiz.questions, { onDelete: 'CASCADE' })\n    quiz: Quiz;\n\n    @OneToMany(() => AnswerOption, (option) => option.question, { cascade: true })\n    options: AnswerOption[];\n\n    @Column({ type: 'simple-array', nullable: true })\n    correctAnswers?: string[]; // For MCQs: [\"A\", \"C\"], for text: [\"exact answer\"]\n}\n\n@Entity()\nexport class AnswerOption {\n    constructor() {\n        this.id = uuid();\n    }\n    @PrimaryColumn()\n    id: string;\n\n    @Column()\n    label: string; // e.g., \"A\", \"B\", \"C\"\n\n    @Column()\n    text: string;\n\n    @ManyToOne(() => Question, (question) => question.options, { onDelete: 'CASCADE' })\n    question: Question;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuizController.html":{"url":"controllers/QuizController.html","title":"controller - QuizController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuizController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/quiz.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                quiz\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                createQuiz\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        createQuiz\n                        \n                    \n                \n            \n            \n                \n                        \n                    createQuiz(createQuizDto: CreateQuizDto, lessonId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)@Post(':lessonId')@ApiAcceptedResponse({description: 'The record has been successfully created.', type: CreateQuizDto})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/quiz/quiz.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuizDto\n                                            \n                                                            CreateQuizDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lessonId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { QuizService } from './quiz.service';\nimport { CreateQuizDto } from './dto/create-quiz.dto';\nimport { UpdateQuizDto } from './dto/update-quiz.dto';\nimport { ApiAcceptedResponse, ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@/guards';\nimport { Roles } from '@/decorators';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('Quiz')\n@Controller('quiz')\nexport class QuizController {\n  constructor(private readonly quizService: QuizService) { }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN, RolesEnum.INSTRUCTOR)\n  @Post(':lessonId')\n  @ApiAcceptedResponse({\n    description: 'The record has been successfully created.',\n    type: CreateQuizDto,\n  })\n  createQuiz(\n    @Body() createQuizDto: CreateQuizDto,\n    @Param('lessonId') lessonId: string,) {\n    return this.quizService.createQuiz(createQuizDto, lessonId);\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuizModule.html":{"url":"modules/QuizModule.html","title":"module - QuizModule","body":"\n                   \n\n\n\n\n    Modules\n    QuizModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuizModule\n\n\n\ncluster_QuizModule_providers\n\n\n\n\nQuizService\n\nQuizService\n\n\n\nQuizModule\n\nQuizModule\n\nQuizModule -->\n\nQuizService->QuizModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/quiz/quiz.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuizService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuizController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuizService } from './quiz.service';\nimport { QuizController } from './quiz.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnswerOption, Question, Quiz } from './entities/quiz.entity';\nimport { Lesson } from '../lessons/entities/lesson.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Quiz, AnswerOption, Question, Lesson])],\n  controllers: [QuizController],\n  providers: [QuizService],\n})\nexport class QuizModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuizService.html":{"url":"injectables/QuizService.html","title":"injectable - QuizService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuizService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/quiz.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createQuiz\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(quizRepository: Repository, lessonRepository: Repository, questionRepository: Repository, answerOptionRepository: Repository, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/quiz/quiz.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quizRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        lessonRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        answerOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createQuiz\n                        \n                    \n                \n            \n            \n                \n                        \n                    createQuiz(createQuizDto: CreateQuizDto, lessonId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quiz/quiz.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuizDto\n                                            \n                                                            CreateQuizDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                lessonId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateQuizDto } from './dto/create-quiz.dto';\n// import {  } from './dto/update-quiz.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Quiz, Question, AnswerOption } from './entities/quiz.entity';\nimport { Repository } from 'typeorm';\nimport { Lesson } from '../lessons/entities/lesson.entity';\nimport { ResponseService } from '@/utils';\n\n@Injectable()\nexport class QuizService {\n  constructor(\n    @InjectRepository(Quiz)\n    private quizRepository: Repository,\n    @InjectRepository(Lesson)\n    private lessonRepository: Repository,\n    @InjectRepository(Question)\n    private questionRepository: Repository,\n    @InjectRepository(AnswerOption)\n    private answerOptionRepository: Repository,\n    // @InjectRepository(Answer)\n    // private answerRepository: Repository,\n\n    private readonly responseService: ResponseService,\n  ) {}\n\n  async createQuiz(createQuizDto: CreateQuizDto, lessonId: string) {\n    try {\n      const lesson = await this.lessonRepository.findOne({\n        where: { id: lessonId },\n      });\n\n      if (!lesson) {\n        return this.responseService.Response({\n          message: 'Lesson not found',\n          statusCode: 404,\n        });\n      }\n\n      // const options = createQuizDto.questions.map((question) => ({\n      //   text: question.options,\n      //   isCorrect: question.correctAnswers,\n      // }));\n\n      const quiz = this.quizRepository.create({\n        title: createQuizDto.title,\n        description: createQuizDto.description,\n        lesson: lesson,\n      });\n\n      const questions = createQuizDto.questions.map((question) => ({\n        text: question.text,\n        type: question.type,\n        correctAnswers: question.correctAnswers,\n      }));\n      const savedQuestions = await this.questionRepository.save(questions);\n\n      const savedQuiz = await this.quizRepository.save({\n        ...quiz,\n        questions: savedQuestions,\n      });\n\n      return this.responseService.Response({\n        message: 'Quiz created successfully',\n        statusCode: 201,\n        data: savedQuiz,\n      });\n    } catch (error) {\n      this.responseService.Response({\n        message: 'Error creating quiz',\n        statusCode: 500,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/authenticate.middleware.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport {\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Response, Request, NextFunction } from 'express';\nimport { ResponseService } from '@/utils';\n\n@Injectable()\nexport class AuthenticateMiddleware implements NestMiddleware {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly responseService: ResponseService,\n  ) { }\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const [bearer, token] = authHeader.split(' ');\n      if (bearer !== 'Bearer' || !token) {\n        throw new UnauthorizedException(\n          this.responseService.Response({\n            success: false,\n            statusCode: 401,\n            message: 'Unauthorized',\n          }),\n        );\n      }\n\n      const user = await this.jwtService.verifyAsync(token, {\n        secret: 'secret',\n      });\n\n      req.user = user as User;\n    } catch (error) {\n      throw new UnauthorizedException(\n        this.responseService.Response({\n          success: false,\n          statusCode: 401,\n          message: 'Unauthorized',\n        }),\n      );\n    }\n    next();\n  }\n}\ninterface User {\n  sub: string;\n  iat: number;\n  exp: number;\n  readonly role: string;\n}\n\ndeclare module 'express' {\n  interface Request {\n    user?: User;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()@ApiProperty({example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/create-auth.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty, IsNumber } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\n\nexport class CreateAuthDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'example@example.com | 078888888' })\n  username: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n}\n\nclass ForgetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.USER_NAME',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'email or Phone Number' })\n  username: string;\n}\n\nclass OTPDto {\n  @IsNumber(\n    {\n      allowNaN: false,\n      allowInfinity: false,\n      maxDecimalPlaces: 0,\n    },\n    {\n      message: i18nValidationMessage(\n        'validation.AUTH_LOGIN.OTP_REQUIRED',\n      ),\n    },\n  )\n  @IsNotEmpty()\n  @ApiProperty({ example: 1234 })\n  otp: number;\n}\n\nclass ResetPasswordDto {\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  password: string;\n\n  @IsString({\n    message: i18nValidationMessage(\n      'validation.AUTH_LOGIN.PASSWORD_REQUIRED',\n    ),\n  })\n  @IsNotEmpty()\n  @ApiProperty({ example: 'password' })\n  confirmPassword: string;\n}\nexport { ForgetPasswordDto, OTPDto, ResetPasswordDto };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDto.html":{"url":"classes/ResponseDto.html","title":"class - ResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                data\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                key\n                            \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                method\n                            \n                            \n                                    \n                                    \n                                    \n                                path\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    \n                                statusCode\n                            \n                            \n                                    \n                                    \n                                    \n                                success\n                            \n                            \n                                    \n                                    \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, readOnly: true})@IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/response/response.dto.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsOptional,\n} from 'class-validator';\nimport { HttpStatus } from '@nestjs/common';\nimport { Exclude } from 'class-transformer';\n\nexport class ResponseDto {\n  @ApiProperty({ required: true, readOnly: true })\n  @IsBoolean()\n  @IsNotEmpty()\n  success: boolean;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  statusCode: HttpStatus;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  message: string;\n\n  @ApiProperty({ required: false })\n  data?: Record;\n\n  @Exclude()\n  @ApiProperty({ required: false })\n  key?: string;\n\n  @ApiProperty({\n    required: true,\n  })\n  @IsString()\n  @IsOptional()\n  path: any;\n\n  @ApiProperty({\n    required: true,\n  })\n  @IsString()\n  @IsOptional()\n  method: string;\n\n  @ApiProperty({ required: false })\n  requestId?: string;\n\n  @ApiProperty({ required: true })\n  @IsOptional()\n  @IsNumber()\n  timestamp: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                Response\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/utils/response/index.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        Response\n                        \n                    \n                \n            \n            \n                \n                        \n                    Response(result: IRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/response/index.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                            IRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ResponseDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Scope,\n  Inject,\n  HttpStatus,\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { ResponseDto } from './response.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request, Response } from 'express';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class IResponseData {\n  success = true;\n  statusCode: number = HttpStatus.OK;\n  data: T = null;\n  path: any;\n  method: string;\n  requestId?: string;\n  timestamp: number = Date.now();\n  message: string;\n  key?: string = 'data';\n}\n\nexport class IRequest extends PartialType(IResponseData) {}\n\n@Injectable({ scope: Scope.REQUEST | Scope.TRANSIENT | Scope.DEFAULT })\nexport class ResponseService {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n  public Response(result: IRequest): ResponseDto {\n    const { route, method } = this.request;\n    const response: ResponseDto = {\n      success: result.success,\n      statusCode: result.statusCode,\n      [result.key ?? 'data']: result.data,\n      path: route.path,\n      method: method,\n      requestId: result.requestId,\n      message: result.message,\n      timestamp: new Date(Date.now()).toISOString(),\n    };\n    return response;\n  }\n}\n\n@Catch()\nexport class CustomExceptionFilter implements ExceptionFilter {\n  constructor(private readonly responseService: ResponseService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const result = {\n      success: false,\n      statusCode: status,\n      data: null,\n      key: 'error',\n      message: exception.message || 'An unexpected error occurred',\n    };\n    const errorResponse = this.responseService.Response(result);\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_SharedModule_imports\n\n\n\n\nDbModule\n\nDbModule\n\n\n\nSharedModule\n\nSharedModule\n\nSharedModule -->\n\nDbModule->SharedModule\n\n\n\n\n\nAuthenticateMiddleware \n\nAuthenticateMiddleware \n\nAuthenticateMiddleware  -->\n\nSharedModule->AuthenticateMiddleware \n\n\n\n\n\nPaginateHelper \n\nPaginateHelper \n\nPaginateHelper  -->\n\nSharedModule->PaginateHelper \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nSharedModule->ResponseService \n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nSharedModule -->\n\nAuthenticateMiddleware->SharedModule\n\n\n\n\n\nPaginateHelper\n\nPaginateHelper\n\nSharedModule -->\n\nPaginateHelper->SharedModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nSharedModule -->\n\nResponseService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            PaginateHelper\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            PaginateHelper\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DbModule } from '@/configs';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { ResponseService, CustomExceptionFilter } from '@/utils';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { Global, Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\nimport { SentryGlobalFilter, SentryModule } from '@sentry/nestjs/setup';\n\n@Global()\n@Module({\n  imports: [DbModule,\n    SentryModule.forRoot()\n  ],\n  controllers: [],\n  providers: [ResponseService, AuthenticateMiddleware,\n    PaginateHelper,\n    {\n      provide: APP_FILTER,\n      useClass: SentryGlobalFilter\n    },\n\n  ],\n  exports: [ResponseService, AuthenticateMiddleware, PaginateHelper],\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/category/dto/update-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCourseDto.html":{"url":"classes/UpdateCourseDto.html","title":"class - UpdateCourseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCourseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/courses/dto/update-course.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCourseDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCourseDto } from './create-course.dto';\n\nexport class UpdateCourseDto extends PartialType(CreateCourseDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLessonDto.html":{"url":"classes/UpdateLessonDto.html","title":"class - UpdateLessonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLessonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/lessons/dto/update-lesson.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateLessonDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateLessonDto } from './create-lesson.dto';\n\nexport class UpdateLessonDto extends PartialType(CreateLessonDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuizDto.html":{"url":"classes/UpdateQuizDto.html","title":"class - UpdateQuizDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuizDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quiz/dto/update-quiz.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateQuizDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuizDto } from './create-quiz.dto';\n\nexport class UpdateQuizDto extends PartialType(CreateQuizDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCategoryDto.html":{"url":"classes/UpdateUserCategoryDto.html","title":"class - UpdateUserCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/dto/update-user-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserCategoryDto } from './create-user-category.dto';\n\nexport class UpdateUserCategoryDto extends PartialType(CreateUserCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                bio\n                            \n                            \n                                    \n                                    \n                                created_at\n                            \n                            \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                profile_picture\n                            \n                            \n                                    \n                                    \n                                refresh_token\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updated_at\n                            \n                            \n                                    \n                                userCategories\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})@IsEmail()@IsNotEmpty()@Unique('email', ['email'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@IsNotEmpty()@MinLength(6)@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        profile_picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Roles, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCategories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryColumn,\n  Unique,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { Exclude, Type } from 'class-transformer';\nimport { RolesEnum as Roles } from '../../../enums';\nimport { uuid } from '@/utils';\nimport { UserCategory } from '@/modules/user-category/entities/user-category.entity';\n\n@Entity('users')\nexport class User {\n  constructor() {\n    this.id = uuid();\n  }\n  @PrimaryColumn()\n  id: string;\n\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @Column({ nullable: false, unique: true })\n  @IsEmail()\n  @IsNotEmpty()\n  @Unique('email', ['email'])\n  email: string;\n\n  @Column({ nullable: false, unique: true })\n  username: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  phone: string;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({\n    type: 'enum',\n    enum: Roles,\n    default: Roles.USER,\n  })\n  role: Roles;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  profile_picture: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n\n  @Column({ nullable: true })\n  @IsString()\n  @IsNotEmpty()\n  bio: string;\n\n  @Column()\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  @Exclude()\n  password: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  refresh_token: string;\n\n  @Type(() => Date)\n  @CreateDateColumn({ type: 'timestamp', nullable: false })\n  created_at: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', nullable: false })\n  updated_at: Date;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deleted_at: Date;\n\n  @Type(() => UserCategory)\n  userCategories: UserCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserCategory.html":{"url":"entities/UserCategory.html","title":"entity - UserCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/entities/user-category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                deleted_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updated_at\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.userCategories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCategories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user-category/entities/user-category.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { uuid } from '@/utils';\nimport {\n  Entity,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  PrimaryColumn,\n  DeleteDateColumn,\n} from 'typeorm';\nimport { User } from '@/modules/user/entities/user.entity';\nimport { Category } from '@/modules/category/entities/category.entity';\n\n@Entity('user_categories')\nexport class UserCategory {\n  constructor() {\n    this.id = uuid();\n  }\n  @PrimaryColumn()\n  id: string;\n\n  @ManyToOne(() => User, (user) => user.userCategories)\n  user: User;\n\n  @ManyToOne(() => Category, (category) => category.userCategories)\n  category: Category;\n\n  @CreateDateColumn({ type: 'timestamp', nullable: false })\n  created_at: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', nullable: false })\n  updated_at: Date;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deleted_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCategoryController.html":{"url":"controllers/UserCategoryController.html","title":"controller - UserCategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/user-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user-category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserCategoryDto: CreateUserCategoryDto, user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserCategoryDto\n                                            \n                                                            CreateUserCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(user: AuthUserType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { UserCategoryService } from './user-category.service';\nimport { CreateUserCategoryDto } from './dto/create-user-category.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { User, Roles } from '@/decorators';\nimport { RolesEnum } from '@/enums';\n\n@ApiTags('user-category')\n@ApiBearerAuth()\n@UseGuards(AuthGuard)\n@Roles(RolesEnum.ADMIN, RolesEnum.USER)\n@Controller('user-category')\nexport class UserCategoryController {\n  constructor(private readonly userCategoryService: UserCategoryService) { }\n\n  @Post()\n  create(\n    @Body() createUserCategoryDto: CreateUserCategoryDto,\n    @User() user: AuthUserType,\n  ) {\n    const payload: CreateUserCategoryDto & AuthUserType = {\n      ...createUserCategoryDto,\n      ...user,\n    };\n    return this.userCategoryService.create(payload);\n  }\n\n  @Get()\n  findAll(@User() user: AuthUserType) {\n    return this.userCategoryService.findAll({\n      userId: user.sub,\n    });\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userCategoryService.remove({ id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserCategoryModule.html":{"url":"modules/UserCategoryModule.html","title":"module - UserCategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    UserCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserCategoryModule\n\n\n\ncluster_UserCategoryModule_exports\n\n\n\ncluster_UserCategoryModule_providers\n\n\n\n\nUserCategoryService \n\nUserCategoryService \n\n\n\nUserCategoryModule\n\nUserCategoryModule\n\nUserCategoryService  -->\n\nUserCategoryModule->UserCategoryService \n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nUserCategoryModule -->\n\nAuthenticateMiddleware->UserCategoryModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserCategoryModule -->\n\nResponseService->UserCategoryModule\n\n\n\n\n\nUserCategoryService\n\nUserCategoryService\n\nUserCategoryModule -->\n\nUserCategoryService->UserCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user-category/user-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserCategoryController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserCategoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserCategoryService } from './user-category.service';\nimport { UserCategoryController } from './user-category.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserCategory } from './entities/user-category.entity';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { ResponseService } from '@/utils';\nimport { User } from '../user/entities/user.entity';\nimport { Category } from '../category/entities/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserCategory, User, Category])],\n  controllers: [UserCategoryController],\n  providers: [UserCategoryService, AuthenticateMiddleware, ResponseService],\n  exports: [UserCategoryService],\n})\nexport class UserCategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCategoryService.html":{"url":"injectables/UserCategoryService.html","title":"injectable - UserCategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user-category/user-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCategoryRepository: Repository, userRepository: Repository, categoryRepository: Repository, responseService: ResponseService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user-category/user-category.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCategoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user-category/user-category.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserCategoryDto } from './dto/create-user-category.dto';\nimport { UserCategory } from './entities/user-category.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ResponseService } from '@/utils';\nimport { I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport { AuthUserType } from '@/guards';\nimport { User } from '../user/entities/user.entity';\nimport { Category } from '../category/entities/category.entity';\n\n@Injectable()\nexport class UserCategoryService {\n  constructor(\n    @InjectRepository(UserCategory)\n    private userCategoryRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(Category)\n    private readonly categoryRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n  ) { }\n  async create({\n    categoryId,\n    sub: userId,\n  }: CreateUserCategoryDto & AuthUserType) {\n    try {\n      for (const id of categoryId) {\n        const category = await this.categoryRepository.findOne({\n          where: { id },\n        });\n        if (!category) {\n          return this.responseService.Response({\n            data: null,\n            message: await this.i18n.t(\n              'validation.USER_CATEGORY_REGISTER.CATEGORY_NOT_FOUND',\n            ),\n            success: false,\n            key: 'category',\n          });\n        }\n\n        const user = await this.userRepository.findOne({\n          where: { id: userId },\n        });\n        const userCategory = this.userCategoryRepository.create({\n          user: user,\n          category,\n        });\n        await this.userCategoryRepository.save(userCategory);\n      }\n      const userCategory = await this.userCategoryRepository.find({\n        where: { user: { id: userId } },\n        relations: ['category'],\n      });\n      return this.responseService.Response({\n        data: userCategory,\n        message: 'User category created successfully',\n        success: true,\n        key: 'userCategories',\n        statusCode: 201,\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to create user category',\n        success: false,\n        key: 'userCategory',\n      });\n    }\n  }\n\n  async findAll({ userId }: { userId: string }) {\n    try {\n      const userCategories = await this.userCategoryRepository.find({\n        where: { user: { id: userId } },\n        relations: ['category'],\n      });\n      return this.responseService.Response({\n        data: userCategories,\n        message: 'User categories fetched successfully',\n        success: true,\n        key: 'userCategories',\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to fetch user categories',\n        success: false,\n        key: 'userCategories',\n      });\n    }\n  }\n\n  async remove({ id }: { id: string }) {\n    try {\n      await this.userCategoryRepository.softDelete(id);\n      return this.responseService.Response({\n        data: null,\n        message: 'User category deleted successfully',\n        success: true,\n        key: 'userCategory',\n      });\n    } catch (e) {\n      const errorMsg = (e as Error).message;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: 'Failed to delete user category',\n        success: false,\n        key: 'userCategory',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, filters: AssociativeArray)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(AuthGuard)@Roles(RolesEnum.ADMIN)@Get()@ApiQuery({name: 'page', required: false, type: Number, description: 'Page number'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'Items per page'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(id: string, role: RolesEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Roles(RolesEnum.ADMIN)@UseGuards(AuthGuard)@ApiQuery({name: 'role', required: true, enum: RolesEnum, description: 'Role to assign to the user'})@Put(':id/role')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            RolesEnum\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  UseGuards,\n  UseInterceptors,\n  UploadedFiles,\n  Put,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto, ProfileDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport {\n  ApiTags,\n  ApiQuery,\n  ApiBearerAuth,\n  ApiOperation,\n  ApiConsumes,\n} from '@nestjs/swagger';\nimport { AssociativeArray, storage } from '@/utils';\nimport { AuthGuard, AuthUserType } from '@/guards';\nimport { Roles, User } from '@/decorators';\nimport { RolesEnum } from '@/enums';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard)\n  @Roles(RolesEnum.ADMIN)\n  @Get()\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Page number',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Items per page',\n  })\n  findAll(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,\n    @Query() filters: AssociativeArray,\n  ) {\n    return this.userService.findAll(filters);\n  }\n\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ADMIN)\n  @UseGuards(AuthGuard)\n  @ApiQuery({\n    name: 'role',\n    required: true,\n    enum: RolesEnum,\n    description: 'Role to assign to the user',\n  })\n  @Put(':id/role')\n  updateRole(@Param('id') id: string, @Query('role') role: RolesEnum) {\n    return this.userService.updateRole(id, role);\n  }\n}\n\n@ApiTags('Profile')\n@Controller('profile')\nexport class ProfileController {\n  constructor(private readonly userService: UserService) {}\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  @Get('')\n  getProfile(@User() user: AuthUserType) {\n    return this.userService.getProfile(user);\n  }\n\n  @Patch('profile')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        {\n          name: 'icon_url',\n          maxCount: 1,\n        },\n      ],\n      { storage: storage('/profile') },\n    ),\n  )\n  @ApiOperation({ summary: 'Update user' })\n  @ApiBearerAuth()\n  @Roles(RolesEnum.ALL)\n  @UseGuards(AuthGuard)\n  updateProfile(\n    @User() user: AuthUserType,\n    @Body() updateUserDto: ProfileDto,\n    @UploadedFiles()\n    files: {\n      profile_picture: Express.Multer.File;\n    },\n  ) {\n    return this.userService.updateProfile(updateUserDto, user, files);\n  }\n\n  @Get('/debug-sentry')\n  getError() {\n    throw new Error('My first Sentry error!');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nUserModule -->\n\nAuthenticateMiddleware->UserModule\n\n\n\n\n\nPaginateHelper\n\nPaginateHelper\n\nUserModule -->\n\nPaginateHelper->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticateMiddleware\n                        \n                        \n                            PaginateHelper\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { ProfileController, UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { ResponseService } from '@/utils';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { AuthenticateMiddleware } from '@/middlewares';\nimport { JwtService } from '@nestjs/jwt';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController, ProfileController],\n  providers: [\n    UserService,\n    AuthenticateMiddleware,\n    JwtService,\n    ResponseService,\n    PaginateHelper,\n  ],\n  exports: [UserService],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                emailExists\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                formatUsername\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                userDetail\n                            \n                            \n                                    Async\n                                usernameExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, responseService: ResponseService, i18n: I18nService, userPagination: PaginateHelper)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                        I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userPagination\n                                                  \n                                                        \n                                                                        PaginateHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emailExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailExists(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:174\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filters?: AssociativeArray)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filters\n                                            \n                                                            AssociativeArray\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatUsername\n                        \n                    \n                \n            \n            \n                \nformatUsername(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(authUser: AuthUserType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:244\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authUser\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(updateUserDto: ProfileDto, authUser: AuthUserType, imageProfile: ImagePicDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:207\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            ProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authUser\n                                            \n                                                            AuthUserType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                imageProfile\n                                            \n                                                            ImagePicDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(id: string, role: Roles)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                role\n                                            \n                                                            Roles\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userDetail\n                        \n                    \n                \n            \n            \n                \n                        \n                    userDetail(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        usernameExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    usernameExists(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto, ImagePicDto, ProfileDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport {\n  AssociativeArray,\n  filterQueryBuilderFromRequest,\n  getUploadPath,\n  removeFile,\n  ResponseService,\n} from '@/utils';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\nimport { I18nTranslations } from '@/generated';\nimport * as bcrypt from 'bcrypt';\nimport { RolesEnum as Roles } from '@/enums';\nimport { PaginateHelper } from '@/utils/paginate';\nimport { AuthUserType } from '@/guards';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly responseService: ResponseService,\n    private readonly i18n: I18nService,\n    private readonly userPagination: PaginateHelper,\n  ) {}\n  async create(createUserDto: CreateUserDto) {\n    try {\n      const lang = I18nContext.current().lang;\n      const { email, password, phone, username, role } = createUserDto;\n      const isEmailExists = await this.emailExists(email);\n      const isUsernameExists = await this.usernameExists(\n        this.formatUsername(username),\n      );\n      if (isUsernameExists) {\n        return this.responseService.Response({\n          data: null,\n          message: await this.i18n.t('validation.USER_REGISTER.EMAIL_EXISTS', {\n            lang,\n          }),\n        });\n      }\n      if (isEmailExists) {\n        return this.responseService.Response({\n          data: null,\n          message: await this.i18n.t('validation.USER_REGISTER.EMAIL_EXISTS', {\n            lang,\n          }),\n        });\n      }\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const UserRole = Roles[role];\n      const user = this.userRepository.create({\n        ...createUserDto,\n        phone,\n        username: this.formatUsername(username),\n        password: hashedPassword,\n        role: UserRole,\n      });\n\n      await this.userRepository.save(user);\n      return this.responseService.Response({\n        data: user,\n        key: 'users',\n        message: await this.i18n.t('validation.USER_REGISTER.USER_SUCCESS', {\n          lang,\n        }),\n      });\n    } catch (error) {\n      const errorMsg = (error as Error).message;\n      const lang = I18nContext.current().lang;\n      return this.responseService.Response({\n        data: errorMsg,\n        message: await this.i18n.t('validation.USER_REGISTER.USER_FAIL', {\n          lang,\n        }),\n      });\n    }\n  }\n\n  async findAll(filters?: AssociativeArray) {\n    try {\n      const q = this.userRepository\n        .createQueryBuilder('users')\n        .select([\n          'users.id',\n          'users.name',\n          'users.username',\n          'users.email',\n          'users.phone',\n          'users.status',\n          'users.created_at',\n          'users.role',\n          'users.deleted_at',\n        ])\n        .orderBy('users.created_at', 'DESC');\n      filterQueryBuilderFromRequest(q, filters);\n\n      const users = await this.userPagination.run(q);\n      return this.responseService.Response({\n        data: users,\n        key: 'users',\n        message: 'Users fetched successfully',\n      });\n    } catch (error) {}\n  }\n\n  async findOne(id: string) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id },\n        withDeleted: true,\n      });\n      return this.responseService.Response({\n        data: user,\n        key: 'users',\n        message: 'User fetched successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not found',\n      });\n    }\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id },\n        withDeleted: true,\n      });\n      if (!user) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n        });\n      }\n      const updatedUser = await this.userRepository.save({\n        ...user,\n        ...updateUserDto,\n      });\n      return this.responseService.Response({\n        data: updatedUser,\n        key: 'users',\n        message: 'User updated successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not updated',\n      });\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      await this.userRepository.softDelete(id);\n      return this.responseService.Response({\n        data: null,\n        message: 'User deleted successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not deleted',\n      });\n    }\n  }\n\n  async emailExists(email: string): Promise {\n    const exists = await this.userRepository.exists({\n      where: { email },\n      withDeleted: true,\n    });\n    return exists;\n  }\n\n  async usernameExists(username: string): Promise {\n    const exists = await this.userRepository.exists({\n      where: { username },\n      withDeleted: true,\n    });\n    return exists;\n  }\n\n  formatUsername(name: string): string {\n    if (!name) return '';\n    return name\n      .replace(/' '/g, '_')\n      .replace(/[^a-zA-Z0-9_]/g, '')\n      .replace(/\\s/g, '')\n      .toLowerCase();\n  }\n\n  async userDetail(id: string) {\n    const user = await this.userRepository.findOneOrFail({\n      where: { id },\n      withDeleted: true,\n    });\n    return user;\n  }\n\n  async updateProfile(\n    updateUserDto: ProfileDto,\n    authUser: AuthUserType,\n    imageProfile: ImagePicDto,\n  ) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id: authUser.sub },\n        withDeleted: true,\n      });\n      if (!user) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n        });\n      }\n      if (user?.profile_picture) {\n        removeFile(user.profile_picture);\n      }\n      const updatedUser = await this.userRepository.save({\n        ...user,\n        ...updateUserDto,\n        profile_picture: imageProfile?.profile_picture[0]?.filename || null,\n      });\n\n      return this.responseService.Response({\n        data: updatedUser,\n        key: 'users',\n        message: 'User updated successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not updated',\n      });\n    }\n  }\n  async getProfile(authUser: AuthUserType) {\n    try {\n      const user = await this.userRepository.findOneOrFail({\n        where: { id: authUser?.sub },\n        withDeleted: true,\n      });\n      user.profile_picture = user.profile_picture\n        ? getUploadPath(user.profile_picture)\n        : null;\n      return this.responseService.Response({\n        data: user,\n        key: 'users',\n        message: 'User fetched successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not found',\n      });\n    }\n  }\n\n  async updateRole(id: string, role: Roles) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { id },\n        withDeleted: true,\n      });\n      if (!user) {\n        return this.responseService.Response({\n          data: null,\n          message: 'User not found',\n        });\n      }\n      const updatedUser = await this.userRepository.save({\n        ...user,\n        role,\n      });\n      return this.responseService.Response({\n        data: updatedUser,\n        key: 'users',\n        message: 'User updated successfully',\n      });\n    } catch (error) {\n      return this.responseService.Response({\n        data: null,\n        message: 'User not updated',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/validation.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BadRequestException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: ValidationResponse)\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/validation.exception.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                        ValidationResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ValidationResponse\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/exceptions/validation.exception.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException, ValidationError } from '@nestjs/common';\n\nexport const ValidationExceptionFactory = (errors: ValidationError[]) => {\n  const formattedErrors = formatErrors(errors);\n  return new ValidationException(formattedErrors);\n};\n\ninterface ValidationResponse {\n  [key: string]: string[] | ValidationResponse;\n}\nfunction formatErrors(\n  errors: ValidationError[],\n  seen = new WeakSet(),\n): ValidationResponse {\n  const errorResponse: ValidationResponse = {};\n  errors.forEach((error: ValidationError) => {\n    if (seen.has(error)) {\n      return;\n    }\n    seen.add(error);\n    if (error.constraints) {\n      // Standard validation errors\n      errorResponse[error.property] = Object.values(error.constraints);\n    } else if (error.children && error.children.length > 0) {\n      // Nested errors\n      errorResponse[error.property] = formatErrors(error.children);\n    } else {\n      errorResponse[error.property] = ['Unknown validation error'];\n    }\n  });\n  return errorResponse;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public errors: ValidationResponse) {\n    super(errors);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationResponse.html":{"url":"interfaces/ValidationResponse.html","title":"interface - ValidationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/bad-request.filter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ArgumentsHost,\n  BadRequestException,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ValidationError } from 'class-validator';\nimport { Response } from 'express';\nimport { STATUS_CODES } from 'http';\nimport * as _ from 'lodash';\n\ninterface ValidationResponse {\n  data: Record;\n}\n\n@Catch(BadRequestException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(public reflector: Reflector) { }\n\n  catch(exception: BadRequestException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const response = ctx.getResponse();\n    let statusCode = exception.getStatus();\n    const r = exception.getResponse();\n\n    if (_.isArray(r.message) && r.message[0] instanceof ValidationError) {\n      statusCode = HttpStatus.UNPROCESSABLE_ENTITY;\n      const validationErrors = r.message;\n      this._validationFilter(validationErrors);\n    }\n    const formattedErrors = this.formatErrors(r.message);\n    r.statusCode = statusCode;\n    r.error = STATUS_CODES[statusCode];\n\n    throw response.status(statusCode).json(formattedErrors);\n  }\n\n  private _validationFilter(validationErrors: ValidationError[]) {\n    for (const validationError of validationErrors) {\n      for (const [constraintKey, constraint] of Object.entries(\n        validationError.constraints,\n      )) {\n        if (!constraint) {\n          // convert error message to error.fields.{key} syntax for i18n translation\n          validationError.constraints[constraintKey] =\n            'error.fields.' + _.snakeCase(constraintKey);\n        }\n      }\n      if (!_.isEmpty(validationError.children)) {\n        this._validationFilter(validationError.children);\n      }\n    }\n  }\n\n  private formatErrors(\n    errors: ValidationError[],\n    seen = new WeakSet(),\n  ): ValidationResponse {\n    const errMsg = {};\n\n    if (_.isArray(errors) && errors.length === 0) {\n      errors.forEach((error: ValidationError) => {\n        if (seen.has(error)) {\n          return;\n        }\n        seen.add(error);\n\n        if (error.constraints) {\n          errMsg[error.property] = Object.values(error.constraints);\n        } else if (error.children && error.children.length > 0) {\n          errMsg[error.property] = this.formatErrors(error.children);\n        } else {\n          errMsg[error.property] = ['Unknown validation error'];\n        }\n      });\n      const formattedErrors = {\n        data: errMsg,\n      };\n      return formattedErrors;\n    } else if (!_.isEmpty(errors)) {\n      if (_.isString(errors)) {\n        errMsg['error'] = errors;\n        return {\n          data: errMsg,\n        };\n      }\n    } else {\n      return { data: {} };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValidationResponse-1.html":{"url":"interfaces/ValidationResponse-1.html","title":"interface - ValidationResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ValidationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/exceptions/validation.exception.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    [] | ValidationResponse\n\n                    \n                \n                        \n                            \n                                Defined in src/shared/exceptions/validation.exception.ts:8\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, ValidationError } from '@nestjs/common';\n\nexport const ValidationExceptionFactory = (errors: ValidationError[]) => {\n  const formattedErrors = formatErrors(errors);\n  return new ValidationException(formattedErrors);\n};\n\ninterface ValidationResponse {\n  [key: string]: string[] | ValidationResponse;\n}\nfunction formatErrors(\n  errors: ValidationError[],\n  seen = new WeakSet(),\n): ValidationResponse {\n  const errorResponse: ValidationResponse = {};\n  errors.forEach((error: ValidationError) => {\n    if (seen.has(error)) {\n      return;\n    }\n    seen.add(error);\n    if (error.constraints) {\n      // Standard validation errors\n      errorResponse[error.property] = Object.values(error.constraints);\n    } else if (error.children && error.children.length > 0) {\n      // Nested errors\n      errorResponse[error.property] = formatErrors(error.children);\n    } else {\n      errorResponse[error.property] = ['Unknown validation error'];\n    }\n  });\n  return errorResponse;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public errors: ValidationResponse) {\n    super(errors);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/configs/config.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/configs/config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/configs/swagger.ts\n            \n            class\n            swaggerConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/decorators/auth-user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/logout.decorator.ts\n            \n            variable\n            LogoutDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/roles.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/bad-request.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/filters/bad-request.filter.ts\n            \n            interface\n            ValidationResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/filters/file-request.filter.ts\n            \n            injectable\n            FileRequestFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/query-fail.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/generated/i18n.generated.ts\n            \n            type alias\n            I18nPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/generated/i18n.generated.ts\n            \n            type alias\n            I18nTranslations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/guards/auth.guard.ts\n            \n            type alias\n            AuthUserType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/response.interceptor.ts\n            \n            class\n            CustomResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/authenticate.middleware.ts\n            \n            injectable\n            AuthenticateMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middlewares/authenticate.middleware.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middlewares/authenticate.middleware.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/middlewares/language.middleware.ts\n            \n            injectable\n            LanguageMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            ForgetPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            OTPDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-auth.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/category/dto/create-category.dto.ts\n            \n            class\n            FilesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/category/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/courses/courses.controller.ts\n            \n            controller\n            CoursesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/courses/courses.service.ts\n            \n            injectable\n            CoursesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/courses/dto/create-course.dto.ts\n            \n            class\n            CreateCourseDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/courses/dto/create-course.dto.ts\n            \n            class\n            FilesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/courses/dto/update-course.dto.ts\n            \n            class\n            UpdateCourseDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/courses/entities/course.entity.ts\n            \n            entity\n            Course\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/default/default.module.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/default/default.module.ts\n            \n            injectable\n            DefaultService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/enrolls/enrolls.controller.ts\n            \n            controller\n            EnrollsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/enrolls/enrolls.service.ts\n            \n            injectable\n            EnrollsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/enrolls/entities/enroll.entity.ts\n            \n            entity\n            Enroll\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/lessons/dto/create-lesson.dto.ts\n            \n            class\n            CreateLessonDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/lessons/dto/create-lesson.dto.ts\n            \n            class\n            FilesDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/lessons/dto/update-lesson.dto.ts\n            \n            class\n            UpdateLessonDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/lessons/entities/lesson.entity.ts\n            \n            entity\n            Lesson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/lessons/lessons.controller.ts\n            \n            controller\n            LessonsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/lessons/lessons.service.ts\n            \n            injectable\n            LessonsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/mails/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/prometheus/prometheus.controller.ts\n            \n            controller\n            PrometheusController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/prometheus/prometheus.middleware.ts\n            \n            injectable\n            PrometheusMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/prometheus/prometheus.service.ts\n            \n            injectable\n            PrometheusService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/quiz/dto/create-quiz.dto.ts\n            \n            class\n            CreateQuizDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/quiz/dto/update-quiz.dto.ts\n            \n            class\n            UpdateQuizDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/entities/quiz.entity.ts\n            \n            entity\n            AnswerOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/entities/quiz.entity.ts\n            \n            entity\n            Question\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/entities/quiz.entity.ts\n            \n            entity\n            Quiz\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/quiz/quiz.controller.ts\n            \n            controller\n            QuizController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/quiz/quiz.service.ts\n            \n            injectable\n            QuizService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user-category/dto/create-user-category.dto.ts\n            \n            class\n            CreateUserCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/user-category/dto/update-user-category.dto.ts\n            \n            class\n            UpdateUserCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user-category/entities/user-category.entity.ts\n            \n            entity\n            UserCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user-category/user-category.controller.ts\n            \n            controller\n            UserCategoryController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user-category/user-category.service.ts\n            \n            injectable\n            UserCategoryService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            ImagePicDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/create-user.dto.ts\n            \n            class\n            ProfileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/shared/access-control.service.ts\n            \n            injectable\n            AccessContorlService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/shared/access-control.service.ts\n            \n            interface\n            IsAuthorizedParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/exceptions/validation.exception.ts\n            \n            class\n            ValidationException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/exceptions/validation.exception.ts\n            \n            interface\n            ValidationResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/exceptions/validation.exception.ts\n            \n            function\n            formatErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/exceptions/validation.exception.ts\n            \n            variable\n            ValidationExceptionFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/strategy/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            generateSlug\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            getFileName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            getUploadPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            removeFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            removeWhiteSpace\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/helper.ts\n            \n            variable\n            storage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/lib.ts\n            \n            interface\n            AssociativeArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/lib.ts\n            \n            variable\n            filterQueryBuilderFromRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/lib.ts\n            \n            variable\n            url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/lib.ts\n            \n            variable\n            uuid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger.ts\n            \n            class\n            Logger\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/paginate.ts\n            \n            injectable\n            PaginateHelper\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            class\n            CustomExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            class\n            IRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            class\n            IResponseData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/utils/response/index.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/response/response.dto.ts\n            \n            class\n            ResponseDto\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @sentry/cli : ^2.42.2\n        \n            @sentry/nestjs : ^9.5.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            bcrypt : ^5.1.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            handlebars : ^4.7.8\n        \n            helmet : ^7.1.0\n        \n            multer : ^1.4.5-lts.1\n        \n            nest-winston : ^1.9.4\n        \n            nestjs-i18n : ^10.4.0\n        \n            nestjs-typeorm-paginate : ^4.0.4\n        \n            nodemailer : ^6.9.14\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.11.5\n        \n            postgres : ^3.4.4\n        \n            prom-client : ^15.1.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^9.0.1\n        \n            winston : ^3.13.0\n        \n            winston-daily-rotate-file : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LessonType   (src/.../lesson.entity.ts)\n                        \n                        \n                            QuestionType   (src/.../quiz.entity.ts)\n                        \n                        \n                            RolesEnum   (src/.../roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/lessons/entities/lesson.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        LessonType\n                    \n                \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n                        \n                            \n                                 PDF\n                            \n                        \n                        \n                            \n                                Value : pdf\n                            \n                        \n                        \n                            \n                                 QUIZ\n                            \n                        \n                        \n                            \n                                Value : quiz\n                            \n                        \n                        \n                            \n                                 ARTICLE\n                            \n                        \n                        \n                            \n                                Value : article\n                            \n                        \n            \n        \n\n    src/modules/quiz/entities/quiz.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QuestionType\n                    \n                \n                        \n                            \n                                 SINGLE_CHOICE\n                            \n                        \n                        \n                            \n                                Value : single_choice\n                            \n                        \n                        \n                            \n                                 MULTIPLE_CHOICE\n                            \n                        \n                        \n                            \n                                Value : multiple_choice\n                            \n                        \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n            \n        \n\n    src/enums/roles.ts\n    \n        \n            \n                \n                    \n                        \n                        RolesEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 GUEST\n                            \n                        \n                        \n                            \n                                Value : guest\n                            \n                        \n                        \n                            \n                                 MENTOR\n                            \n                        \n                        \n                            \n                                Value : mentor\n                            \n                        \n                        \n                            \n                                 INSTRUCTOR\n                            \n                        \n                        \n                            \n                                Value : instructor\n                            \n                        \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            formatErrors   (src/.../validation.exception.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/exceptions/validation.exception.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatErrors\n                        \n                    \n                \n            \n            \n                \nformatErrors(errors, seen)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                seen\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    new WeakSet()\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ValidationResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n \n\n  \n\nDescription\nA comprehensive E-Learning API built with NestJS and TypeScript. This platform provides a complete backend solution for online education, featuring course management, user authentication, lesson tracking, quizzes, and more.\nFeatures\n\nUser Management: User registration, authentication, and profile management\nCourse Management: Create, update, and organize courses with categories\nLesson System: Structured lessons with content delivery\nQuiz & Assessment: Interactive quizzes for learning evaluation\nCategory Organization: Organize courses by categories for better navigation\nFile Upload: Support for course materials and media uploads\nAuthentication: Secure JWT-based authentication system\nMonitoring: Integrated with Prometheus for performance monitoring\nDocumentation: Auto-generated API documentation\n\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nThis is an open source e-learning API project. Contributions and feedback are welcome to help improve the platform and make online education more accessible.\nLicense\nThis project is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 NDACYAYISENGA Fabrice\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoursesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DefaultModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnrollsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        I18nConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LessonsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrometheusModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuizModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_exports\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CoursesModule\n\n\n\ncluster_CoursesModule_exports\n\n\n\ncluster_CoursesModule_providers\n\n\n\ncluster_DefaultModule\n\n\n\ncluster_DefaultModule_providers\n\n\n\ncluster_EnrollsModule\n\n\n\ncluster_EnrollsModule_exports\n\n\n\ncluster_EnrollsModule_providers\n\n\n\ncluster_LessonsModule\n\n\n\ncluster_LessonsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PrometheusModule\n\n\n\ncluster_PrometheusModule_exports\n\n\n\ncluster_PrometheusModule_providers\n\n\n\ncluster_QuizModule\n\n\n\ncluster_QuizModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_imports\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_UserCategoryModule\n\n\n\ncluster_UserCategoryModule_exports\n\n\n\ncluster_UserCategoryModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCategoryService \n\nCategoryService \n\nCategoryService  -->\n\nCategoryModule->CategoryService \n\n\n\n\n\nCoursesModule\n\nCoursesModule\n\nAppModule -->\n\nCoursesModule->AppModule\n\n\n\n\n\nCoursesService \n\nCoursesService \n\nCoursesService  -->\n\nCoursesModule->CoursesService \n\n\n\n\n\nDefaultModule\n\nDefaultModule\n\nAppModule -->\n\nDefaultModule->AppModule\n\n\n\n\n\nEnrollsModule\n\nEnrollsModule\n\nAppModule -->\n\nEnrollsModule->AppModule\n\n\n\n\n\nEnrollsService \n\nEnrollsService \n\nEnrollsService  -->\n\nEnrollsModule->EnrollsService \n\n\n\n\n\nI18nConfigModule\n\nI18nConfigModule\n\nAppModule -->\n\nI18nConfigModule->AppModule\n\n\n\n\n\nLessonsModule\n\nLessonsModule\n\nAppModule -->\n\nLessonsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nPrometheusModule\n\nPrometheusModule\n\nAppModule -->\n\nPrometheusModule->AppModule\n\n\n\n\n\nPrometheusMiddleware \n\nPrometheusMiddleware \n\nPrometheusMiddleware  -->\n\nPrometheusModule->PrometheusMiddleware \n\n\n\n\n\nPrometheusService \n\nPrometheusService \n\nPrometheusService  -->\n\nPrometheusModule->PrometheusService \n\n\n\n\n\nQuizModule\n\nQuizModule\n\nAppModule -->\n\nQuizModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nAuthenticateMiddleware \n\nAuthenticateMiddleware \n\nAuthenticateMiddleware  -->\n\nSharedModule->AuthenticateMiddleware \n\n\n\n\n\nPaginateHelper \n\nPaginateHelper \n\nPaginateHelper  -->\n\nSharedModule->PaginateHelper \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nSharedModule->ResponseService \n\n\n\n\n\nUserCategoryModule\n\nUserCategoryModule\n\nAppModule -->\n\nUserCategoryModule->AppModule\n\n\n\n\n\nUserCategoryService \n\nUserCategoryService \n\nUserCategoryService  -->\n\nUserCategoryModule->UserCategoryService \n\n\n\n\n\nUserModule\n\nUserModule\n\nCoursesModule -->\n\nUserModule->CoursesModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nAuthModule -->\n\nResponseService->AuthModule\n\n\n\nCategoryModule -->\n\nResponseService->CategoryModule\n\n\n\nDefaultModule -->\n\nResponseService->DefaultModule\n\n\n\nSharedModule -->\n\nResponseService->SharedModule\n\n\n\nUserCategoryModule -->\n\nResponseService->UserCategoryModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nCoursesService\n\nCoursesService\n\nCoursesModule -->\n\nCoursesService->CoursesModule\n\n\n\n\n\nDefaultService\n\nDefaultService\n\nDefaultModule -->\n\nDefaultService->DefaultModule\n\n\n\n\n\nEnrollsService\n\nEnrollsService\n\nEnrollsModule -->\n\nEnrollsService->EnrollsModule\n\n\n\n\n\nLessonsService\n\nLessonsService\n\nLessonsModule -->\n\nLessonsService->LessonsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPrometheusMiddleware\n\nPrometheusMiddleware\n\nPrometheusModule -->\n\nPrometheusMiddleware->PrometheusModule\n\n\n\n\n\nPrometheusService\n\nPrometheusService\n\nPrometheusModule -->\n\nPrometheusService->PrometheusModule\n\n\n\n\n\nQuizService\n\nQuizService\n\nQuizModule -->\n\nQuizService->QuizModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nSharedModule -->\n\nDbModule->SharedModule\n\n\n\n\n\nAuthenticateMiddleware\n\nAuthenticateMiddleware\n\nSharedModule -->\n\nAuthenticateMiddleware->SharedModule\n\n\n\nUserCategoryModule -->\n\nAuthenticateMiddleware->UserCategoryModule\n\n\n\nUserModule -->\n\nAuthenticateMiddleware->UserModule\n\n\n\n\n\nPaginateHelper\n\nPaginateHelper\n\nSharedModule -->\n\nPaginateHelper->SharedModule\n\n\n\nUserModule -->\n\nPaginateHelper->UserModule\n\n\n\n\n\nUserCategoryService\n\nUserCategoryService\n\nUserCategoryModule -->\n\nUserCategoryService->UserCategoryModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/swaggerConfig.html":{"url":"classes/swaggerConfig.html","title":"class - swaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  swaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configs/swagger.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                description\n                            \n                            \n                                    Static\n                                    Readonly\n                                termsOfService\n                            \n                            \n                                    Static\n                                    Readonly\n                                title\n                            \n                            \n                                    Static\n                                    Readonly\n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Application for E-Learning API. This API is used to manage the application's users, courses, lessons, and other resources.\"\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        termsOfService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Terms of service'\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Application for E-Learning API'\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0.0'\n                    \n                \n                    \n                        \n                                Defined in src/configs/swagger.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class swaggerConfig {\n  public static readonly title = 'Application for E-Learning API';\n  public static readonly version = '1.0.0';\n  public static readonly description =\n    \"Application for E-Learning API. This API is used to manage the application's users, courses, lessons, and other resources.\";\n  public static readonly termsOfService = 'Terms of service';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthUserType   (src/.../auth.guard.ts)\n                        \n                        \n                            I18nPath   (src/.../i18n.generated.ts)\n                        \n                        \n                            I18nTranslations   (src/.../i18n.generated.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/guards/auth.guard.ts\n    \n    \n        \n            \n                \n                    \n                    AuthUserType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/generated/i18n.generated.ts\n    \n    \n        \n            \n                \n                    \n                    I18nPath\n                \n            \n            \n                \n                            Path\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    I18nTranslations\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            config   (src/.../config.ts)\n                        \n                        \n                            filterQueryBuilderFromRequest   (src/.../lib.ts)\n                        \n                        \n                            generateSlug   (src/.../helper.ts)\n                        \n                        \n                            getFileName   (src/.../helper.ts)\n                        \n                        \n                            getUploadPath   (src/.../helper.ts)\n                        \n                        \n                            LogoutDecorator   (src/.../logout.decorator.ts)\n                        \n                        \n                            removeFile   (src/.../helper.ts)\n                        \n                        \n                            removeWhiteSpace   (src/.../helper.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            storage   (src/.../helper.ts)\n                        \n                        \n                            url   (src/.../lib.ts)\n                        \n                        \n                            User   (src/.../auth-user.decorator.ts)\n                        \n                        \n                            uuid   (src/.../lib.ts)\n                        \n                        \n                            ValidationExceptionFactory   (src/.../validation.exception.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configs/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): Config => ({\n  prefix: process.env.PREFIX || '!',\n  port: parseInt(process.env.PORT, 10) || 3000,\n  secret: process.env.JWT_SECRET || 'secret',\n  google: {\n    clientId: process.env.GOOGLE_CLIENT_ID || '',\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n    callbackURL:\n      process.env.GOOGLE_CALLBACK_URL ||\n      'http://localhost:3000/auth/google/callback',\n  },\n  mail: {\n    host: process.env.MAIL_HOST || 'smtp.gmail.com',\n    auth: {\n      user: process.env.MAIL_USER || '',\n      pass: process.env.MAIL_PASS || 'topsecret',\n    },\n    port: parseInt(process.env.MAIL_PORT, 10) || 587,\n    from:\n      `\"No Reply\" ${process.env.MAIL_FROM}` ||\n      '\"No Reply\" ',\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/utils/lib.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        filterQueryBuilderFromRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  q: SelectQueryBuilder,\n  filters?: AssociativeArray,\n) => {\n  if (filters) {\n    const keys = Object.keys(filters);\n\n    const alias = q.alias;\n\n    for (const key of keys) {\n      const value = filters[key];\n\n      if (isIn(key, ['limit', 'offset', 'page'])) continue;\n\n      if (key === 'from') {\n        q.andWhere(`${alias}.createdAt >= '${value}'`);\n        continue;\n      }\n      if (key === 'to') {\n        q.andWhere(`${alias}.createdAt \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (link: string) => {\n  const base = process.env.BACKEND_DOMAIN + '/' + process.env.PREFIX;\n\n  if (link.charAt(0) == '/') {\n    return base + link;\n  }\n  return base + '/' + link;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uuid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => uuidv4()\n                    \n                \n\n\n        \n    \n\n    src/utils/helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSlug\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (title: string) => {\n  return title\n    .toLowerCase()\n    .replace(/ /g, '-')\n    .replace(/[^\\w-]+/g, '');\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFileName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (file: Express.Multer.File, dir?: string | undefined) => {\n  const name = file.originalname.split('.')[0];\n  const ext = file.originalname.split('.')[1];\n\n  return `${removeWhiteSpace(name)}-${Date.now()}.${ext}`;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUploadPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (fileName: string) => {\n  const regix = new RegExp(/https?:\\/\\//);\n  if (regix.test(fileName)) {\n    return fileName;\n  }\n  return `${process.env.BACKEND_DOMAIN}/uploads/${fileName}`;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (fileName: string) => {\n  const filePath = path.join(__dirname, `../../uploads/${fileName}`);\n  if (!fs.existsSync(filePath)) {\n    return;\n  }\n  fs.unlink(filePath, (err) => {\n    if (err) {\n      throw err;\n    }\n  });\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeWhiteSpace\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string) => {\n  return str.replace(/\\s/g, '').toLowerCase();\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (dir?: string | undefined) => diskStorage({\n  destination: (\n    req: Express.Request,\n    file: Express.Multer.File,\n    cb: (error: Error | null, destination: string) => void,\n  ) => {\n    // if (file.size > 1024 * 1024 * 5) {\n    //   return cb(new Error('File is too large'), null);\n    // } else if (!file.mimetype.match(/\\/(jpg|jpeg|png|gif)$/)) {\n    //   return cb(new Error('Only image files are allowed!'), null);\n    // }\n    const distination = path.join(__dirname, '../../uploads', dir || '');\n    if (!fs.existsSync(distination)) {\n      fs.mkdirSync(distination);\n    }\n    cb(null, distination);\n  },\n  filename: (req, file, cb) => {\n    cb(null, getFileName(file, dir));\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/decorators/logout.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LogoutDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (req: Request, res: Response) => {\n  req.user = null;\n  res.status(200).json({\n    success: true,\n    message: 'Logout successfully',\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...role: Role[]) => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n\n        \n    \n\n    src/decorators/auth-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user as AuthUserType;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/shared/exceptions/validation.exception.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationExceptionFactory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (errors: ValidationError[]) => {\n  const formattedErrors = formatErrors(errors);\n  return new ValidationException(formattedErrors);\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
